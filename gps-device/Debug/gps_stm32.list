
gps_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f20  0800f548  0800f548  0001f548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010468  08010468  00030244  2**0
                  CONTENTS
  4 .ARM          00000008  08010468  08010468  00020468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010470  08010470  00030244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010470  08010470  00020470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010474  08010474  00020474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08010478  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000244  080106bc  00030244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080106bc  0003036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7ed  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee6  00000000  00000000  0003da61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0003f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  00040490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001686c  00000000  00000000  00040f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfd8  00000000  00000000  0005778c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c2b7  00000000  00000000  00064764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0a1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005058  00000000  00000000  000f0a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000f5ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000f5b90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000244 	.word	0x20000244
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f530 	.word	0x0800f530

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000248 	.word	0x20000248
 80001dc:	0800f530 	.word	0x0800f530

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <HAL_UARTEx_RxEventCallback>:
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
	uartReady=1;
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <HAL_UARTEx_RxEventCallback+0x20>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000324 	.word	0x20000324

080010ec <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	uartError=1;
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <HAL_UART_ErrorCallback+0x1c>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000325 	.word	0x20000325

0800110c <uartRead>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

///////////////////////////////////

void uartRead(uint8_t* data, const uint16_t size) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
	uartError=0;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <uartRead+0x34>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
	uartReady=0;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <uartRead+0x38>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
	HAL_UART_DMAStop(&huart1); //stop possible previous transfer
 8001124:	4808      	ldr	r0, [pc, #32]	; (8001148 <uartRead+0x3c>)
 8001126:	f004 fe9a 	bl	8005e5e <HAL_UART_DMAStop>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, data, size);
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	461a      	mov	r2, r3
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <uartRead+0x3c>)
 8001132:	f004 ff13 	bl	8005f5c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000325 	.word	0x20000325
 8001144:	20000324 	.word	0x20000324
 8001148:	20000280 	.word	0x20000280

0800114c <uartSend>:

//void uartReadBlocking(uint8_t* data, const uint16_t size,const uint32_t timeout) {
//	HAL_UART_Receive(&huart1, data, size, timeout);
//}

void uartSend(uint8_t* data, const uint16_t size) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, data, size,500); //send atCommand
 8001158:	887a      	ldrh	r2, [r7, #2]
 800115a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <uartSend+0x24>)
 8001162:	f004 fdea 	bl	8005d3a <HAL_UART_Transmit>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000280 	.word	0x20000280

08001174 <uartAvailable>:

bool uartAvailable() {
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	if(uartReady) {
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <uartAvailable+0x24>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <uartAvailable+0x18>
		uartReady=0;
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <uartAvailable+0x24>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
		return 1;
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <uartAvailable+0x1a>
	}
	else {
		return 0;
 800118c:	2300      	movs	r3, #0
	}
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	20000324 	.word	0x20000324

0800119c <uartErrors>:

bool uartErrors() {
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	if(uartError) {
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <uartErrors+0x24>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <uartErrors+0x18>
		uartError=0;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <uartErrors+0x24>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
		return 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <uartErrors+0x1a>
	}
	else {
		return 0;
 80011b4:	2300      	movs	r3, #0
	}
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	20000325 	.word	0x20000325

080011c4 <sendAtCommand>:

bool sendAtCommand(const char* atCommand, const uint32_t timeout, const char* expectedAnswer) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b09e      	sub	sp, #120	; 0x78
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]

    uint32_t startTime = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	677b      	str	r3, [r7, #116]	; 0x74
    char receiveBuffer[MAX_AT_RESPONSE]={0}; // Receive from UART Buffer
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2260      	movs	r2, #96	; 0x60
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f007 fd35 	bl	8008c50 <memset>

    uartSend((uint8_t *)atCommand, strlen(atCommand)); //send atCommand
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f7ff f804 	bl	80001f4 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4619      	mov	r1, r3
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f7ff ffaa 	bl	800114c <uartSend>

    uartRead((uint8_t*)receiveBuffer, MAX_AT_RESPONSE); //start reading
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	2164      	movs	r1, #100	; 0x64
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff84 	bl	800110c <uartRead>

    startTime = HAL_GetTick();
 8001204:	f002 fd76 	bl	8003cf4 <HAL_GetTick>
 8001208:	6778      	str	r0, [r7, #116]	; 0x74

    // this loop waits for the answer
    while( (HAL_GetTick()-startTime) < timeout ){
 800120a:	e011      	b.n	8001230 <sendAtCommand+0x6c>
        if(uartAvailable()){
 800120c:	f7ff ffb2 	bl	8001174 <uartAvailable>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00c      	beq.n	8001230 <sendAtCommand+0x6c>
                // check if the desired answer is in the response of the module
                if (strstr(receiveBuffer, expectedAnswer) != NULL) {
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	f009 fd3e 	bl	800ac9e <strstr>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <sendAtCommand+0x68>
                    return 1;
 8001228:	2301      	movs	r3, #1
 800122a:	e00a      	b.n	8001242 <sendAtCommand+0x7e>
                }
				else {
					return 0;
 800122c:	2300      	movs	r3, #0
 800122e:	e008      	b.n	8001242 <sendAtCommand+0x7e>
    while( (HAL_GetTick()-startTime) < timeout ){
 8001230:	f002 fd60 	bl	8003cf4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8e5      	bhi.n	800120c <sendAtCommand+0x48>
				}
    	}
    }
    return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3778      	adds	r7, #120	; 0x78
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <sendAtCommand2>:

bool sendAtCommand2(const char* atCommand, const uint32_t timeout, const char* expectedAnswer) {
 800124a:	b580      	push	{r7, lr}
 800124c:	b09e      	sub	sp, #120	; 0x78
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]

    uint32_t startTime = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	677b      	str	r3, [r7, #116]	; 0x74
    char receiveBuffer[MAX_AT_RESPONSE]={0}; // Receive from UART Buffer
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2260      	movs	r2, #96	; 0x60
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f007 fcf2 	bl	8008c50 <memset>

    uartSend((uint8_t *)atCommand, strlen(atCommand)); //send atCommand
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7fe ffc1 	bl	80001f4 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29b      	uxth	r3, r3
 8001276:	4619      	mov	r1, r3
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff ff67 	bl	800114c <uartSend>

    uartRead((uint8_t*)receiveBuffer, MAX_AT_RESPONSE); //start reading
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	2164      	movs	r1, #100	; 0x64
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff41 	bl	800110c <uartRead>

    startTime = HAL_GetTick();
 800128a:	f002 fd33 	bl	8003cf4 <HAL_GetTick>
 800128e:	6778      	str	r0, [r7, #116]	; 0x74

    // this loop waits for the answer
    while( (HAL_GetTick()-startTime) < timeout ){
 8001290:	e029      	b.n	80012e6 <sendAtCommand2+0x9c>

    	if(uartErrors()) {
 8001292:	f7ff ff83 	bl	800119c <uartErrors>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d012      	beq.n	80012c2 <sendAtCommand2+0x78>
    		 memset(receiveBuffer,'\0',strlen(receiveBuffer));
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7fe ffa7 	bl	80001f4 <strlen>
 80012a6:	4602      	mov	r2, r0
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 fcce 	bl	8008c50 <memset>
    		 uartRead((uint8_t*)receiveBuffer, MAX_AT_RESPONSE); //start reading
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	2164      	movs	r1, #100	; 0x64
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff26 	bl	800110c <uartRead>
 80012c0:	e011      	b.n	80012e6 <sendAtCommand2+0x9c>
    	}
    	else {
			if(uartAvailable()){
 80012c2:	f7ff ff57 	bl	8001174 <uartAvailable>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00c      	beq.n	80012e6 <sendAtCommand2+0x9c>
					// check if the desired answer is in the response of the module
					if (strstr(receiveBuffer, expectedAnswer) != NULL) {
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f009 fce3 	bl	800ac9e <strstr>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <sendAtCommand2+0x98>
						return 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00a      	b.n	80012f8 <sendAtCommand2+0xae>
					}
					else {
						return 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e008      	b.n	80012f8 <sendAtCommand2+0xae>
    while( (HAL_GetTick()-startTime) < timeout ){
 80012e6:	f002 fd05 	bl	8003cf4 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d8cd      	bhi.n	8001292 <sendAtCommand2+0x48>
					}
			}
    	}
    }
    return 0;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3778      	adds	r7, #120	; 0x78
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <getSerialResponse>:

bool getSerialResponse(const char* atCommand, const uint32_t timeout, const char* expectedAnswer, char* receiveBuffer , const uint16_t size) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]

    uint32_t startTime = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]

    uartSend((uint8_t *)atCommand, strlen(atCommand)); //send atCommand
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7fe ff6e 	bl	80001f4 <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	b29b      	uxth	r3, r3
 800131c:	4619      	mov	r1, r3
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff ff14 	bl	800114c <uartSend>

    uartRead((uint8_t*)receiveBuffer, size); //start reading
 8001324:	8c3b      	ldrh	r3, [r7, #32]
 8001326:	4619      	mov	r1, r3
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f7ff feef 	bl	800110c <uartRead>

    startTime = HAL_GetTick();
 800132e:	f002 fce1 	bl	8003cf4 <HAL_GetTick>
 8001332:	6178      	str	r0, [r7, #20]

    // this loop waits for the answer
    while( (HAL_GetTick()-startTime) < timeout ){
 8001334:	e00f      	b.n	8001356 <getSerialResponse+0x56>
        if(uartAvailable()){
 8001336:	f7ff ff1d 	bl	8001174 <uartAvailable>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00a      	beq.n	8001356 <getSerialResponse+0x56>
                // check if the desired answer is in the response of the module
                if (strstr(receiveBuffer, expectedAnswer) != NULL)
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f009 fcab 	bl	800ac9e <strstr>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <getSerialResponse+0x52>
                {
                    return 1;
 800134e:	2301      	movs	r3, #1
 8001350:	e00a      	b.n	8001368 <getSerialResponse+0x68>
                }
				else {
					return 0;
 8001352:	2300      	movs	r3, #0
 8001354:	e008      	b.n	8001368 <getSerialResponse+0x68>
    while( (HAL_GetTick()-startTime) < timeout ){
 8001356:	f002 fccd 	bl	8003cf4 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	429a      	cmp	r2, r3
 8001364:	d8e7      	bhi.n	8001336 <getSerialResponse+0x36>
				}
    	}
    }
    return 0;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <getSerialResponse2>:

bool getSerialResponse2(const uint32_t timeout, char* receiveBuffer , const uint16_t size) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	4613      	mov	r3, r2
 800137c:	80fb      	strh	r3, [r7, #6]

    uint32_t startTime = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]

    uartRead((uint8_t*)receiveBuffer, size); //start reading
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	4619      	mov	r1, r3
 8001386:	68b8      	ldr	r0, [r7, #8]
 8001388:	f7ff fec0 	bl	800110c <uartRead>

    startTime = HAL_GetTick();
 800138c:	f002 fcb2 	bl	8003cf4 <HAL_GetTick>
 8001390:	6178      	str	r0, [r7, #20]

    // this loop waits for the answer
    while( (HAL_GetTick()-startTime) < timeout ){
 8001392:	e006      	b.n	80013a2 <getSerialResponse2+0x32>
        if(uartAvailable()){
 8001394:	f7ff feee 	bl	8001174 <uartAvailable>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <getSerialResponse2+0x32>
        	return 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	e008      	b.n	80013b4 <getSerialResponse2+0x44>
    while( (HAL_GetTick()-startTime) < timeout ){
 80013a2:	f002 fca7 	bl	8003cf4 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d8f0      	bhi.n	8001394 <getSerialResponse2+0x24>
    	}
    }
    return 0;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <waitConnect>:

///////////////////////////////////

bool waitConnect(const uint8_t maxAttempts) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<maxAttempts;i++) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	e00d      	b.n	80013e8 <waitConnect+0x2c>
		if (sendAtCommand("AT\r",2000,"OK"))
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <waitConnect+0x40>)
 80013ce:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80013d2:	480b      	ldr	r0, [pc, #44]	; (8001400 <waitConnect+0x44>)
 80013d4:	f7ff fef6 	bl	80011c4 <sendAtCommand>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <waitConnect+0x26>
			return 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	e007      	b.n	80013f2 <waitConnect+0x36>
	for(int i=0; i<maxAttempts;i++) {
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbed      	blt.n	80013cc <waitConnect+0x10>
	}
	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	0800f548 	.word	0x0800f548
 8001400:	0800f54c 	.word	0x0800f54c

08001404 <getText>:


bool getText(char* output, const char* input, const uint32_t outputSize, const char* delimiter1, const char* delimiter2) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
    int delimLen = strlen(delimiter1);
 8001412:	6838      	ldr	r0, [r7, #0]
 8001414:	f7fe feee 	bl	80001f4 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	61fb      	str	r3, [r7, #28]
    uint32_t charNum = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
    char* p1, * p2;
    p1 = strstr(input, delimiter1);
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	68b8      	ldr	r0, [r7, #8]
 8001424:	f009 fc3b 	bl	800ac9e <strstr>
 8001428:	6178      	str	r0, [r7, #20]
    if (p1) {
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d04b      	beq.n	80014c8 <getText+0xc4>

        if (strcmp(delimiter2, "") == 0)
 8001430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d120      	bne.n	800147a <getText+0x76>
        {
            charNum = (uintptr_t)(&input[strlen(input)] - p1 - delimLen);
 8001438:	68b8      	ldr	r0, [r7, #8]
 800143a:	f7fe fedb 	bl	80001f4 <strlen>
 800143e:	4602      	mov	r2, r0
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	441a      	add	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	1ad2      	subs	r2, r2, r3
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	61bb      	str	r3, [r7, #24]
            if (charNum <= outputSize - 1) { //data is not longer than outputSize-1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3b01      	subs	r3, #1
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	429a      	cmp	r2, r3
 8001456:	d80e      	bhi.n	8001476 <getText+0x72>
                strncpy(output, p1 + delimLen, charNum);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4413      	add	r3, r2
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4619      	mov	r1, r3
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f009 fc08 	bl	800ac78 <strncpy>
                output[charNum] = '\0';
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4413      	add	r3, r2
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
                return 1;
 8001472:	2301      	movs	r3, #1
 8001474:	e029      	b.n	80014ca <getText+0xc6>
            }
            else {
                return 0;
 8001476:	2300      	movs	r3, #0
 8001478:	e027      	b.n	80014ca <getText+0xc6>
            }
        }

        p2 = strstr(p1 + delimLen, delimiter2);
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4413      	add	r3, r2
 8001480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001482:	4618      	mov	r0, r3
 8001484:	f009 fc0b 	bl	800ac9e <strstr>
 8001488:	6138      	str	r0, [r7, #16]
        if (p2) {
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d01b      	beq.n	80014c8 <getText+0xc4>
            charNum = (uintptr_t)(p2 - p1 - delimLen);
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	1ad2      	subs	r2, r2, r3
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	61bb      	str	r3, [r7, #24]
            if (charNum <= outputSize - 1) { //data is not longer than outputSize-1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d80e      	bhi.n	80014c4 <getText+0xc0>
                strncpy(output, p1 + delimLen, charNum);
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	4413      	add	r3, r2
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4619      	mov	r1, r3
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f009 fbe1 	bl	800ac78 <strncpy>
                output[charNum] = '\0';
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	4413      	add	r3, r2
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
                return 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e002      	b.n	80014ca <getText+0xc6>
            }
            else {
                return 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <getText+0xc6>
            }
        }
    }
    return 0;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <readSmsList>:

bool readSmsList(char * smsList, const uint16_t smsListSize){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
	return getSerialResponse("AT+CMGL=\"REC UNREAD\",1\r",20000,"+CMGL:",smsList,smsListSize);
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <readSmsList+0x28>)
 80014e8:	f644 6120 	movw	r1, #20000	; 0x4e20
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <readSmsList+0x2c>)
 80014ee:	f7ff ff07 	bl	8001300 <getSerialResponse>
 80014f2:	4603      	mov	r3, r0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	0800f550 	.word	0x0800f550
 8001500:	0800f558 	.word	0x0800f558

08001504 <deleteSms>:

bool deleteSms(const char* index) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	char command[16]={0};
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
    snprintf(command, sizeof(command), "AT+CMGD=%s\r", index);
 800151c:	f107 0008 	add.w	r0, r7, #8
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <deleteSms+0x40>)
 8001524:	2110      	movs	r1, #16
 8001526:	f008 fd7d 	bl	800a024 <sniprintf>
	return sendAtCommand(command,5000,"OK");
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	4a06      	ldr	r2, [pc, #24]	; (8001548 <deleteSms+0x44>)
 8001530:	f241 3188 	movw	r1, #5000	; 0x1388
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fe45 	bl	80011c4 <sendAtCommand>
 800153a:	4603      	mov	r3, r0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	0800f570 	.word	0x0800f570
 8001548:	0800f548 	.word	0x0800f548

0800154c <storeSms>:


bool storeSms(const char* address,const char* message) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b0aa      	sub	sp, #168	; 0xa8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
    char command[MAX_SMS_SIZE]={0};
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	229c      	movs	r2, #156	; 0x9c
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f007 fb74 	bl	8008c50 <memset>
    // AT+CMGW=<da><CR>text<ctrl-Z/ESC>
    sprintf(command, "AT+CMGW=\"%s\"\r", address);
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	491b      	ldr	r1, [pc, #108]	; (80015dc <storeSms+0x90>)
 8001570:	4618      	mov	r0, r3
 8001572:	f008 fd8b 	bl	800a08c <siprintf>
    sendAtCommand(command,1000,">"); //init sms
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <storeSms+0x94>)
 800157c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fe1f 	bl	80011c4 <sendAtCommand>
	memset(command,'\0',strlen(command));
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fe32 	bl	80001f4 <strlen>
 8001590:	4602      	mov	r2, r0
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f007 fb59 	bl	8008c50 <memset>
	sprintf(command, "%s%c",message,26); //store sms
 800159e:	f107 0008 	add.w	r0, r7, #8
 80015a2:	231a      	movs	r3, #26
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	490f      	ldr	r1, [pc, #60]	; (80015e4 <storeSms+0x98>)
 80015a8:	f008 fd70 	bl	800a08c <siprintf>
	if ( sendAtCommand(command,5000,"OK") ) {
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <storeSms+0x9c>)
 80015b2:	f241 3188 	movw	r1, #5000	; 0x1388
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fe04 	bl	80011c4 <sendAtCommand>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d004      	beq.n	80015cc <storeSms+0x80>
		HAL_Delay(100);
 80015c2:	2064      	movs	r0, #100	; 0x64
 80015c4:	f002 fba2 	bl	8003d0c <HAL_Delay>
		return 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e003      	b.n	80015d4 <storeSms+0x88>
	}
	else {
		HAL_Delay(100);
 80015cc:	2064      	movs	r0, #100	; 0x64
 80015ce:	f002 fb9d 	bl	8003d0c <HAL_Delay>
		return 0;
 80015d2:	2300      	movs	r3, #0
	}
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	37a8      	adds	r7, #168	; 0xa8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	0800f57c 	.word	0x0800f57c
 80015e0:	0800f58c 	.word	0x0800f58c
 80015e4:	0800f590 	.word	0x0800f590
 80015e8:	0800f548 	.word	0x0800f548

080015ec <readStoredCount1>:

bool readStoredCount1(uint16_t* count) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b09e      	sub	sp, #120	; 0x78
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	6078      	str	r0, [r7, #4]

	char response[100]={0};
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	2260      	movs	r2, #96	; 0x60
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f007 fb25 	bl	8008c50 <memset>
	uint16_t used=0;
 8001606:	2300      	movs	r3, #0
 8001608:	817b      	strh	r3, [r7, #10]

	if (!getSerialResponse("AT+CPMS?\r",20000,"OK",response,sizeof(response)))
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2264      	movs	r2, #100	; 0x64
 8001610:	9200      	str	r2, [sp, #0]
 8001612:	4a11      	ldr	r2, [pc, #68]	; (8001658 <readStoredCount1+0x6c>)
 8001614:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <readStoredCount1+0x70>)
 800161a:	f7ff fe71 	bl	8001300 <getSerialResponse>
 800161e:	4603      	mov	r3, r0
 8001620:	f083 0301 	eor.w	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <readStoredCount1+0x42>
		return 0;
 800162a:	2300      	movs	r3, #0
 800162c:	e010      	b.n	8001650 <readStoredCount1+0x64>

	if (sscanf(response, "\r\n+CPMS: %*[^,],%d,%*d,%*[^,],%*d,%*d,%*[^,],%*d,%*d", &used) == 1) { //EDIT \r\n
 800162e:	f107 020a 	add.w	r2, r7, #10
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	490a      	ldr	r1, [pc, #40]	; (8001660 <readStoredCount1+0x74>)
 8001638:	4618      	mov	r0, r3
 800163a:	f008 fd47 	bl	800a0cc <siscanf>
 800163e:	4603      	mov	r3, r0
 8001640:	2b01      	cmp	r3, #1
 8001642:	d104      	bne.n	800164e <readStoredCount1+0x62>
		*count = used;
 8001644:	897a      	ldrh	r2, [r7, #10]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	801a      	strh	r2, [r3, #0]
		return 1;
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <readStoredCount1+0x64>
	} else
		return 0;
 800164e:	2300      	movs	r3, #0

}
 8001650:	4618      	mov	r0, r3
 8001652:	3770      	adds	r7, #112	; 0x70
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	0800f548 	.word	0x0800f548
 800165c:	0800f598 	.word	0x0800f598
 8001660:	0800f5a4 	.word	0x0800f5a4

08001664 <readStoredCount2>:

bool readStoredCount2(uint16_t* count) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b09e      	sub	sp, #120	; 0x78
 8001668:	af02      	add	r7, sp, #8
 800166a:	6078      	str	r0, [r7, #4]

	char response[100]={0};
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2260      	movs	r2, #96	; 0x60
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f007 fae9 	bl	8008c50 <memset>
	uint16_t used=0;
 800167e:	2300      	movs	r3, #0
 8001680:	817b      	strh	r3, [r7, #10]

	if (!getSerialResponse("AT+CPMS?\r",20000,"OK",response,sizeof(response)))
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	2264      	movs	r2, #100	; 0x64
 8001688:	9200      	str	r2, [sp, #0]
 800168a:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <readStoredCount2+0x6c>)
 800168c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001690:	4810      	ldr	r0, [pc, #64]	; (80016d4 <readStoredCount2+0x70>)
 8001692:	f7ff fe35 	bl	8001300 <getSerialResponse>
 8001696:	4603      	mov	r3, r0
 8001698:	f083 0301 	eor.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <readStoredCount2+0x42>
		return 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e010      	b.n	80016c8 <readStoredCount2+0x64>

	if (sscanf(response, "\r\n+CPMS: %*[^,],%*d,%*d,%*[^,],%d,%*d,%*[^,],%*d,%*d", &used) == 1) { //EDIT \r\n
 80016a6:	f107 020a 	add.w	r2, r7, #10
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	490a      	ldr	r1, [pc, #40]	; (80016d8 <readStoredCount2+0x74>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f008 fd0b 	bl	800a0cc <siscanf>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d104      	bne.n	80016c6 <readStoredCount2+0x62>
		*count = used;
 80016bc:	897a      	ldrh	r2, [r7, #10]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	801a      	strh	r2, [r3, #0]
		return 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <readStoredCount2+0x64>
	} else
		return 0;
 80016c6:	2300      	movs	r3, #0

}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3770      	adds	r7, #112	; 0x70
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	0800f548 	.word	0x0800f548
 80016d4:	0800f598 	.word	0x0800f598
 80016d8:	0800f5dc 	.word	0x0800f5dc

080016dc <sendStoredSms>:

bool sendStoredSms() {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0

	uint16_t count=0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	82bb      	strh	r3, [r7, #20]
	char command[16]={0};
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]

	if (!readStoredCount2(&count))
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ffb2 	bl	8001664 <readStoredCount2>
 8001700:	4603      	mov	r3, r0
 8001702:	f083 0301 	eor.w	r3, r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <sendStoredSms+0x34>
		return 0;
 800170c:	2300      	movs	r3, #0
 800170e:	e03a      	b.n	8001786 <sendStoredSms+0xaa>

    for (uint16_t i = 0; i < count; i++) {
 8001710:	2300      	movs	r3, #0
 8001712:	82fb      	strh	r3, [r7, #22]
 8001714:	e015      	b.n	8001742 <sendStoredSms+0x66>
        snprintf(command, sizeof(command), "AT+CMSS=%d\r", i);
 8001716:	8afb      	ldrh	r3, [r7, #22]
 8001718:	1d38      	adds	r0, r7, #4
 800171a:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <sendStoredSms+0xb4>)
 800171c:	2110      	movs	r1, #16
 800171e:	f008 fc81 	bl	800a024 <sniprintf>
        if (!sendAtCommand2(command,60000,"+CMSS:")) //edit
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <sendStoredSms+0xb8>)
 8001726:	f64e 2160 	movw	r1, #60000	; 0xea60
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd8d 	bl	800124a <sendAtCommand2>
 8001730:	4603      	mov	r3, r0
 8001732:	f083 0301 	eor.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <sendStoredSms+0x70>
    for (uint16_t i = 0; i < count; i++) {
 800173c:	8afb      	ldrh	r3, [r7, #22]
 800173e:	3301      	adds	r3, #1
 8001740:	82fb      	strh	r3, [r7, #22]
 8001742:	8abb      	ldrh	r3, [r7, #20]
 8001744:	8afa      	ldrh	r2, [r7, #22]
 8001746:	429a      	cmp	r2, r3
 8001748:	d3e5      	bcc.n	8001716 <sendStoredSms+0x3a>
 800174a:	e000      	b.n	800174e <sendStoredSms+0x72>
			break;
 800174c:	bf00      	nop

    }

    if (!sendAtCommand("AT+CPMS=\"ME\",\"ME\",\"SM\"\r",5000,"OK")) {
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <sendStoredSms+0xbc>)
 8001750:	f241 3188 	movw	r1, #5000	; 0x1388
 8001754:	4811      	ldr	r0, [pc, #68]	; (800179c <sendStoredSms+0xc0>)
 8001756:	f7ff fd35 	bl	80011c4 <sendAtCommand>
 800175a:	4603      	mov	r3, r0
 800175c:	f083 0301 	eor.w	r3, r3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <sendStoredSms+0x8e>
    	return 0;
 8001766:	2300      	movs	r3, #0
 8001768:	e00d      	b.n	8001786 <sendStoredSms+0xaa>
    }

	snprintf(command, sizeof(command), "AT+CMGD=1,2\r");
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <sendStoredSms+0xc4>)
 800176e:	2110      	movs	r1, #16
 8001770:	4618      	mov	r0, r3
 8001772:	f008 fc57 	bl	800a024 <sniprintf>
    sendAtCommand(command,50000,"OK"); //delete all sent and read messages
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <sendStoredSms+0xbc>)
 800177a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fd20 	bl	80011c4 <sendAtCommand>
	return 1;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	0800f614 	.word	0x0800f614
 8001794:	0800f620 	.word	0x0800f620
 8001798:	0800f548 	.word	0x0800f548
 800179c:	0800f628 	.word	0x0800f628
 80017a0:	0800f640 	.word	0x0800f640

080017a4 <writeFile>:

bool writeFile(const char* settings) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b096      	sub	sp, #88	; 0x58
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

	bool success=0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	//AT+CFSWFILE=<index>,<filename>,<mode>,<file size>,<inputtime>
	//AT+CFSWFILE=0,"settings.txt",0,strlen(settings),9999
	char command[60]={0};
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	2238      	movs	r2, #56	; 0x38
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f007 fa46 	bl	8008c50 <memset>
	snprintf(command, sizeof(command), "AT+CFSWFILE=0,\"settings.txt\",0,%d,10000\r\n", strlen(settings));
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7fe fd15 	bl	80001f4 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f107 0018 	add.w	r0, r7, #24
 80017d0:	4a24      	ldr	r2, [pc, #144]	; (8001864 <writeFile+0xc0>)
 80017d2:	213c      	movs	r1, #60	; 0x3c
 80017d4:	f008 fc26 	bl	800a024 <sniprintf>

	if(!sendAtCommand("AT+CFSINIT\r",2000,"OK")) //Init
 80017d8:	4a23      	ldr	r2, [pc, #140]	; (8001868 <writeFile+0xc4>)
 80017da:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80017de:	4823      	ldr	r0, [pc, #140]	; (800186c <writeFile+0xc8>)
 80017e0:	f7ff fcf0 	bl	80011c4 <sendAtCommand>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f083 0301 	eor.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <writeFile+0x50>
		return 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	e033      	b.n	800185c <writeFile+0xb8>
	uartSend((uint8_t *)command, strlen(command)); //send atCommand
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fcfb 	bl	80001f4 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fc9f 	bl	800114c <uartSend>

	char confirm[14];
	  if (!getSerialResponse2(5000, confirm , sizeof(confirm))) {
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	220e      	movs	r2, #14
 8001814:	4619      	mov	r1, r3
 8001816:	f241 3088 	movw	r0, #5000	; 0x1388
 800181a:	f7ff fda9 	bl	8001370 <getSerialResponse2>
 800181e:	4603      	mov	r3, r0
 8001820:	f083 0301 	eor.w	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <writeFile+0x96>
	  	sendAtCommand("AT+CFSTERM\r",2000,"OK"); //Free
 800182a:	4a0f      	ldr	r2, [pc, #60]	; (8001868 <writeFile+0xc4>)
 800182c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001830:	480f      	ldr	r0, [pc, #60]	; (8001870 <writeFile+0xcc>)
 8001832:	f7ff fcc7 	bl	80011c4 <sendAtCommand>
	    return 0;
 8001836:	2300      	movs	r3, #0
 8001838:	e010      	b.n	800185c <writeFile+0xb8>
	  }

	//uartSend((uint8_t *)settings, strlen(settings)); //send atCommand
	success=sendAtCommand(settings,2000,"OK");
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <writeFile+0xc4>)
 800183c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fcbf 	bl	80011c4 <sendAtCommand>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	//HAL_Delay(100);
	sendAtCommand("AT+CFSTERM\r",2000,"OK"); //Free
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <writeFile+0xc4>)
 800184e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <writeFile+0xcc>)
 8001854:	f7ff fcb6 	bl	80011c4 <sendAtCommand>
	return success;
 8001858:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800185c:	4618      	mov	r0, r3
 800185e:	3758      	adds	r7, #88	; 0x58
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	0800f650 	.word	0x0800f650
 8001868:	0800f548 	.word	0x0800f548
 800186c:	0800f67c 	.word	0x0800f67c
 8001870:	0800f688 	.word	0x0800f688

08001874 <readFileSize>:

bool readFileSize(uint16_t* fileSize) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b08e      	sub	sp, #56	; 0x38
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]

	char response[30]={0};
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	831a      	strh	r2, [r3, #24]
	uint16_t fileSizeCopy=0;
 8001894:	2300      	movs	r3, #0
 8001896:	81fb      	strh	r3, [r7, #14]

	if(!sendAtCommand("AT+CFSINIT\r",2000,"OK")) //Init1
 8001898:	4a23      	ldr	r2, [pc, #140]	; (8001928 <readFileSize+0xb4>)
 800189a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800189e:	4823      	ldr	r0, [pc, #140]	; (800192c <readFileSize+0xb8>)
 80018a0:	f7ff fc90 	bl	80011c4 <sendAtCommand>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f083 0301 	eor.w	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <readFileSize+0x40>
		return 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e034      	b.n	800191e <readFileSize+0xaa>

	//AT+CFSGFIS=<index>,<filename>
	//AT+CFSGFIS=0,"settings.txt"
	if (!getSerialResponse("AT+CFSGFIS=0,\"settings.txt\"\r",2000,"+CFSGFIS:",response,sizeof(response))) {
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	221e      	movs	r2, #30
 80018ba:	9200      	str	r2, [sp, #0]
 80018bc:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <readFileSize+0xbc>)
 80018be:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80018c2:	481c      	ldr	r0, [pc, #112]	; (8001934 <readFileSize+0xc0>)
 80018c4:	f7ff fd1c 	bl	8001300 <getSerialResponse>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f083 0301 	eor.w	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <readFileSize+0x70>
		sendAtCommand("AT+CFSTERM\r",2000,"OK"); //Free
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <readFileSize+0xb4>)
 80018d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80018da:	4817      	ldr	r0, [pc, #92]	; (8001938 <readFileSize+0xc4>)
 80018dc:	f7ff fc72 	bl	80011c4 <sendAtCommand>
		return 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e01c      	b.n	800191e <readFileSize+0xaa>
	}

	if (sscanf(response, "\r\n+CFSGFIS: %d", &fileSizeCopy) == 1) { // EDIT \r\n
 80018e4:	f107 020e 	add.w	r2, r7, #14
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	4913      	ldr	r1, [pc, #76]	; (800193c <readFileSize+0xc8>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f008 fbec 	bl	800a0cc <siscanf>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d10a      	bne.n	8001910 <readFileSize+0x9c>
		*fileSize=fileSizeCopy;
 80018fa:	89fa      	ldrh	r2, [r7, #14]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	801a      	strh	r2, [r3, #0]
		sendAtCommand("AT+CFSTERM\r",2000,"OK"); //Free
 8001900:	4a09      	ldr	r2, [pc, #36]	; (8001928 <readFileSize+0xb4>)
 8001902:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001906:	480c      	ldr	r0, [pc, #48]	; (8001938 <readFileSize+0xc4>)
 8001908:	f7ff fc5c 	bl	80011c4 <sendAtCommand>
		return 1;
 800190c:	2301      	movs	r3, #1
 800190e:	e006      	b.n	800191e <readFileSize+0xaa>
	} else {
		sendAtCommand("AT+CFSTERM\r",2000,"OK"); //Free
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <readFileSize+0xb4>)
 8001912:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001916:	4808      	ldr	r0, [pc, #32]	; (8001938 <readFileSize+0xc4>)
 8001918:	f7ff fc54 	bl	80011c4 <sendAtCommand>
		return 0;
 800191c:	2300      	movs	r3, #0
	}

}
 800191e:	4618      	mov	r0, r3
 8001920:	3730      	adds	r7, #48	; 0x30
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	0800f548 	.word	0x0800f548
 800192c:	0800f67c 	.word	0x0800f67c
 8001930:	0800f694 	.word	0x0800f694
 8001934:	0800f6a0 	.word	0x0800f6a0
 8001938:	0800f688 	.word	0x0800f688
 800193c:	0800f6c0 	.word	0x0800f6c0

08001940 <readFile>:

bool readFile(char* settings) {
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8001946:	af00      	add	r7, sp, #0
 8001948:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800194c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001950:	6018      	str	r0, [r3, #0]

	char command[60]={0};
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8001958:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800195c:	2238      	movs	r2, #56	; 0x38
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f007 f975 	bl	8008c50 <memset>
	uint16_t fileSize=0;
 8001966:	2300      	movs	r3, #0
 8001968:	f8a7 324a 	strh.w	r3, [r7, #586]	; 0x24a
	char response[MAX_FILE_LEN]={0};
 800196c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001970:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	3304      	adds	r3, #4
 800197a:	f240 2217 	movw	r2, #535	; 0x217
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f007 f965 	bl	8008c50 <memset>

	if(!readFileSize(&fileSize)) {
 8001986:	f207 234a 	addw	r3, r7, #586	; 0x24a
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff72 	bl	8001874 <readFileSize>
 8001990:	4603      	mov	r3, r0
 8001992:	f083 0301 	eor.w	r3, r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d028      	beq.n	80019ee <readFile+0xae>
		char initialSettings[21]="52,19,1672527600,120";
 800199c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80019a0:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80019a4:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <readFile+0x198>)
 80019a6:	461c      	mov	r4, r3
 80019a8:	4615      	mov	r5, r2
 80019aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019b2:	6020      	str	r0, [r4, #0]
 80019b4:	3404      	adds	r4, #4
 80019b6:	7021      	strb	r1, [r4, #0]
		if (writeFile(initialSettings)) { //if no file write file
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fef1 	bl	80017a4 <writeFile>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <readFile+0xaa>
			strncpy(settings,initialSettings,strlen(initialSettings));
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fc11 	bl	80001f4 <strlen>
 80019d2:	4602      	mov	r2, r0
 80019d4:	f107 010c 	add.w	r1, r7, #12
 80019d8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80019dc:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	f009 f949 	bl	800ac78 <strncpy>
			return 1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e070      	b.n	8001acc <readFile+0x18c>
		}
		else
			return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e06e      	b.n	8001acc <readFile+0x18c>
	}

	//AT+CFSRFILE=<index>,<filename>,<mode>,<file size>,<position>
	//AT+CFSRFILE=0,"settings.txt",0,fileSize,0
	snprintf(command, sizeof(command), "AT+CFSRFILE=0,\"settings.txt\",0,%d,0\r", fileSize);
 80019ee:	f8b7 324a 	ldrh.w	r3, [r7, #586]	; 0x24a
 80019f2:	f507 7013 	add.w	r0, r7, #588	; 0x24c
 80019f6:	4a39      	ldr	r2, [pc, #228]	; (8001adc <readFile+0x19c>)
 80019f8:	213c      	movs	r1, #60	; 0x3c
 80019fa:	f008 fb13 	bl	800a024 <sniprintf>

	if(!sendAtCommand("AT+CFSINIT\r",2000,"OK")) //Init
 80019fe:	4a38      	ldr	r2, [pc, #224]	; (8001ae0 <readFile+0x1a0>)
 8001a00:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a04:	4837      	ldr	r0, [pc, #220]	; (8001ae4 <readFile+0x1a4>)
 8001a06:	f7ff fbdd 	bl	80011c4 <sendAtCommand>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f083 0301 	eor.w	r3, r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <readFile+0xda>
		return 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e058      	b.n	8001acc <readFile+0x18c>

	  if (!sendAtCommand(command,10000,"+CFSRFILE:")) {
 8001a1a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001a1e:	4a32      	ldr	r2, [pc, #200]	; (8001ae8 <readFile+0x1a8>)
 8001a20:	f242 7110 	movw	r1, #10000	; 0x2710
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fbcd 	bl	80011c4 <sendAtCommand>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f083 0301 	eor.w	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <readFile+0x106>
	  	sendAtCommand("AT+CFSTERM\r",2000,"OK"); //Free
 8001a36:	4a2a      	ldr	r2, [pc, #168]	; (8001ae0 <readFile+0x1a0>)
 8001a38:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a3c:	482b      	ldr	r0, [pc, #172]	; (8001aec <readFile+0x1ac>)
 8001a3e:	f7ff fbc1 	bl	80011c4 <sendAtCommand>
	  	return 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e042      	b.n	8001acc <readFile+0x18c>
	  }

	  if (!getSerialResponse2(10000, response , sizeof(response))) {
 8001a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4a:	f240 221b 	movw	r2, #539	; 0x21b
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f242 7010 	movw	r0, #10000	; 0x2710
 8001a54:	f7ff fc8c 	bl	8001370 <getSerialResponse2>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f083 0301 	eor.w	r3, r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <readFile+0x134>
	  	sendAtCommand("AT+CFSTERM\r",2000,"OK"); //Free
 8001a64:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <readFile+0x1a0>)
 8001a66:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a6a:	4820      	ldr	r0, [pc, #128]	; (8001aec <readFile+0x1ac>)
 8001a6c:	f7ff fbaa 	bl	80011c4 <sendAtCommand>
	    return 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e02b      	b.n	8001acc <readFile+0x18c>
	  }
	  char confirm[8];
	  if (!getSerialResponse2(5000, confirm , sizeof(confirm))) {
 8001a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a78:	2208      	movs	r2, #8
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a80:	f7ff fc76 	bl	8001370 <getSerialResponse2>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f083 0301 	eor.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <readFile+0x160>
	  	sendAtCommand("AT+CFSTERM\r",2000,"OK"); //Free
 8001a90:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <readFile+0x1a0>)
 8001a92:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a96:	4815      	ldr	r0, [pc, #84]	; (8001aec <readFile+0x1ac>)
 8001a98:	f7ff fb94 	bl	80011c4 <sendAtCommand>
	    return 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e015      	b.n	8001acc <readFile+0x18c>
	  }

	strncpy(settings,response,strlen(response));
 8001aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fba5 	bl	80001f4 <strlen>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001ab0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001ab4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	f009 f8dd 	bl	800ac78 <strncpy>
	sendAtCommand("AT+CFSTERM\r",2000,"OK"); //Free
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <readFile+0x1a0>)
 8001ac0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <readFile+0x1ac>)
 8001ac6:	f7ff fb7d 	bl	80011c4 <sendAtCommand>
	return 1;
 8001aca:	2301      	movs	r3, #1

}
 8001acc:	4618      	mov	r0, r3
 8001ace:	f507 7722 	add.w	r7, r7, #648	; 0x288
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	0800f704 	.word	0x0800f704
 8001adc:	0800f6d0 	.word	0x0800f6d0
 8001ae0:	0800f548 	.word	0x0800f548
 8001ae4:	0800f67c 	.word	0x0800f67c
 8001ae8:	0800f6f8 	.word	0x0800f6f8
 8001aec:	0800f688 	.word	0x0800f688

08001af0 <setIccid>:

//setup commands//

bool setIccid(char* iccid) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b098      	sub	sp, #96	; 0x60
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	6078      	str	r0, [r7, #4]

	char response[50]={0};
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
 8001afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b00:	222e      	movs	r2, #46	; 0x2e
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f007 f8a3 	bl	8008c50 <memset>
	char iccidCopy[MAX_ICCID_LEN+1]={0};
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	f8c3 200f 	str.w	r2, [r3, #15]

	if (getSerialResponse("AT+CCID\r",2000,"ERROR",response,sizeof(response)))
 8001b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b24:	2232      	movs	r2, #50	; 0x32
 8001b26:	9200      	str	r2, [sp, #0]
 8001b28:	4a1a      	ldr	r2, [pc, #104]	; (8001b94 <setIccid+0xa4>)
 8001b2a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b2e:	481a      	ldr	r0, [pc, #104]	; (8001b98 <setIccid+0xa8>)
 8001b30:	f7ff fbe6 	bl	8001300 <getSerialResponse>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <setIccid+0x4e>
		return 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e025      	b.n	8001b8a <setIccid+0x9a>

	if (sscanf(response, "\r\n%s", iccidCopy) == 1) { //EDIT %s
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b46:	4915      	ldr	r1, [pc, #84]	; (8001b9c <setIccid+0xac>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f008 fabf 	bl	800a0cc <siscanf>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d119      	bne.n	8001b88 <setIccid+0x98>
		iccidCopy[strlen(iccidCopy)-1] = '\0'; //cut last char
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fb4b 	bl	80001f4 <strlen>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	3b01      	subs	r3, #1
 8001b62:	3358      	adds	r3, #88	; 0x58
 8001b64:	443b      	add	r3, r7
 8001b66:	2200      	movs	r2, #0
 8001b68:	f803 2c4c 	strb.w	r2, [r3, #-76]
		strncpy(iccid,iccidCopy,strlen(iccidCopy));
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fb3f 	bl	80001f4 <strlen>
 8001b76:	4602      	mov	r2, r0
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f009 f87a 	bl	800ac78 <strncpy>
		return 1;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <setIccid+0x9a>
	}
	else
		return 0;
 8001b88:	2300      	movs	r3, #0

}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3758      	adds	r7, #88	; 0x58
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	0800f71c 	.word	0x0800f71c
 8001b98:	0800f724 	.word	0x0800f724
 8001b9c:	0800f730 	.word	0x0800f730

08001ba0 <copyDevice>:

///////////////////////////////////

struct Device* copyDevice(const struct Device* device) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

    struct Device* newDevice = malloc(sizeof(struct Device)); // Allocate memory for the new device struct
 8001ba8:	f44f 70cc 	mov.w	r0, #408	; 0x198
 8001bac:	f007 f832 	bl	8008c14 <malloc>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60bb      	str	r3, [r7, #8]
    if (newDevice == NULL) {
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <copyDevice+0x1e>
        return NULL; // Return NULL if memory allocation fails
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e04d      	b.n	8001c5a <copyDevice+0xba>
    }
    memcpy(newDevice, device, sizeof(struct Device)); // Copy the device struct members to the new memory location
 8001bbe:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	68b8      	ldr	r0, [r7, #8]
 8001bc6:	f007 f835 	bl	8008c34 <memcpy>
    newDevice->count = device->count; // Copy the subscribers array to the new memory location
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    for (int i = 0; i < device->count; i++) {
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	e02d      	b.n	8001c38 <copyDevice+0x98>
        strcpy(newDevice->subscribers[i].address, device->subscribers[i].address);
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	3310      	adds	r3, #16
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	4413      	add	r3, r2
 8001bec:	1d18      	adds	r0, r3, #4
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	3310      	adds	r3, #16
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3304      	adds	r3, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	f008 fae3 	bl	800a1cc <strcpy>
        memcpy(newDevice->subscribers[i].circle, device->subscribers[i].circle, sizeof(float) * 3);
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	3328      	adds	r3, #40	; 0x28
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	4413      	add	r3, r2
 8001c16:	1d18      	adds	r0, r3, #4
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	3328      	adds	r3, #40	; 0x28
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f007 f801 	bl	8008c34 <memcpy>
    for (int i = 0; i < device->count; i++) {
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3301      	adds	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbcb      	blt.n	8001bdc <copyDevice+0x3c>
    }
    strcpy(newDevice->iccid, device->iccid);     // Copy the iccid string to the new memory location
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f503 72c0 	add.w	r2, r3, #384	; 0x180
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f008 faba 	bl	800a1cc <strcpy>

    return newDevice;
 8001c58:	68bb      	ldr	r3, [r7, #8]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <structToString>:

void structToString(char* str, const struct Device* device) {
 8001c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c68:	b097      	sub	sp, #92	; 0x5c
 8001c6a:	af06      	add	r7, sp, #24
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
    for (int i = 0; i < device->count; i++) {
 8001c70:	2300      	movs	r3, #0
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c74:	e052      	b.n	8001d1c <structToString+0xb8>
        sprintf(str, "%s,%d,%.6f,%.6f,%.0f\r\n", device->subscribers[i].address, device->subscribers[i].state,
 8001c76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3310      	adds	r3, #16
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	4413      	add	r3, r2
 8001c86:	1d1e      	adds	r6, r3, #4
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	3328      	adds	r3, #40	; 0x28
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	607b      	str	r3, [r7, #4]
            device->subscribers[i].circle[0], device->subscribers[i].circle[1], device->subscribers[i].circle[2]);
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	332c      	adds	r3, #44	; 0x2c
 8001cac:	681b      	ldr	r3, [r3, #0]
        sprintf(str, "%s,%d,%.6f,%.6f,%.0f\r\n", device->subscribers[i].address, device->subscribers[i].state,
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fc62 	bl	8000578 <__aeabi_f2d>
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	460d      	mov	r5, r1
            device->subscribers[i].circle[0], device->subscribers[i].circle[1], device->subscribers[i].circle[2]);
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3330      	adds	r3, #48	; 0x30
 8001cc8:	681b      	ldr	r3, [r3, #0]
        sprintf(str, "%s,%d,%.6f,%.6f,%.0f\r\n", device->subscribers[i].address, device->subscribers[i].state,
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc54 	bl	8000578 <__aeabi_f2d>
 8001cd0:	4680      	mov	r8, r0
 8001cd2:	4689      	mov	r9, r1
            device->subscribers[i].circle[0], device->subscribers[i].circle[1], device->subscribers[i].circle[2]);
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3334      	adds	r3, #52	; 0x34
 8001ce4:	681b      	ldr	r3, [r3, #0]
        sprintf(str, "%s,%d,%.6f,%.6f,%.0f\r\n", device->subscribers[i].address, device->subscribers[i].state,
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc46 	bl	8000578 <__aeabi_f2d>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cf4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001cf8:	e9cd 4500 	strd	r4, r5, [sp]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4632      	mov	r2, r6
 8001d00:	4923      	ldr	r1, [pc, #140]	; (8001d90 <structToString+0x12c>)
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f008 f9c2 	bl	800a08c <siprintf>
        str += strlen(str);
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7fe fa73 	bl	80001f4 <strlen>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < device->count; i++) {
 8001d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d18:	3301      	adds	r3, #1
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8001d22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dba6      	blt.n	8001c76 <structToString+0x12>
    }
    char deviceData[40] = { 0 };
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	2224      	movs	r2, #36	; 0x24
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f006 ff8b 	bl	8008c50 <memset>
    sprintf(deviceData, "%.6f,%.6f,%d,%d", device->position[0], device->position[1], (int)(device->unixTime), device->interval);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fc1a 	bl	8000578 <__aeabi_f2d>
 8001d44:	4604      	mov	r4, r0
 8001d46:	460d      	mov	r5, r1
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fc13 	bl	8000578 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001d5c:	4606      	mov	r6, r0
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	6909      	ldr	r1, [r1, #16]
 8001d62:	f107 0014 	add.w	r0, r7, #20
 8001d66:	9103      	str	r1, [sp, #12]
 8001d68:	9602      	str	r6, [sp, #8]
 8001d6a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d6e:	4622      	mov	r2, r4
 8001d70:	462b      	mov	r3, r5
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <structToString+0x130>)
 8001d74:	f008 f98a 	bl	800a08c <siprintf>
    strcat(str, deviceData);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f008 fa15 	bl	800a1ae <strcat>

}
 8001d84:	bf00      	nop
 8001d86:	3744      	adds	r7, #68	; 0x44
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d8e:	bf00      	nop
 8001d90:	0800f738 	.word	0x0800f738
 8001d94:	0800f750 	.word	0x0800f750

08001d98 <stringToStruct>:

void stringToStruct(const char* str, struct Device* device) {
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af04      	add	r7, sp, #16
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    char* endLine = strstr(str, "\r\n");
 8001da2:	4936      	ldr	r1, [pc, #216]	; (8001e7c <stringToStruct+0xe4>)
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f008 ff7a 	bl	800ac9e <strstr>
 8001daa:	6178      	str	r0, [r7, #20]
    int i = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
    int readCount = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]

    while (i < MAX_PHONES && endLine) {
 8001db4:	e044      	b.n	8001e40 <stringToStruct+0xa8>
        sscanf(str, "%[^,],%d,%f,%f,%f\r\n", device->subscribers[i].address, &(device->subscribers[i].state),
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	3310      	adds	r3, #16
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	1d1c      	adds	r4, r3, #4
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	3320      	adds	r3, #32
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f103 0508 	add.w	r5, r3, #8
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	3328      	adds	r3, #40	; 0x28
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	1d19      	adds	r1, r3, #4
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	332c      	adds	r3, #44	; 0x2c
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	1d18      	adds	r0, r3, #4
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	3330      	adds	r3, #48	; 0x30
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	3304      	adds	r3, #4
 8001e12:	9302      	str	r3, [sp, #8]
 8001e14:	9001      	str	r0, [sp, #4]
 8001e16:	9100      	str	r1, [sp, #0]
 8001e18:	462b      	mov	r3, r5
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	4918      	ldr	r1, [pc, #96]	; (8001e80 <stringToStruct+0xe8>)
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f008 f954 	bl	800a0cc <siscanf>
            &(device->subscribers[i].circle[0]), &(device->subscribers[i].circle[1]), &(device->subscribers[i].circle[2]));
        readCount++;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
        i++;
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
        str = endLine + 2;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3302      	adds	r3, #2
 8001e34:	607b      	str	r3, [r7, #4]
        endLine = strstr(str, "\r\n");
 8001e36:	4911      	ldr	r1, [pc, #68]	; (8001e7c <stringToStruct+0xe4>)
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f008 ff30 	bl	800ac9e <strstr>
 8001e3e:	6178      	str	r0, [r7, #20]
    while (i < MAX_PHONES && endLine) {
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b09      	cmp	r3, #9
 8001e44:	dc02      	bgt.n	8001e4c <stringToStruct+0xb4>
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1b4      	bne.n	8001db6 <stringToStruct+0x1e>
    }
    (device->count) = readCount;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

    sscanf(str, "%f,%f,%d,%d", &(device->position[0]), &(device->position[1]), (int*)&(device->unixTime), &(device->interval) );
 8001e54:	6839      	ldr	r1, [r7, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	1d18      	adds	r0, r3, #4
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	3308      	adds	r3, #8
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	3210      	adds	r2, #16
 8001e62:	9201      	str	r2, [sp, #4]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	4603      	mov	r3, r0
 8001e68:	460a      	mov	r2, r1
 8001e6a:	4906      	ldr	r1, [pc, #24]	; (8001e84 <stringToStruct+0xec>)
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f008 f92d 	bl	800a0cc <siscanf>

}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	0800f760 	.word	0x0800f760
 8001e80:	0800f764 	.word	0x0800f764
 8001e84:	0800f778 	.word	0x0800f778

08001e88 <handleReadFile>:
bool handleReadFile(struct Device* device) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001e94:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001e98:	6018      	str	r0, [r3, #0]

    //char settings[MAX_FILE_LEN + 1] = "+852348467,0,-50.446896,-18.838770,6371000\r\n+48346765889,0,-50.446896,-18.838770,6371000\r\n+9946765889,0,-50.446896,-18.838770,6371000\r\n21,37,1234567890,144";
    //char settings[MAX_FILE_LEN + 1] = "21,37,1234567890,144";
    char settings[MAX_FILE_LEN + 1] = { 0 };
 8001e9a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001e9e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f006 fece 	bl	8008c50 <memset>

    if (!readFile(settings))
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fd41 	bl	8001940 <readFile>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f083 0301 	eor.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <handleReadFile+0x46>
        return 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e00a      	b.n	8001ee4 <handleReadFile+0x5c>

    stringToStruct(settings, device);
 8001ece:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001ed2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001ed6:	f107 020c 	add.w	r2, r7, #12
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	4610      	mov	r0, r2
 8001ede:	f7ff ff5b 	bl	8001d98 <stringToStruct>
    return 1;
 8001ee2:	2301      	movs	r3, #1

}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <handleWriteFile>:

//EditFile pracuje na kopii struktury aby zachować poprzednie dane w przypadku wystąpienia problemu z zapisem do pliku
bool handleWriteFile(const struct Device* device) {
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001efa:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001efe:	6018      	str	r0, [r3, #0]

    char settings[MAX_FILE_LEN + 1] = { 0 };
 8001f00:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001f04:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f006 fe9b 	bl	8008c50 <memset>
    structToString(settings, device);
 8001f1a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001f1e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001f22:	f107 020c 	add.w	r2, r7, #12
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f7ff fe9b 	bl	8001c64 <structToString>
    //printf("structToString:%s", settings);

    return writeFile(settings);
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fc36 	bl	80017a4 <writeFile>
 8001f38:	4603      	mov	r3, r0

}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <findSubscriber>:

bool findSubscriber(int * index, const struct Subscriber* subscribersArr, const int* count, const char* address) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
    int i = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
    for (i = 0; i < *count; i++) {
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e016      	b.n	8001f8a <findSubscriber+0x46>
        if (strcmp(subscribersArr[i].address, address) == 0) {
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	461a      	mov	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe f936 	bl	80001e0 <strcmp>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d104      	bne.n	8001f84 <findSubscriber+0x40>
            *index = i;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	601a      	str	r2, [r3, #0]
            return 1;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e00c      	b.n	8001f9e <findSubscriber+0x5a>
    for (i = 0; i < *count; i++) {
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbe3      	blt.n	8001f5c <findSubscriber+0x18>
        }
    }
    *index = i-1;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	1e5a      	subs	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	601a      	str	r2, [r3, #0]
    return 0;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <subscribe>:

bool subscribe(struct Device * device, struct Subscriber* newSubscriber) {
 8001fa6:	b5b0      	push	{r4, r5, r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]

    int i = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
    bool exist = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	75fb      	strb	r3, [r7, #23]
    struct Device* deviceCopy = copyDevice(device); //deepCopy as temporary device struct
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fdf1 	bl	8001ba0 <copyDevice>
 8001fbe:	6138      	str	r0, [r7, #16]

    exist = findSubscriber(&i, deviceCopy->subscribers, &(deviceCopy->count), newSubscriber->address);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f103 0114 	add.w	r1, r3, #20
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f503 72be 	add.w	r2, r3, #380	; 0x17c
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f107 000c 	add.w	r0, r7, #12
 8001fd2:	f7ff ffb7 	bl	8001f44 <findSubscriber>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	75fb      	strb	r3, [r7, #23]
    if (exist) {
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d011      	beq.n	8002004 <subscribe+0x5e>
        deviceCopy->subscribers[i] = *newSubscriber; //edit existing subscriber
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	6939      	ldr	r1, [r7, #16]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	3310      	adds	r3, #16
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	1d1c      	adds	r4, r3, #4
 8001ff4:	4615      	mov	r5, r2
 8001ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ffe:	682b      	ldr	r3, [r5, #0]
 8002000:	6023      	str	r3, [r4, #0]
 8002002:	e021      	b.n	8002048 <subscribe+0xa2>
    }
    else if (i < MAX_PHONES-1) {
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b08      	cmp	r3, #8
 8002008:	dc19      	bgt.n	800203e <subscribe+0x98>
        deviceCopy->subscribers[i+1] = *newSubscriber; //add new subscriber
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	6939      	ldr	r1, [r7, #16]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3310      	adds	r3, #16
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	1d1c      	adds	r4, r3, #4
 8002020:	4615      	mov	r5, r2
 8002022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800202a:	682b      	ldr	r3, [r5, #0]
 800202c:	6023      	str	r3, [r4, #0]
        (deviceCopy->count)++; //add 1 to count
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 800203c:	e004      	b.n	8002048 <subscribe+0xa2>
    }
    else {
       free(deviceCopy);
 800203e:	6938      	ldr	r0, [r7, #16]
 8002040:	f006 fdf0 	bl	8008c24 <free>
       return 0;
 8002044:	2300      	movs	r3, #0
 8002046:	e014      	b.n	8002072 <subscribe+0xcc>
    }

    if (handleWriteFile(deviceCopy)) {
 8002048:	6938      	ldr	r0, [r7, #16]
 800204a:	f7ff ff50 	bl	8001eee <handleWriteFile>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <subscribe+0xc4>
        memcpy(device, deviceCopy, sizeof(struct Device));
 8002054:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f006 fdea 	bl	8008c34 <memcpy>
        free(deviceCopy);
 8002060:	6938      	ldr	r0, [r7, #16]
 8002062:	f006 fddf 	bl	8008c24 <free>
        return 1;
 8002066:	2301      	movs	r3, #1
 8002068:	e003      	b.n	8002072 <subscribe+0xcc>
    }
    else {
        free(deviceCopy);
 800206a:	6938      	ldr	r0, [r7, #16]
 800206c:	f006 fdda 	bl	8008c24 <free>
        return 0;
 8002070:	2300      	movs	r3, #0
    }

}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bdb0      	pop	{r4, r5, r7, pc}

0800207a <unsubscribe>:

bool unsubscribe(struct Device* device, const char* address) {
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
    int i = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
    int j = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
    bool exist = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	74fb      	strb	r3, [r7, #19]
    struct Device* deviceCopy = copyDevice(device); //deepCopy as temporary device struct
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fd85 	bl	8001ba0 <copyDevice>
 8002096:	60f8      	str	r0, [r7, #12]

    exist = findSubscriber(&i, deviceCopy->subscribers, &(deviceCopy->count), address);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f103 0114 	add.w	r1, r3, #20
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f503 72be 	add.w	r2, r3, #380	; 0x17c
 80020a4:	f107 0008 	add.w	r0, r7, #8
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f7ff ff4b 	bl	8001f44 <findSubscriber>
 80020ae:	4603      	mov	r3, r0
 80020b0:	74fb      	strb	r3, [r7, #19]

    if (exist) {
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d031      	beq.n	800211c <unsubscribe+0xa2>
        for (j = i; j < deviceCopy->count - 1; j++) {
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e019      	b.n	80020f2 <unsubscribe+0x78>
            memcpy(&(deviceCopy->subscribers[j]), &(deviceCopy->subscribers[j+1]), sizeof(struct Subscriber)); // Shift all elements after index i by 1 pos
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3310      	adds	r3, #16
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	1d18      	adds	r0, r3, #4
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	3310      	adds	r3, #16
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	3304      	adds	r3, #4
 80020e4:	2224      	movs	r2, #36	; 0x24
 80020e6:	4619      	mov	r1, r3
 80020e8:	f006 fda4 	bl	8008c34 <memcpy>
        for (j = i; j < deviceCopy->count - 1; j++) {
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80020f8:	3b01      	subs	r3, #1
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbde      	blt.n	80020be <unsubscribe+0x44>
        }
        (deviceCopy->count)--; // Decrement the count
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    else {
        free(deviceCopy);
        return 0;
    }

    if (handleWriteFile(deviceCopy)) {
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff feed 	bl	8001eee <handleWriteFile>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d010      	beq.n	800213c <unsubscribe+0xc2>
 800211a:	e004      	b.n	8002126 <unsubscribe+0xac>
        free(deviceCopy);
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f006 fd81 	bl	8008c24 <free>
        return 0;
 8002122:	2300      	movs	r3, #0
 8002124:	e00e      	b.n	8002144 <unsubscribe+0xca>
        memcpy(device, deviceCopy, sizeof(struct Device));
 8002126:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800212a:	68f9      	ldr	r1, [r7, #12]
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f006 fd81 	bl	8008c34 <memcpy>
        free(deviceCopy);
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f006 fd76 	bl	8008c24 <free>
        return 1;
 8002138:	2301      	movs	r3, #1
 800213a:	e003      	b.n	8002144 <unsubscribe+0xca>
    }
    else {
        free(deviceCopy);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f006 fd71 	bl	8008c24 <free>
        return 0;
 8002142:	2300      	movs	r3, #0
    }

}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <fillUnixTime>:

void fillUnixTime(time_t* unixTime, const char* str) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b096      	sub	sp, #88	; 0x58
 8002150:	af04      	add	r7, sp, #16
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
    struct tm tm_time = { 0 };
 8002156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215a:	2224      	movs	r2, #36	; 0x24
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f006 fd76 	bl	8008c50 <memset>
    int year, month, day, hour, minute, second;

    sscanf(str, "%4d%2d%2d%2d%2d%2d", &year, &month, &day, &hour, &minute, &second);
 8002164:	f107 011c 	add.w	r1, r7, #28
 8002168:	f107 0220 	add.w	r2, r7, #32
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	9303      	str	r3, [sp, #12]
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	f107 0318 	add.w	r3, r7, #24
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	460b      	mov	r3, r1
 8002186:	4910      	ldr	r1, [pc, #64]	; (80021c8 <fillUnixTime+0x7c>)
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	f007 ff9f 	bl	800a0cc <siscanf>

    tm_time.tm_year = year - 1900;
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
    tm_time.tm_mon = month - 1;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b01      	subs	r3, #1
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
    tm_time.tm_mday = day;
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
    tm_time.tm_hour = hour;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    tm_time.tm_min = minute;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
    tm_time.tm_sec = second;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24

    *unixTime = mktime(&tm_time);
 80021ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b0:	4618      	mov	r0, r3
 80021b2:	f006 fe2d 	bl	8008e10 <mktime>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80021c0:	bf00      	nop
 80021c2:	3748      	adds	r7, #72	; 0x48
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	0800f784 	.word	0x0800f784

080021cc <unixTimeToString>:

void unixTimeToString(char* str, const time_t* unixTime) {
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b08c      	sub	sp, #48	; 0x30
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
    struct tm timeinfo = *localtime(unixTime);
 80021d6:	6838      	ldr	r0, [r7, #0]
 80021d8:	f006 fc0a 	bl	80089f0 <localtime>
 80021dc:	4603      	mov	r3, r0
 80021de:	f107 040c 	add.w	r4, r7, #12
 80021e2:	461d      	mov	r5, r3
 80021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ec:	682b      	ldr	r3, [r5, #0]
 80021ee:	6023      	str	r3, [r4, #0]
    strftime(str, FORMATTED_TIME_LEN, "%d.%m.%Y %H:%M:%S", &timeinfo);
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <unixTimeToString+0x3c>)
 80021f6:	2114      	movs	r1, #20
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f008 fd27 	bl	800ac4c <strftime>
}
 80021fe:	bf00      	nop
 8002200:	3730      	adds	r7, #48	; 0x30
 8002202:	46bd      	mov	sp, r7
 8002204:	bdb0      	pop	{r4, r5, r7, pc}
 8002206:	bf00      	nop
 8002208:	0800f798 	.word	0x0800f798

0800220c <setPositionAndTime>:

bool setPositionAndTime(float* position,time_t* unixTime, const char* gpsBuffer) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]

    char timeString[MAX_TIME_LEN + 1] = { 0 };
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	f8c3 2007 	str.w	r2, [r3, #7]
    float lat, lng;
    if (sscanf(gpsBuffer, "\r\n+CGNSINF: %*d,%*d,%[^.].%*[0-9],%f,%f", timeString, &lat, &lng) == 3) { //Edit \r\n
 800222a:	f107 0114 	add.w	r1, r7, #20
 800222e:	f107 0218 	add.w	r2, r7, #24
 8002232:	f107 0310 	add.w	r3, r7, #16
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	460b      	mov	r3, r1
 800223a:	490d      	ldr	r1, [pc, #52]	; (8002270 <setPositionAndTime+0x64>)
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f007 ff45 	bl	800a0cc <siscanf>
 8002242:	4603      	mov	r3, r0
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10e      	bne.n	8002266 <setPositionAndTime+0x5a>
        fillUnixTime(unixTime, timeString);
 8002248:	f107 0318 	add.w	r3, r7, #24
 800224c:	4619      	mov	r1, r3
 800224e:	68b8      	ldr	r0, [r7, #8]
 8002250:	f7ff ff7c 	bl	800214c <fillUnixTime>
        position[0] = lat;
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]
        position[1] = lng;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3304      	adds	r3, #4
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	601a      	str	r2, [r3, #0]
        //printf("Time: %s, Latitude: %.6f, Longitude: %.6f\n", timeString, lat, lng);
        return 1;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <setPositionAndTime+0x5c>
    }
    else {
        return 0;
 8002266:	2300      	movs	r3, #0
    }

}
 8002268:	4618      	mov	r0, r3
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	0800f7ac 	.word	0x0800f7ac

08002274 <gpsPositioning>:

bool gpsPositioning(struct Device* device, const uint32_t timeout){
 8002274:	b580      	push	{r7, lr}
 8002276:	b0a4      	sub	sp, #144	; 0x90
 8002278:	af02      	add	r7, sp, #8
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]

	uint32_t startTime = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    bool answer = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	char response[MAX_GPS_RESPONSE]={0};
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	f107 030c 	add.w	r3, r7, #12
 8002292:	2274      	movs	r2, #116	; 0x74
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f006 fcda 	bl	8008c50 <memset>


    if(!sendAtCommand("AT+CGNSPWR=1\r",2000,"OK"))    //Turn on the GNSS power.
 800229c:	4a3b      	ldr	r2, [pc, #236]	; (800238c <gpsPositioning+0x118>)
 800229e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80022a2:	483b      	ldr	r0, [pc, #236]	; (8002390 <gpsPositioning+0x11c>)
 80022a4:	f7fe ff8e 	bl	80011c4 <sendAtCommand>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f083 0301 	eor.w	r3, r3, #1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <gpsPositioning+0x44>
		return 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e064      	b.n	8002382 <gpsPositioning+0x10e>

    startTime = HAL_GetTick();
 80022b8:	f001 fd1c 	bl	8003cf4 <HAL_GetTick>
 80022bc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

    // this loop waits for the answer
    while( answer == 0 && ((HAL_GetTick()-startTime) < timeout) ) {
 80022c0:	e03a      	b.n	8002338 <gpsPositioning+0xc4>
        if(getSerialResponse("AT+CGNSINF\r",2000,"OK",response,sizeof(response))) {
 80022c2:	f107 0308 	add.w	r3, r7, #8
 80022c6:	2278      	movs	r2, #120	; 0x78
 80022c8:	9200      	str	r2, [sp, #0]
 80022ca:	4a30      	ldr	r2, [pc, #192]	; (800238c <gpsPositioning+0x118>)
 80022cc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80022d0:	4830      	ldr	r0, [pc, #192]	; (8002394 <gpsPositioning+0x120>)
 80022d2:	f7ff f815 	bl	8001300 <getSerialResponse>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01d      	beq.n	8002318 <gpsPositioning+0xa4>
			if(strstr(response,",,,,,") == NULL) {
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	492d      	ldr	r1, [pc, #180]	; (8002398 <gpsPositioning+0x124>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f008 fcdb 	bl	800ac9e <strstr>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <gpsPositioning+0x82>
            	answer = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80022f4:	e020      	b.n	8002338 <gpsPositioning+0xc4>
            }
            else {
            	memset(response,'\0',strlen(response));
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fd ff7a 	bl	80001f4 <strlen>
 8002300:	4602      	mov	r2, r0
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f006 fca1 	bl	8008c50 <memset>
            	HAL_Delay(1000);
 800230e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002312:	f001 fcfb 	bl	8003d0c <HAL_Delay>
 8002316:	e00f      	b.n	8002338 <gpsPositioning+0xc4>
            }
        }
        else {
            memset(response,'\0',strlen(response));
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	4618      	mov	r0, r3
 800231e:	f7fd ff69 	bl	80001f4 <strlen>
 8002322:	4602      	mov	r2, r0
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f006 fc90 	bl	8008c50 <memset>
            HAL_Delay(1000);
 8002330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002334:	f001 fcea 	bl	8003d0c <HAL_Delay>
    while( answer == 0 && ((HAL_GetTick()-startTime) < timeout) ) {
 8002338:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800233c:	f083 0301 	eor.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <gpsPositioning+0xe4>
 8002346:	f001 fcd5 	bl	8003cf4 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d8b4      	bhi.n	80022c2 <gpsPositioning+0x4e>
            }
        }

	sendAtCommand("AT+CGNSPWR=0\r",2000,"OK"); //Turn off the GNSS power
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <gpsPositioning+0x118>)
 800235a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800235e:	480f      	ldr	r0, [pc, #60]	; (800239c <gpsPositioning+0x128>)
 8002360:	f7fe ff30 	bl	80011c4 <sendAtCommand>

	if (answer) {
 8002364:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002368:	2b00      	cmp	r3, #0
 800236a:	d009      	beq.n	8002380 <gpsPositioning+0x10c>
		return setPositionAndTime(device->position,&(device->unixTime),response);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3308      	adds	r3, #8
 8002372:	f107 0208 	add.w	r2, r7, #8
 8002376:	4619      	mov	r1, r3
 8002378:	f7ff ff48 	bl	800220c <setPositionAndTime>
 800237c:	4603      	mov	r3, r0
 800237e:	e000      	b.n	8002382 <gpsPositioning+0x10e>
	}
	else {
		return 0;
 8002380:	2300      	movs	r3, #0
	}

}
 8002382:	4618      	mov	r0, r3
 8002384:	3788      	adds	r7, #136	; 0x88
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	0800f548 	.word	0x0800f548
 8002390:	0800f7d4 	.word	0x0800f7d4
 8002394:	0800f7e4 	.word	0x0800f7e4
 8002398:	0800f7f0 	.word	0x0800f7f0
 800239c:	0800f7f8 	.word	0x0800f7f8

080023a0 <prefix>:

bool prefix(const char* str, const char* pre)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
    return strncmp(str, pre, strlen(pre)) == 0;
 80023aa:	6838      	ldr	r0, [r7, #0]
 80023ac:	f7fd ff22 	bl	80001f4 <strlen>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f008 fc4a 	bl	800ac50 <strncmp>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf0c      	ite	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	2300      	movne	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <findLength>:

int findLength(const char* input) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
    char temp[4] = { 0 };
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
    char reve[4] = { 0 };
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
    char ch = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	74fb      	strb	r3, [r7, #19]
    for (int i = 1;i < 4; ++i) {
 80023e4:	2301      	movs	r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	e015      	b.n	8002416 <findLength+0x46>
        ch = *(input - i);
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	425b      	negs	r3, r3
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	74fb      	strb	r3, [r7, #19]
        if (ch < '0' || ch > '9')
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b2f      	cmp	r3, #47	; 0x2f
 80023fa:	d90f      	bls.n	800241c <findLength+0x4c>
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b39      	cmp	r3, #57	; 0x39
 8002400:	d80c      	bhi.n	800241c <findLength+0x4c>
            break;
        temp[i - 1] = ch;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3b01      	subs	r3, #1
 8002406:	3320      	adds	r3, #32
 8002408:	443b      	add	r3, r7
 800240a:	7cfa      	ldrb	r2, [r7, #19]
 800240c:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (int i = 1;i < 4; ++i) {
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	3301      	adds	r3, #1
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b03      	cmp	r3, #3
 800241a:	dde6      	ble.n	80023ea <findLength+0x1a>

    }
    int j = strlen(temp) - 1;
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	4618      	mov	r0, r3
 8002422:	f7fd fee7 	bl	80001f4 <strlen>
 8002426:	4603      	mov	r3, r0
 8002428:	3b01      	subs	r3, #1
 800242a:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < strlen(temp); ++i)
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e010      	b.n	8002454 <findLength+0x84>
    {
        reve[i] = temp[j];
 8002432:	f107 020c 	add.w	r2, r7, #12
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4413      	add	r3, r2
 800243a:	7819      	ldrb	r1, [r3, #0]
 800243c:	f107 0208 	add.w	r2, r7, #8
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4413      	add	r3, r2
 8002444:	460a      	mov	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
        --j;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	3b01      	subs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < strlen(temp); ++i)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3301      	adds	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	f107 030c 	add.w	r3, r7, #12
 8002458:	4618      	mov	r0, r3
 800245a:	f7fd fecb 	bl	80001f4 <strlen>
 800245e:	4602      	mov	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	429a      	cmp	r2, r3
 8002464:	d8e5      	bhi.n	8002432 <findLength+0x62>

    }
    return atoi(reve);
 8002466:	f107 0308 	add.w	r3, r7, #8
 800246a:	4618      	mov	r0, r3
 800246c:	f006 fa92 	bl	8008994 <atoi>
 8002470:	4603      	mov	r3, r0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <splitText>:

uint16_t splitText(char* input) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
    char* p, * m;
    uint8_t delimLen = 2; //\r\n
 8002484:	2302      	movs	r3, #2
 8002486:	737b      	strb	r3, [r7, #13]
    int messageLen = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
    uint16_t count = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	81fb      	strh	r3, [r7, #14]

    p = strstr(input, "\r\n");
 8002490:	4919      	ldr	r1, [pc, #100]	; (80024f8 <splitText+0x7c>)
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f008 fc03 	bl	800ac9e <strstr>
 8002498:	6178      	str	r0, [r7, #20]
    messageLen = findLength(p);
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff98 	bl	80023d0 <findLength>
 80024a0:	6138      	str	r0, [r7, #16]
    m = input;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60bb      	str	r3, [r7, #8]

    while (p && messageLen) {
 80024a6:	e01b      	b.n	80024e0 <splitText+0x64>
        m = p + delimLen + messageLen;
 80024a8:	7b7a      	ldrb	r2, [r7, #13]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4413      	add	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
        *m = '\0';
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
        m += delimLen;
 80024ba:	7b7b      	ldrb	r3, [r7, #13]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	4413      	add	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
        //printf("%d\n",count);
        p = strstr(m, "\r\n");
 80024c2:	490d      	ldr	r1, [pc, #52]	; (80024f8 <splitText+0x7c>)
 80024c4:	68b8      	ldr	r0, [r7, #8]
 80024c6:	f008 fbea 	bl	800ac9e <strstr>
 80024ca:	6178      	str	r0, [r7, #20]
        if (p) {
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <splitText+0x5e>
            messageLen = findLength(p);
 80024d2:	6978      	ldr	r0, [r7, #20]
 80024d4:	f7ff ff7c 	bl	80023d0 <findLength>
 80024d8:	6138      	str	r0, [r7, #16]
            //printf("%d\r\n", messageLen);
        }
        ++count;
 80024da:	89fb      	ldrh	r3, [r7, #14]
 80024dc:	3301      	adds	r3, #1
 80024de:	81fb      	strh	r3, [r7, #14]
    while (p && messageLen) {
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <splitText+0x70>
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1dd      	bne.n	80024a8 <splitText+0x2c>
        //printf("%d\r\n", messageLen);
        //printf("%d",count);
    }
    return count;
 80024ec:	89fb      	ldrh	r3, [r7, #14]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	0800f760 	.word	0x0800f760
 80024fc:	00000000 	.word	0x00000000

08002500 <haversine>:

double haversine(double lat1,double lng1,double lat2,double lng2)
{
 8002500:	b5b0      	push	{r4, r5, r7, lr}
 8002502:	b08e      	sub	sp, #56	; 0x38
 8002504:	af00      	add	r7, sp, #0
 8002506:	ed87 0b06 	vstr	d0, [r7, #24]
 800250a:	ed87 1b04 	vstr	d1, [r7, #16]
 800250e:	ed87 2b02 	vstr	d2, [r7, #8]
 8002512:	ed87 3b00 	vstr	d3, [r7]
    //printf("%f,%f,%f,%f\n", lat1, lng1, lat2, lng2);

    double dx, dy, dz;
    lng1 -= lng2;
 8002516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800251a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800251e:	f7fd fecb 	bl	80002b8 <__aeabi_dsub>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	e9c7 2304 	strd	r2, r3, [r7, #16]
    lng1 *= (3.14159265358979323846 / 180);
 800252a:	a363      	add	r3, pc, #396	; (adr r3, 80026b8 <haversine+0x1b8>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002534:	f7fe f878 	bl	8000628 <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    lat1 *= (3.14159265358979323846 / 180);
 8002540:	a35d      	add	r3, pc, #372	; (adr r3, 80026b8 <haversine+0x1b8>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800254a:	f7fe f86d 	bl	8000628 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	e9c7 2306 	strd	r2, r3, [r7, #24]
    lat2 *= (3.14159265358979323846 / 180);
 8002556:	a358      	add	r3, pc, #352	; (adr r3, 80026b8 <haversine+0x1b8>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002560:	f7fe f862 	bl	8000628 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	e9c7 2302 	strd	r2, r3, [r7, #8]

    dz = sin(lat1) - sin(lat2);
 800256c:	ed97 0b06 	vldr	d0, [r7, #24]
 8002570:	f004 fe96 	bl	80072a0 <sin>
 8002574:	ec55 4b10 	vmov	r4, r5, d0
 8002578:	ed97 0b02 	vldr	d0, [r7, #8]
 800257c:	f004 fe90 	bl	80072a0 <sin>
 8002580:	ec53 2b10 	vmov	r2, r3, d0
 8002584:	4620      	mov	r0, r4
 8002586:	4629      	mov	r1, r5
 8002588:	f7fd fe96 	bl	80002b8 <__aeabi_dsub>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    dx = cos(lng1) * cos(lat1) - cos(lat2);
 8002594:	ed97 0b04 	vldr	d0, [r7, #16]
 8002598:	f004 fe2e 	bl	80071f8 <cos>
 800259c:	ec55 4b10 	vmov	r4, r5, d0
 80025a0:	ed97 0b06 	vldr	d0, [r7, #24]
 80025a4:	f004 fe28 	bl	80071f8 <cos>
 80025a8:	ec53 2b10 	vmov	r2, r3, d0
 80025ac:	4620      	mov	r0, r4
 80025ae:	4629      	mov	r1, r5
 80025b0:	f7fe f83a 	bl	8000628 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4614      	mov	r4, r2
 80025ba:	461d      	mov	r5, r3
 80025bc:	ed97 0b02 	vldr	d0, [r7, #8]
 80025c0:	f004 fe1a 	bl	80071f8 <cos>
 80025c4:	ec53 2b10 	vmov	r2, r3, d0
 80025c8:	4620      	mov	r0, r4
 80025ca:	4629      	mov	r1, r5
 80025cc:	f7fd fe74 	bl	80002b8 <__aeabi_dsub>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    dy = sin(lng1) * cos(lat1);
 80025d8:	ed97 0b04 	vldr	d0, [r7, #16]
 80025dc:	f004 fe60 	bl	80072a0 <sin>
 80025e0:	ec55 4b10 	vmov	r4, r5, d0
 80025e4:	ed97 0b06 	vldr	d0, [r7, #24]
 80025e8:	f004 fe06 	bl	80071f8 <cos>
 80025ec:	ec53 2b10 	vmov	r2, r3, d0
 80025f0:	4620      	mov	r0, r4
 80025f2:	4629      	mov	r1, r5
 80025f4:	f7fe f818 	bl	8000628 <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return asin(sqrt(dx * dx + dy * dy + dz * dz) / 2) * 2 * 6371000;
 8002600:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002604:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002608:	f7fe f80e 	bl	8000628 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002618:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800261c:	f7fe f804 	bl	8000628 <__aeabi_dmul>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4620      	mov	r0, r4
 8002626:	4629      	mov	r1, r5
 8002628:	f7fd fe48 	bl	80002bc <__adddf3>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4614      	mov	r4, r2
 8002632:	461d      	mov	r5, r3
 8002634:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002638:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800263c:	f7fd fff4 	bl	8000628 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4620      	mov	r0, r4
 8002646:	4629      	mov	r1, r5
 8002648:	f7fd fe38 	bl	80002bc <__adddf3>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	ec43 2b17 	vmov	d7, r2, r3
 8002654:	eeb0 0a47 	vmov.f32	s0, s14
 8002658:	eef0 0a67 	vmov.f32	s1, s15
 800265c:	f004 feac 	bl	80073b8 <sqrt>
 8002660:	ec51 0b10 	vmov	r0, r1, d0
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800266c:	f7fe f906 	bl	800087c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	ec43 2b17 	vmov	d7, r2, r3
 8002678:	eeb0 0a47 	vmov.f32	s0, s14
 800267c:	eef0 0a67 	vmov.f32	s1, s15
 8002680:	f004 fe66 	bl	8007350 <asin>
 8002684:	ec51 0b10 	vmov	r0, r1, d0
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	f7fd fe16 	bl	80002bc <__adddf3>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	a309      	add	r3, pc, #36	; (adr r3, 80026c0 <haversine+0x1c0>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fd ffc3 	bl	8000628 <__aeabi_dmul>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80026aa:	eeb0 0a47 	vmov.f32	s0, s14
 80026ae:	eef0 0a67 	vmov.f32	s1, s15
 80026b2:	3738      	adds	r7, #56	; 0x38
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bdb0      	pop	{r4, r5, r7, pc}
 80026b8:	a2529d39 	.word	0xa2529d39
 80026bc:	3f91df46 	.word	0x3f91df46
 80026c0:	00000000 	.word	0x00000000
 80026c4:	41584dae 	.word	0x41584dae

080026c8 <circleToString>:


bool circleToString(char * str, struct Subscriber* subscribersArr, int* count, const char* address) {
 80026c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026cc:	b08a      	sub	sp, #40	; 0x28
 80026ce:	af04      	add	r7, sp, #16
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	603b      	str	r3, [r7, #0]

    for (int i = 0; i < *count; i++) {
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e047      	b.n	800276e <circleToString+0xa6>
        if (strcmp(subscribersArr[i].address, address) == 0) {
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4413      	add	r3, r2
 80026ee:	6839      	ldr	r1, [r7, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd fd75 	bl	80001e0 <strcmp>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d135      	bne.n	8002768 <circleToString+0xa0>
            sprintf(str, "%.6f,%.6f,%.0f", subscribersArr[i].circle[0], subscribersArr[i].circle[1], subscribersArr[i].circle[2]);
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4413      	add	r3, r2
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff32 	bl	8000578 <__aeabi_f2d>
 8002714:	4680      	mov	r8, r0
 8002716:	4689      	mov	r9, r1
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	461a      	mov	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4413      	add	r3, r2
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd ff24 	bl	8000578 <__aeabi_f2d>
 8002730:	4604      	mov	r4, r0
 8002732:	460d      	mov	r5, r1
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4413      	add	r3, r2
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd ff16 	bl	8000578 <__aeabi_f2d>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002754:	e9cd 4500 	strd	r4, r5, [sp]
 8002758:	4642      	mov	r2, r8
 800275a:	464b      	mov	r3, r9
 800275c:	4909      	ldr	r1, [pc, #36]	; (8002784 <circleToString+0xbc>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f007 fc94 	bl	800a08c <siprintf>
            return 1;
 8002764:	2301      	movs	r3, #1
 8002766:	e008      	b.n	800277a <circleToString+0xb2>
    for (int i = 0; i < *count; i++) {
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	429a      	cmp	r2, r3
 8002776:	dbb2      	blt.n	80026de <circleToString+0x16>
        }
    }
    return 0;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002784:	0800f808 	.word	0x0800f808

08002788 <checkCircles>:

//return true if any state changed
bool checkCircles(struct Device* device) {
 8002788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800278c:	b0ba      	sub	sp, #232	; 0xe8
 800278e:	af06      	add	r7, sp, #24
 8002790:	6078      	str	r0, [r7, #4]
    bool change = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    double distance = 0;
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
    for (int i = 0; i < device->count; i++) {
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027aa:	e0fd      	b.n	80029a8 <checkCircles+0x220>

        distance = haversine((device->position[0]), (device->position[1]),
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fee1 	bl	8000578 <__aeabi_f2d>
 80027b6:	4604      	mov	r4, r0
 80027b8:	460d      	mov	r5, r1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd feda 	bl	8000578 <__aeabi_f2d>
 80027c4:	4680      	mov	r8, r0
 80027c6:	4689      	mov	r9, r1
            (device->subscribers[i].circle[0]), (device->subscribers[i].circle[1]) );
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	332c      	adds	r3, #44	; 0x2c
 80027da:	681b      	ldr	r3, [r3, #0]
        distance = haversine((device->position[0]), (device->position[1]),
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fecb 	bl	8000578 <__aeabi_f2d>
 80027e2:	4682      	mov	sl, r0
 80027e4:	468b      	mov	fp, r1
            (device->subscribers[i].circle[0]), (device->subscribers[i].circle[1]) );
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3330      	adds	r3, #48	; 0x30
 80027f8:	681b      	ldr	r3, [r3, #0]
        distance = haversine((device->position[0]), (device->position[1]),
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd febc 	bl	8000578 <__aeabi_f2d>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	ec43 2b13 	vmov	d3, r2, r3
 8002808:	ec4b ab12 	vmov	d2, sl, fp
 800280c:	ec49 8b11 	vmov	d1, r8, r9
 8002810:	ec45 4b10 	vmov	d0, r4, r5
 8002814:	f7ff fe74 	bl	8002500 <haversine>
 8002818:	ed87 0b30 	vstr	d0, [r7, #192]	; 0xc0
        //printf("dist: %f m subscriber: [%d]\n", distance , i);

        if (distance > device->subscribers[i].circle[2] && !device->subscribers[i].state) {
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3334      	adds	r3, #52	; 0x34
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fea1 	bl	8000578 <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800283e:	f7fe f983 	bl	8000b48 <__aeabi_dcmpgt>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d07a      	beq.n	800293e <checkCircles+0x1b6>
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3328      	adds	r3, #40	; 0x28
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d16e      	bne.n	800293e <checkCircles+0x1b6>

            char response[MAX_SMS_SIZE] = { 0 }; //sms response
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	229c      	movs	r2, #156	; 0x9c
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f006 f9ef 	bl	8008c50 <memset>
            char time[FORMATTED_TIME_LEN + 1] = { 0 };
 8002872:	2300      	movs	r3, #0
 8002874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002878:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	741a      	strb	r2, [r3, #16]
            unixTimeToString(time, &(device->unixTime) );
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f103 0208 	add.w	r2, r3, #8
 800288e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fc99 	bl	80021cc <unixTimeToString>
            sprintf(response, "Zone exceeded by %.1fm\r\nPosition:\r\n%.6f,%.6f\r\nTime:\r\n%s\r\n", distance - device->subscribers[i].circle[2],
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	3334      	adds	r3, #52	; 0x34
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fe62 	bl	8000578 <__aeabi_f2d>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80028bc:	f7fd fcfc 	bl	80002b8 <__aeabi_dsub>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4690      	mov	r8, r2
 80028c6:	4699      	mov	r9, r3
                device->position[0], device->position[1], time);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
            sprintf(response, "Zone exceeded by %.1fm\r\nPosition:\r\n%.6f,%.6f\r\nTime:\r\n%s\r\n", distance - device->subscribers[i].circle[2],
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fe53 	bl	8000578 <__aeabi_f2d>
 80028d2:	4604      	mov	r4, r0
 80028d4:	460d      	mov	r5, r1
                device->position[0], device->position[1], time);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
            sprintf(response, "Zone exceeded by %.1fm\r\nPosition:\r\n%.6f,%.6f\r\nTime:\r\n%s\r\n", distance - device->subscribers[i].circle[2],
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fd fe4c 	bl	8000578 <__aeabi_f2d>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	f107 0008 	add.w	r0, r7, #8
 80028e8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80028ec:	9104      	str	r1, [sp, #16]
 80028ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028f2:	e9cd 4500 	strd	r4, r5, [sp]
 80028f6:	4642      	mov	r2, r8
 80028f8:	464b      	mov	r3, r9
 80028fa:	4933      	ldr	r1, [pc, #204]	; (80029c8 <checkCircles+0x240>)
 80028fc:	f007 fbc6 	bl	800a08c <siprintf>

            //printf("Response:\r\n%s", response);
            storeSms(device->subscribers[i].address, response);
 8002900:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	3310      	adds	r3, #16
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	3304      	adds	r3, #4
 8002914:	f107 0208 	add.w	r2, r7, #8
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fe16 	bl	800154c <storeSms>

            device->subscribers[i].state = 1;    //setState and send notification
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	3328      	adds	r3, #40	; 0x28
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
            change = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
        if (distance > device->subscribers[i].circle[2] && !device->subscribers[i].state) {
 800293c:	e02f      	b.n	800299e <checkCircles+0x216>
        }
        else if (distance < device->subscribers[i].circle[2] && device->subscribers[i].state) {
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3334      	adds	r3, #52	; 0x34
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fe10 	bl	8000578 <__aeabi_f2d>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002960:	f7fe f8d4 	bl	8000b0c <__aeabi_dcmplt>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d019      	beq.n	800299e <checkCircles+0x216>
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3328      	adds	r3, #40	; 0x28
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <checkCircles+0x216>
            device->subscribers[i].state = 0; //Reset state
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3328      	adds	r3, #40	; 0x28
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
            change = 1;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    for (int i = 0; i < device->count; i++) {
 800299e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029a2:	3301      	adds	r3, #1
 80029a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80029ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029b2:	429a      	cmp	r2, r3
 80029b4:	f6ff aefa 	blt.w	80027ac <checkCircles+0x24>
        }
    }
    return change; //return change 0 if state did not change and 1 if any state changed
 80029b8:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 80029bc:	4618      	mov	r0, r3
 80029be:	37d0      	adds	r7, #208	; 0xd0
 80029c0:	46bd      	mov	sp, r7
 80029c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c6:	bf00      	nop
 80029c8:	0800f818 	.word	0x0800f818

080029cc <handleNotifications>:

void handleNotifications(struct Device* device) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

    struct Device* deviceCopy = copyDevice(device); //deepCopy as temporary device struct
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff f8e3 	bl	8001ba0 <copyDevice>
 80029da:	60f8      	str	r0, [r7, #12]

    if (checkCircles(deviceCopy)) {
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff fed3 	bl	8002788 <checkCircles>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <handleNotifications+0x44>
        if (handleWriteFile(deviceCopy)) {
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f7ff fa80 	bl	8001eee <handleWriteFile>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d009      	beq.n	8002a08 <handleNotifications+0x3c>
            memcpy(device, deviceCopy, sizeof(struct Device));
 80029f4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80029f8:	68f9      	ldr	r1, [r7, #12]
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f006 f91a 	bl	8008c34 <memcpy>
            free(deviceCopy); // Deallocate
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f006 f90f 	bl	8008c24 <free>
        else
            free(deviceCopy); // Deallocate
    }
    else
        free(deviceCopy); // Deallocate
}
 8002a06:	e006      	b.n	8002a16 <handleNotifications+0x4a>
            free(deviceCopy); // Deallocate
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f006 f90b 	bl	8008c24 <free>
}
 8002a0e:	e002      	b.n	8002a16 <handleNotifications+0x4a>
        free(deviceCopy); // Deallocate
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f006 f907 	bl	8008c24 <free>
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <validNum>:

bool validNum(float number, float min, float max) {
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a28:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a2c:	ed87 1a01 	vstr	s2, [r7, #4]
    if ((number >= min) && (number <= max))  //if ((min ? number >= min : true) && max ? (number <= max) : true)
 8002a30:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a40:	db0a      	blt.n	8002a58 <validNum+0x3a>
 8002a42:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a52:	d801      	bhi.n	8002a58 <validNum+0x3a>
        return 1;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <validNum+0x3c>
    else
        return 0;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <appResponse>:

bool appResponse(struct Device* device, const char* address, const char* requestId, const int responseCode) {
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	b0c1      	sub	sp, #260	; 0x104
 8002a6c:	af08      	add	r7, sp, #32
 8002a6e:	6178      	str	r0, [r7, #20]
 8002a70:	6139      	str	r1, [r7, #16]
 8002a72:	60fa      	str	r2, [r7, #12]
 8002a74:	60bb      	str	r3, [r7, #8]

    char response[MAX_SMS_SIZE] = { 0 }; //sms response
 8002a76:	2300      	movs	r3, #0
 8002a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a7e:	229c      	movs	r2, #156	; 0x9c
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f006 f8e4 	bl	8008c50 <memset>
    char circle[MAX_CIRCLE_LEN + 1] = { 0 };
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	f107 0320 	add.w	r3, r7, #32
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
 8002a9c:	615a      	str	r2, [r3, #20]
 8002a9e:	831a      	strh	r2, [r3, #24]
    bool hasCircle = circleToString(circle, (device->subscribers), &(device->count), address);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f103 0114 	add.w	r1, r3, #20
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f503 72be 	add.w	r2, r3, #380	; 0x17c
 8002aac:	f107 001c 	add.w	r0, r7, #28
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f7ff fe09 	bl	80026c8 <circleToString>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

    if ( responseCode>=0 && responseCode<10 ) {
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db2f      	blt.n	8002b22 <appResponse+0xba>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b09      	cmp	r3, #9
 8002ac6:	dc2c      	bgt.n	8002b22 <appResponse+0xba>
    	sprintf(response, "resp=%s,%d,%.6f,%.6f,%d,%s,%d", requestId, responseCode, device->position[0], device->position[1],
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fd53 	bl	8000578 <__aeabi_f2d>
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	460d      	mov	r5, r1
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fd4c 	bl	8000578 <__aeabi_f2d>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
    		(int)(device->unixTime), hasCircle ? circle : "52,19,0", device->interval);
 8002ae4:	6979      	ldr	r1, [r7, #20]
 8002ae6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    	sprintf(response, "resp=%s,%d,%.6f,%.6f,%d,%s,%d", requestId, responseCode, device->position[0], device->position[1],
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	f897 10df 	ldrb.w	r1, [r7, #223]	; 0xdf
 8002af0:	2900      	cmp	r1, #0
 8002af2:	d002      	beq.n	8002afa <appResponse+0x92>
 8002af4:	f107 011c 	add.w	r1, r7, #28
 8002af8:	e000      	b.n	8002afc <appResponse+0x94>
 8002afa:	4913      	ldr	r1, [pc, #76]	; (8002b48 <appResponse+0xe0>)
 8002afc:	6978      	ldr	r0, [r7, #20]
 8002afe:	6900      	ldr	r0, [r0, #16]
 8002b00:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 8002b04:	9006      	str	r0, [sp, #24]
 8002b06:	9105      	str	r1, [sp, #20]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	9104      	str	r1, [sp, #16]
 8002b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b10:	e9cd 4500 	strd	r4, r5, [sp]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	490c      	ldr	r1, [pc, #48]	; (8002b4c <appResponse+0xe4>)
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	f007 fab6 	bl	800a08c <siprintf>
 8002b20:	e006      	b.n	8002b30 <appResponse+0xc8>
    } else {
	sprintf(response, "resp=%s,%d", requestId, responseCode);
 8002b22:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4909      	ldr	r1, [pc, #36]	; (8002b50 <appResponse+0xe8>)
 8002b2c:	f007 faae 	bl	800a08c <siprintf>
    }
	//printf("Response:\r\n%s", response);
	storeSms(address, response);
 8002b30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b34:	4619      	mov	r1, r3
 8002b36:	6938      	ldr	r0, [r7, #16]
 8002b38:	f7fe fd08 	bl	800154c <storeSms>

	return 1;
 8002b3c:	2301      	movs	r3, #1
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	37e4      	adds	r7, #228	; 0xe4
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b46:	bf00      	nop
 8002b48:	0800f854 	.word	0x0800f854
 8002b4c:	0800f85c 	.word	0x0800f85c
 8002b50:	0800f87c 	.word	0x0800f87c

08002b54 <processMessageByCommand>:

bool processMessageByCommand(const char* message, const char* address, struct Device* device, const char* command) {
 8002b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b58:	b0e3      	sub	sp, #396	; 0x18c
 8002b5a:	af06      	add	r7, sp, #24
 8002b5c:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 8002b60:	f5a4 74b2 	sub.w	r4, r4, #356	; 0x164
 8002b64:	6020      	str	r0, [r4, #0]
 8002b66:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8002b6a:	f5a0 70b4 	sub.w	r0, r0, #360	; 0x168
 8002b6e:	6001      	str	r1, [r0, #0]
 8002b70:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8002b74:	f5a1 71b6 	sub.w	r1, r1, #364	; 0x16c
 8002b78:	600a      	str	r2, [r1, #0]
 8002b7a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002b7e:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8002b82:	6013      	str	r3, [r2, #0]
    switch (*command) {
 8002b84:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002b88:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b70      	cmp	r3, #112	; 0x70
 8002b92:	f000 8112 	beq.w	8002dba <processMessageByCommand+0x266>
 8002b96:	2b70      	cmp	r3, #112	; 0x70
 8002b98:	f300 8337 	bgt.w	800320a <processMessageByCommand+0x6b6>
 8002b9c:	2b64      	cmp	r3, #100	; 0x64
 8002b9e:	f000 8196 	beq.w	8002ece <processMessageByCommand+0x37a>
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	f300 8331 	bgt.w	800320a <processMessageByCommand+0x6b6>
 8002ba8:	2b61      	cmp	r3, #97	; 0x61
 8002baa:	d00f      	beq.n	8002bcc <processMessageByCommand+0x78>
 8002bac:	2b61      	cmp	r3, #97	; 0x61
 8002bae:	f300 832c 	bgt.w	800320a <processMessageByCommand+0x6b6>
 8002bb2:	2b32      	cmp	r3, #50	; 0x32
 8002bb4:	f000 820d 	beq.w	8002fd2 <processMessageByCommand+0x47e>
 8002bb8:	2b32      	cmp	r3, #50	; 0x32
 8002bba:	f300 8326 	bgt.w	800320a <processMessageByCommand+0x6b6>
 8002bbe:	2b30      	cmp	r3, #48	; 0x30
 8002bc0:	f000 81d6 	beq.w	8002f70 <processMessageByCommand+0x41c>
 8002bc4:	2b31      	cmp	r3, #49	; 0x31
 8002bc6:	f000 824d 	beq.w	8003064 <processMessageByCommand+0x510>
 8002bca:	e31e      	b.n	800320a <processMessageByCommand+0x6b6>
    case 'a': //Subscribe -> setCircle / editCircle
    {
        float circle[3] = { 0,0,0 }; //parameters included in  sms message [rad/interval,lat,lng]
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

        if (sscanf(message, "%f,%f,%f", &circle[0], &circle[1], &circle[2]) != 3) {
 8002be4:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002be8:	1d19      	adds	r1, r3, #4
 8002bea:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8002bee:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002bf2:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 8002bf6:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	49c6      	ldr	r1, [pc, #792]	; (8002f1c <processMessageByCommand+0x3c8>)
 8002c02:	6800      	ldr	r0, [r0, #0]
 8002c04:	f007 fa62 	bl	800a0cc <siscanf>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d001      	beq.n	8002c12 <processMessageByCommand+0xbe>
            return 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e2fc      	b.n	800320c <processMessageByCommand+0x6b8>
        }

        if (!(validNum(circle[0], LATITUDE_MIN, LATITUDE_MAX) && validNum(circle[1], LONGITUDE_MIN, LONGITUDE_MAX) && validNum(circle[2], RADIUS_MIN, RADIUS_MAX)))
 8002c12:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 8002c16:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 8002f20 <processMessageByCommand+0x3cc>
 8002c1a:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8002f24 <processMessageByCommand+0x3d0>
 8002c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c22:	f7ff fefc 	bl	8002a1e <validNum>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f083 0301 	eor.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11f      	bne.n	8002c72 <processMessageByCommand+0x11e>
 8002c32:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 8002c36:	ed9f 1abc 	vldr	s2, [pc, #752]	; 8002f28 <processMessageByCommand+0x3d4>
 8002c3a:	eddf 0abc 	vldr	s1, [pc, #752]	; 8002f2c <processMessageByCommand+0x3d8>
 8002c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c42:	f7ff feec 	bl	8002a1e <validNum>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f083 0301 	eor.w	r3, r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10f      	bne.n	8002c72 <processMessageByCommand+0x11e>
 8002c52:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8002c56:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 8002f30 <processMessageByCommand+0x3dc>
 8002c5a:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8002f34 <processMessageByCommand+0x3e0>
 8002c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c62:	f7ff fedc 	bl	8002a1e <validNum>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <processMessageByCommand+0x122>
            return 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e2ca      	b.n	800320c <processMessageByCommand+0x6b8>

        struct Subscriber newSubscriber = { "", 0, { circle[0], circle[1], circle[2] } }; //Create element based on message
 8002c76:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c7a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	731a      	strb	r2, [r3, #12]
 8002c8e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c92:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002c96:	2200      	movs	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
 8002c9a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002c9e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002ca2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002ca6:	619a      	str	r2, [r3, #24]
 8002ca8:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002cac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002cb0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002cb4:	61da      	str	r2, [r3, #28]
 8002cb6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002cba:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002cbe:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002cc2:	621a      	str	r2, [r3, #32]
        strncpy(newSubscriber.address, address, strlen(address)); //Fill element based on message
 8002cc4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002cc8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	f7fd fa91 	bl	80001f4 <strlen>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002cd8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cdc:	f107 0014 	add.w	r0, r7, #20
 8002ce0:	6819      	ldr	r1, [r3, #0]
 8002ce2:	f007 ffc9 	bl	800ac78 <strncpy>
        bool success = subscribe(device, &newSubscriber);
 8002ce6:	f107 0214 	add.w	r2, r7, #20
 8002cea:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002cee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	f7ff f956 	bl	8001fa6 <subscribe>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f887 316d 	strb.w	r3, [r7, #365]	; 0x16d


		char response[MAX_SMS_SIZE] = { 0 }; //sms response
 8002d00:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002d04:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	229c      	movs	r2, #156	; 0x9c
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f005 ff9c 	bl	8008c50 <memset>
        if (success) {
 8002d18:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <processMessageByCommand+0x20e>
            sprintf(response, "Subscribed:\r\n%.6f,%.6f,%.0f", circle[0], circle[1], circle[2]);
 8002d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd fc27 	bl	8000578 <__aeabi_f2d>
 8002d2a:	4680      	mov	r8, r0
 8002d2c:	4689      	mov	r9, r1
 8002d2e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fc20 	bl	8000578 <__aeabi_f2d>
 8002d38:	4604      	mov	r4, r0
 8002d3a:	460d      	mov	r5, r1
 8002d3c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fc19 	bl	8000578 <__aeabi_f2d>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d52:	e9cd 4500 	strd	r4, r5, [sp]
 8002d56:	4642      	mov	r2, r8
 8002d58:	464b      	mov	r3, r9
 8002d5a:	4977      	ldr	r1, [pc, #476]	; (8002f38 <processMessageByCommand+0x3e4>)
 8002d5c:	f007 f996 	bl	800a08c <siprintf>
 8002d60:	e01f      	b.n	8002da2 <processMessageByCommand+0x24e>
        }
        else {
            sprintf(response, "Subscription failed:\r\n%.6f,%.6f,%.0f", circle[0], circle[1], circle[2]);
 8002d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd fc06 	bl	8000578 <__aeabi_f2d>
 8002d6c:	4680      	mov	r8, r0
 8002d6e:	4689      	mov	r9, r1
 8002d70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fbff 	bl	8000578 <__aeabi_f2d>
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	460d      	mov	r5, r1
 8002d7e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fbf8 	bl	8000578 <__aeabi_f2d>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002d90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d94:	e9cd 4500 	strd	r4, r5, [sp]
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	4967      	ldr	r1, [pc, #412]	; (8002f3c <processMessageByCommand+0x3e8>)
 8002d9e:	f007 f975 	bl	800a08c <siprintf>
        }

        //printf("Response:\r\n%s", response);
        storeSms(address, response);
 8002da2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002da6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002daa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002dae:	4611      	mov	r1, r2
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	f7fe fbcb 	bl	800154c <storeSms>

        return 1;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e228      	b.n	800320c <processMessageByCommand+0x6b8>
    }
    case 'p': //getPosition sms
    {
        //resp=50.446896,18.838770,1678729041,50.446896,18.838770,50000
        char response[MAX_SMS_SIZE] = { 0 }; //sms response
 8002dba:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002dbe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	229c      	movs	r2, #156	; 0x9c
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f005 ff3f 	bl	8008c50 <memset>
        char circle[MAX_CIRCLE_LEN + 1] = { 0 };
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
 8002de8:	615a      	str	r2, [r3, #20]
 8002dea:	831a      	strh	r2, [r3, #24]
        bool hasCircle = circleToString(circle, (device->subscribers), &(device->count), address);
 8002dec:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002df0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f103 0114 	add.w	r1, r3, #20
 8002dfa:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002dfe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f503 72be 	add.w	r2, r3, #380	; 0x17c
 8002e08:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002e0c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e10:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f7ff fc57 	bl	80026c8 <circleToString>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
        char time[FORMATTED_TIME_LEN + 1] = { 0 };
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002e26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	60da      	str	r2, [r3, #12]
 8002e34:	741a      	strb	r2, [r3, #16]

        unixTimeToString(time, &(device->unixTime));
 8002e36:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002e3a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f103 0208 	add.w	r2, r3, #8
 8002e44:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f9be 	bl	80021cc <unixTimeToString>
        sprintf(response, "Position:\r\n%.6f,%.6f\r\nTime:\r\n%s\r\nZone:\r\n%s\r\nInterval:\r\n%d", device->position[0], device->position[1],
 8002e50:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002e54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fb8b 	bl	8000578 <__aeabi_f2d>
 8002e62:	4604      	mov	r4, r0
 8002e64:	460d      	mov	r5, r1
 8002e66:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002e6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fb80 	bl	8000578 <__aeabi_f2d>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	f897 116f 	ldrb.w	r1, [r7, #367]	; 0x16f
 8002e80:	2900      	cmp	r1, #0
 8002e82:	d002      	beq.n	8002e8a <processMessageByCommand+0x336>
 8002e84:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8002e88:	e000      	b.n	8002e8c <processMessageByCommand+0x338>
 8002e8a:	492d      	ldr	r1, [pc, #180]	; (8002f40 <processMessageByCommand+0x3ec>)
 8002e8c:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8002e90:	f5a0 70b6 	sub.w	r0, r0, #364	; 0x16c
 8002e94:	6800      	ldr	r0, [r0, #0]
 8002e96:	6900      	ldr	r0, [r0, #16]
 8002e98:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8002e9c:	9004      	str	r0, [sp, #16]
 8002e9e:	9103      	str	r1, [sp, #12]
 8002ea0:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002ea4:	9102      	str	r1, [sp, #8]
 8002ea6:	e9cd 2300 	strd	r2, r3, [sp]
 8002eaa:	4622      	mov	r2, r4
 8002eac:	462b      	mov	r3, r5
 8002eae:	4925      	ldr	r1, [pc, #148]	; (8002f44 <processMessageByCommand+0x3f0>)
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	f007 f8eb 	bl	800a08c <siprintf>
            time, hasCircle ? circle : "not subscribed", device->interval);

        //printf("Response:\r\n%s", response);
        storeSms(address, response);
 8002eb6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002eba:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002ebe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	f7fe fb41 	bl	800154c <storeSms>

        return 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e19e      	b.n	800320c <processMessageByCommand+0x6b8>
    }
    case 'd': //Unsubscribe
    {
        bool success = unsubscribe(device, address);
 8002ece:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002ed2:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8002ed6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002eda:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ede:	6811      	ldr	r1, [r2, #0]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	f7ff f8ca 	bl	800207a <unsubscribe>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
        char response[MAX_SMS_SIZE] = { 0 }; //sms response
 8002eec:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002ef0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	229c      	movs	r2, #156	; 0x9c
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f005 fea6 	bl	8008c50 <memset>
        if (success) {
 8002f04:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01f      	beq.n	8002f4c <processMessageByCommand+0x3f8>
            sprintf(response, "Unsubscribed");
 8002f0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f10:	490d      	ldr	r1, [pc, #52]	; (8002f48 <processMessageByCommand+0x3f4>)
 8002f12:	4618      	mov	r0, r3
 8002f14:	f007 f8ba 	bl	800a08c <siprintf>
 8002f18:	e01e      	b.n	8002f58 <processMessageByCommand+0x404>
 8002f1a:	bf00      	nop
 8002f1c:	0800f888 	.word	0x0800f888
 8002f20:	42b40000 	.word	0x42b40000
 8002f24:	c2b40000 	.word	0xc2b40000
 8002f28:	43340000 	.word	0x43340000
 8002f2c:	c3340000 	.word	0xc3340000
 8002f30:	4ac26d70 	.word	0x4ac26d70
 8002f34:	42480000 	.word	0x42480000
 8002f38:	0800f894 	.word	0x0800f894
 8002f3c:	0800f8b0 	.word	0x0800f8b0
 8002f40:	0800f8d8 	.word	0x0800f8d8
 8002f44:	0800f8e8 	.word	0x0800f8e8
 8002f48:	0800f924 	.word	0x0800f924
        }
        else {
            sprintf(response, "Unsubscription failed");
 8002f4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f50:	49b1      	ldr	r1, [pc, #708]	; (8003218 <processMessageByCommand+0x6c4>)
 8002f52:	4618      	mov	r0, r3
 8002f54:	f007 f89a 	bl	800a08c <siprintf>
        }

        //printf("Response:\r\n%s", response);
        storeSms(address, response);
 8002f58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f5c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002f60:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f64:	4611      	mov	r1, r2
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	f7fe faf0 	bl	800154c <storeSms>

        return 1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e14d      	b.n	800320c <processMessageByCommand+0x6b8>
        return 1;
    }
    */
	case '0': //Position
    {
		char requestId[REQUEST_ID_LEN+1] = {0};
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	f8c3 2007 	str.w	r2, [r3, #7]
		int responseCode = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

		if (sscanf(message, "%s", requestId) != 1)
 8002f8a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8002f8e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002f92:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002f96:	49a1      	ldr	r1, [pc, #644]	; (800321c <processMessageByCommand+0x6c8>)
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	f007 f897 	bl	800a0cc <siscanf>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d001      	beq.n	8002fa8 <processMessageByCommand+0x454>
			return 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e131      	b.n	800320c <processMessageByCommand+0x6b8>

		responseCode = 1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		return appResponse(device,address,requestId,responseCode);
 8002fae:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8002fb2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002fb6:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 8002fba:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002fbe:	f5a3 70b6 	sub.w	r0, r3, #364	; 0x16c
 8002fc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002fc6:	6809      	ldr	r1, [r1, #0]
 8002fc8:	6800      	ldr	r0, [r0, #0]
 8002fca:	f7ff fd4d 	bl	8002a68 <appResponse>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	e11c      	b.n	800320c <processMessageByCommand+0x6b8>
    }

		case '2': //Unsubscribe
    {
		char requestId[REQUEST_ID_LEN+1] = {0};
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002fd8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	f8c3 2007 	str.w	r2, [r3, #7]
		int responseCode = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		bool unsubscribeSuccess = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167

		if (sscanf(message, "%s", requestId) != 1)
 8002ff2:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8002ff6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002ffa:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ffe:	4987      	ldr	r1, [pc, #540]	; (800321c <processMessageByCommand+0x6c8>)
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	f007 f863 	bl	800a0cc <siscanf>
 8003006:	4603      	mov	r3, r0
 8003008:	2b01      	cmp	r3, #1
 800300a:	d001      	beq.n	8003010 <processMessageByCommand+0x4bc>
			return 0;
 800300c:	2300      	movs	r3, #0
 800300e:	e0fd      	b.n	800320c <processMessageByCommand+0x6b8>

		unsubscribeSuccess = unsubscribe(device, address);
 8003010:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003014:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8003018:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800301c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003020:	6811      	ldr	r1, [r2, #0]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	f7ff f829 	bl	800207a <unsubscribe>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167

		responseCode = unsubscribeSuccess ? 21 : 20;
 800302e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <processMessageByCommand+0x4e6>
 8003036:	2315      	movs	r3, #21
 8003038:	e000      	b.n	800303c <processMessageByCommand+0x4e8>
 800303a:	2314      	movs	r3, #20
 800303c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		return appResponse(device,address,requestId,responseCode);
 8003040:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8003044:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003048:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 800304c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003050:	f5a3 70b6 	sub.w	r0, r3, #364	; 0x16c
 8003054:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003058:	6809      	ldr	r1, [r1, #0]
 800305a:	6800      	ldr	r0, [r0, #0]
 800305c:	f7ff fd04 	bl	8002a68 <appResponse>
 8003060:	4603      	mov	r3, r0
 8003062:	e0d3      	b.n	800320c <processMessageByCommand+0x6b8>
    }

	case '1': //Subscribe
	{
		char requestId[REQUEST_ID_LEN+1] = {0};
 8003064:	2300      	movs	r3, #0
 8003066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800306a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	f8c3 2007 	str.w	r2, [r3, #7]
		int responseCode = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        float circle[3] = { 0,0,0 };
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		int subscribeSuccess = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

		if (sscanf(message, "%s,%f,%f,%f", requestId, &circle[0], &circle[1], &circle[2]) != 4)
 800309c:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80030a0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80030a4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80030a8:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 80030ac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030b0:	3308      	adds	r3, #8
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030b8:	3304      	adds	r3, #4
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	460b      	mov	r3, r1
 80030be:	4958      	ldr	r1, [pc, #352]	; (8003220 <processMessageByCommand+0x6cc>)
 80030c0:	6800      	ldr	r0, [r0, #0]
 80030c2:	f007 f803 	bl	800a0cc <siscanf>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d001      	beq.n	80030d0 <processMessageByCommand+0x57c>
			return 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e09d      	b.n	800320c <processMessageByCommand+0x6b8>
		if (!( validNum(circle[0], LATITUDE_MIN, LATITUDE_MAX) && validNum(circle[1], LONGITUDE_MIN, LONGITUDE_MAX) && validNum(circle[2], RADIUS_MIN, RADIUS_MAX)))
 80030d0:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80030d4:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8003224 <processMessageByCommand+0x6d0>
 80030d8:	eddf 0a53 	vldr	s1, [pc, #332]	; 8003228 <processMessageByCommand+0x6d4>
 80030dc:	eeb0 0a67 	vmov.f32	s0, s15
 80030e0:	f7ff fc9d 	bl	8002a1e <validNum>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f083 0301 	eor.w	r3, r3, #1
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d11f      	bne.n	8003130 <processMessageByCommand+0x5dc>
 80030f0:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80030f4:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 800322c <processMessageByCommand+0x6d8>
 80030f8:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8003230 <processMessageByCommand+0x6dc>
 80030fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003100:	f7ff fc8d 	bl	8002a1e <validNum>
 8003104:	4603      	mov	r3, r0
 8003106:	f083 0301 	eor.w	r3, r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10f      	bne.n	8003130 <processMessageByCommand+0x5dc>
 8003110:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003114:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8003234 <processMessageByCommand+0x6e0>
 8003118:	eddf 0a47 	vldr	s1, [pc, #284]	; 8003238 <processMessageByCommand+0x6e4>
 800311c:	eeb0 0a67 	vmov.f32	s0, s15
 8003120:	f7ff fc7d 	bl	8002a1e <validNum>
 8003124:	4603      	mov	r3, r0
 8003126:	f083 0301 	eor.w	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <processMessageByCommand+0x5e0>
			return 0;
 8003130:	2300      	movs	r3, #0
 8003132:	e06b      	b.n	800320c <processMessageByCommand+0x6b8>

        struct Subscriber newSubscriber = { "", 0, { circle[0], circle[1], circle[2] } }; //Create element based on message
 8003134:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003138:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	3304      	adds	r3, #4
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	731a      	strb	r2, [r3, #12]
 800314c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003150:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003154:	2200      	movs	r2, #0
 8003156:	615a      	str	r2, [r3, #20]
 8003158:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800315c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003160:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003164:	619a      	str	r2, [r3, #24]
 8003166:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800316a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800316e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003172:	61da      	str	r2, [r3, #28]
 8003174:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003178:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800317c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003180:	621a      	str	r2, [r3, #32]
        strncpy(newSubscriber.address, address, strlen(address)); //Fill element based on message
 8003182:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003186:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	f7fd f832 	bl	80001f4 <strlen>
 8003190:	4602      	mov	r2, r0
 8003192:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003196:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800319a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	f007 fd6a 	bl	800ac78 <strncpy>
        subscribeSuccess = subscribe(device, &newSubscriber);
 80031a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031a8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80031ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031b0:	4611      	mov	r1, r2
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	f7fe fef7 	bl	8001fa6 <subscribe>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

        responseCode =  subscribeSuccess ? 11 : (device->count<MAX_PHONES ? 10 : 12);
 80031be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10c      	bne.n	80031e0 <processMessageByCommand+0x68c>
 80031c6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80031ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80031d4:	2b09      	cmp	r3, #9
 80031d6:	dc01      	bgt.n	80031dc <processMessageByCommand+0x688>
 80031d8:	230a      	movs	r3, #10
 80031da:	e002      	b.n	80031e2 <processMessageByCommand+0x68e>
 80031dc:	230c      	movs	r3, #12
 80031de:	e000      	b.n	80031e2 <processMessageByCommand+0x68e>
 80031e0:	230b      	movs	r3, #11
 80031e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        return appResponse(device,address,requestId,responseCode);
 80031e6:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80031ea:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80031ee:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 80031f2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80031f6:	f5a3 70b6 	sub.w	r0, r3, #364	; 0x16c
 80031fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80031fe:	6809      	ldr	r1, [r1, #0]
 8003200:	6800      	ldr	r0, [r0, #0]
 8003202:	f7ff fc31 	bl	8002a68 <appResponse>
 8003206:	4603      	mov	r3, r0
 8003208:	e000      	b.n	800320c <processMessageByCommand+0x6b8>
		return appResponse(device,address,requestTime,responseCode);

    }
    */
    default:
        return 0;
 800320a:	2300      	movs	r3, #0
    }
}
 800320c:	4618      	mov	r0, r3
 800320e:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8003212:	46bd      	mov	sp, r7
 8003214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003218:	0800f934 	.word	0x0800f934
 800321c:	0800f94c 	.word	0x0800f94c
 8003220:	0800f950 	.word	0x0800f950
 8003224:	42b40000 	.word	0x42b40000
 8003228:	c2b40000 	.word	0xc2b40000
 800322c:	43340000 	.word	0x43340000
 8003230:	c3340000 	.word	0xc3340000
 8003234:	4ac26d70 	.word	0x4ac26d70
 8003238:	42480000 	.word	0x42480000

0800323c <processMessage>:

bool processMessage(const char* message, const char* address, struct Device* device) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]

    char prefixStr[MAX_ICCID_LEN + 2] = ""; //+2 for ",\0"
 8003248:	2300      	movs	r3, #0
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
    sprintf(prefixStr, "%s,", device->iccid);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f503 72c0 	add.w	r2, r3, #384	; 0x180
 8003262:	f107 0318 	add.w	r3, r7, #24
 8003266:	4921      	ldr	r1, [pc, #132]	; (80032ec <processMessage+0xb0>)
 8003268:	4618      	mov	r0, r3
 800326a:	f006 ff0f 	bl	800a08c <siprintf>

    if (!prefix(message, prefixStr)) {
 800326e:	f107 0318 	add.w	r3, r7, #24
 8003272:	4619      	mov	r1, r3
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff f893 	bl	80023a0 <prefix>
 800327a:	4603      	mov	r3, r0
 800327c:	f083 0301 	eor.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <processMessage+0x4e>
        return 0;
 8003286:	2300      	movs	r3, #0
 8003288:	e02b      	b.n	80032e2 <processMessage+0xa6>
    }
    message += strlen(prefixStr); //printf("%s\n", message);
 800328a:	f107 0318 	add.w	r3, r7, #24
 800328e:	4618      	mov	r0, r3
 8003290:	f7fc ffb0 	bl	80001f4 <strlen>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]

    char command[3] = { 0 };
 800329c:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <processMessage+0xb4>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	82bb      	strh	r3, [r7, #20]
 80032a2:	2300      	movs	r3, #0
 80032a4:	75bb      	strb	r3, [r7, #22]
    strncpy(command, message, 2);
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	2202      	movs	r2, #2
 80032ac:	68f9      	ldr	r1, [r7, #12]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f007 fce2 	bl	800ac78 <strncpy>
    if (!((command[0] != 0 && command[1] == 0) || (command[0] != 0 && command[1] == ',')))
 80032b4:	7d3b      	ldrb	r3, [r7, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <processMessage+0x84>
 80032ba:	7d7b      	ldrb	r3, [r7, #21]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <processMessage+0x94>
 80032c0:	7d3b      	ldrb	r3, [r7, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <processMessage+0x90>
 80032c6:	7d7b      	ldrb	r3, [r7, #21]
 80032c8:	2b2c      	cmp	r3, #44	; 0x2c
 80032ca:	d001      	beq.n	80032d0 <processMessage+0x94>
    {
        return 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e008      	b.n	80032e2 <processMessage+0xa6>
    }

    return processMessageByCommand(message + 2, address, device, &command[0]);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1c98      	adds	r0, r3, #2
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	f7ff fc3a 	bl	8002b54 <processMessageByCommand>
 80032e0:	4603      	mov	r3, r0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3730      	adds	r7, #48	; 0x30
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	0800f95c 	.word	0x0800f95c
 80032f0:	0800f960 	.word	0x0800f960

080032f4 <handleMessages>:

void handleMessages(struct Device* device) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b0b8      	sub	sp, #224	; 0xe0
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	6078      	str	r0, [r7, #4]

    char body[MAX_SMS_SIZE] = { 0 }; //sms body
 80032fc:	2300      	movs	r3, #0
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003304:	229c      	movs	r2, #156	; 0x9c
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f005 fca1 	bl	8008c50 <memset>
    char address[MAX_PHONE_LEN + 1] = { 0 }; //sms sender
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	f107 0318 	add.w	r3, r7, #24
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	731a      	strb	r2, [r3, #12]
    char index[MAX_INDEX_LEN + 1] = { 0 }; //sms index
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	2300      	movs	r3, #0
 8003326:	823b      	strh	r3, [r7, #16]

    uint16_t storedCount = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	817b      	strh	r3, [r7, #10]
    if (!readStoredCount1(&storedCount))
 800332c:	f107 030a 	add.w	r3, r7, #10
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe f95b 	bl	80015ec <readStoredCount1>
 8003336:	4603      	mov	r3, r0
 8003338:	f083 0301 	eor.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 8083 	bne.w	800344a <handleMessages+0x156>
       return;

    if ( storedCount < 1 ) //exit if no messages
 8003344:	897b      	ldrh	r3, [r7, #10]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8081 	beq.w	800344e <handleMessages+0x15a>
    	return;

    if (storedCount > 128) //ram limits
 800334c:	897b      	ldrh	r3, [r7, #10]
 800334e:	2b80      	cmp	r3, #128	; 0x80
 8003350:	d901      	bls.n	8003356 <handleMessages+0x62>
    	storedCount=128;
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	817b      	strh	r3, [r7, #10]

    char* smsList = (char*)malloc(storedCount * MAX_CMGL_RECORD_SIZE);
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	461a      	mov	r2, r3
 800335a:	4613      	mov	r3, r2
 800335c:	019b      	lsls	r3, r3, #6
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4618      	mov	r0, r3
 8003364:	f005 fc56 	bl	8008c14 <malloc>
 8003368:	4603      	mov	r3, r0
 800336a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    //strcpy(smsList,"+CMGL: 0,\"REC UNREAD\",\"+27832729407\",,\"12/03/17,21:32:05+08\",145,46\r\n891004234814455936,a,50.446896,18.838770,50000\r\n+CMGL: 1,\"REC UNREAD\",\"+27832729407\",,\"12/03/17,21:32:30+08\",145,20\r\n891004234814455936,0\r\n+CMGL: 2,\"REC UNREAD\",\"+27832729407\",,\"12/03/17,21:32:58+08\",145,7\r\nTEXT123\r\n+CMGL: 3,\"REC UNREAD\",\"+27832729407\",,\"12/03/17,21:33:19+08\",145,8\r\nTEXT1234\r\n+CMGL: 4,\"REC UNREAD\",\"+27832729407\",,\"12/03/17,21:34:03+08\",145,9\r\nTEXT12345\r\n\r\nOK\r\n");
    if (!readSmsList(smsList, storedCount * MAX_CMGL_RECORD_SIZE)) {
 800336e:	897b      	ldrh	r3, [r7, #10]
 8003370:	461a      	mov	r2, r3
 8003372:	0192      	lsls	r2, r2, #6
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	b29b      	uxth	r3, r3
 800337a:	4619      	mov	r1, r3
 800337c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8003380:	f7fe f8a8 	bl	80014d4 <readSmsList>
 8003384:	4603      	mov	r3, r0
 8003386:	f083 0301 	eor.w	r3, r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d004      	beq.n	800339a <handleMessages+0xa6>
    	free(smsList);
 8003390:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8003394:	f005 fc46 	bl	8008c24 <free>
    	return;
 8003398:	e05a      	b.n	8003450 <handleMessages+0x15c>
    }

    uint16_t unreadCount = splitText(smsList+2);
 800339a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800339e:	3302      	adds	r3, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff f86b 	bl	800247c <splitText>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca

    char* msg = smsList+2;
 80033ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033b0:	3302      	adds	r3, #2
 80033b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    for (uint16_t i = 0; i < unreadCount; i++) {
 80033b6:	2300      	movs	r3, #0
 80033b8:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 80033bc:	e03a      	b.n	8003434 <handleMessages+0x140>

        //printf("[%d]%s", i, msg);
        getText(body, msg, MAX_SMS_SIZE, "\r\n", "");
 80033be:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80033c2:	4b25      	ldr	r3, [pc, #148]	; (8003458 <handleMessages+0x164>)
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	4b25      	ldr	r3, [pc, #148]	; (800345c <handleMessages+0x168>)
 80033c8:	22a0      	movs	r2, #160	; 0xa0
 80033ca:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80033ce:	f7fe f819 	bl	8001404 <getText>
        getText(address, msg, MAX_PHONE_LEN + 1, "UNREAD\",\"", "\"");
 80033d2:	f107 0014 	add.w	r0, r7, #20
 80033d6:	4b22      	ldr	r3, [pc, #136]	; (8003460 <handleMessages+0x16c>)
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <handleMessages+0x170>)
 80033dc:	2211      	movs	r2, #17
 80033de:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80033e2:	f7fe f80f 	bl	8001404 <getText>
        getText(index, msg, MAX_INDEX_LEN + 1, "+CMGL: ", ",");
 80033e6:	f107 000c 	add.w	r0, r7, #12
 80033ea:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <handleMessages+0x174>)
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	4b1f      	ldr	r3, [pc, #124]	; (800346c <handleMessages+0x178>)
 80033f0:	2206      	movs	r2, #6
 80033f2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80033f6:	f7fe f805 	bl	8001404 <getText>
        processMessage(body, address, device);
 80033fa:	f107 0114 	add.w	r1, r7, #20
 80033fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff19 	bl	800323c <processMessage>
        deleteSms(index);  //
 800340a:	f107 030c 	add.w	r3, r7, #12
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe f878 	bl	8001504 <deleteSms>

        msg += strlen(msg) + 2;
 8003414:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003418:	f7fc feec 	bl	80001f4 <strlen>
 800341c:	4603      	mov	r3, r0
 800341e:	3302      	adds	r3, #2
 8003420:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003424:	4413      	add	r3, r2
 8003426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    for (uint16_t i = 0; i < unreadCount; i++) {
 800342a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800342e:	3301      	adds	r3, #1
 8003430:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8003434:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8003438:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800343c:	429a      	cmp	r2, r3
 800343e:	d3be      	bcc.n	80033be <handleMessages+0xca>
    }

    free(smsList);
 8003440:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8003444:	f005 fbee 	bl	8008c24 <free>
 8003448:	e002      	b.n	8003450 <handleMessages+0x15c>
       return;
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <handleMessages+0x15c>
    	return;
 800344e:	bf00      	nop
}
 8003450:	37d8      	adds	r7, #216	; 0xd8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	0800f964 	.word	0x0800f964
 800345c:	0800f760 	.word	0x0800f760
 8003460:	0800f974 	.word	0x0800f974
 8003464:	0800f968 	.word	0x0800f968
 8003468:	0800f980 	.word	0x0800f980
 800346c:	0800f978 	.word	0x0800f978

08003470 <serviceCycle>:

void serviceCycle(struct Device* device) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

	if (!waitConnect(5))
 8003478:	2005      	movs	r0, #5
 800347a:	f7fd ff9f 	bl	80013bc <waitConnect>
 800347e:	4603      	mov	r3, r0
 8003480:	f083 0301 	eor.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d15d      	bne.n	8003546 <serviceCycle+0xd6>
		return;

	sendAtCommand("ATE0\r",2000,"OK");
 800348a:	4a37      	ldr	r2, [pc, #220]	; (8003568 <serviceCycle+0xf8>)
 800348c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003490:	4836      	ldr	r0, [pc, #216]	; (800356c <serviceCycle+0xfc>)
 8003492:	f7fd fe97 	bl	80011c4 <sendAtCommand>

    if (!sendAtCommand("AT+CMGF=1\r",2000,"OK"))
 8003496:	4a34      	ldr	r2, [pc, #208]	; (8003568 <serviceCycle+0xf8>)
 8003498:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800349c:	4834      	ldr	r0, [pc, #208]	; (8003570 <serviceCycle+0x100>)
 800349e:	f7fd fe91 	bl	80011c4 <sendAtCommand>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f083 0301 	eor.w	r3, r3, #1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d14d      	bne.n	800354a <serviceCycle+0xda>
        return;

    if (!sendAtCommand("AT+CSDH=1\r",2000,"OK"))
 80034ae:	4a2e      	ldr	r2, [pc, #184]	; (8003568 <serviceCycle+0xf8>)
 80034b0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80034b4:	482f      	ldr	r0, [pc, #188]	; (8003574 <serviceCycle+0x104>)
 80034b6:	f7fd fe85 	bl	80011c4 <sendAtCommand>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f083 0301 	eor.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d143      	bne.n	800354e <serviceCycle+0xde>
        return;

    if (!sendAtCommand("AT+CNMI=2,0,0,0,0\r",2000,"OK"))
 80034c6:	4a28      	ldr	r2, [pc, #160]	; (8003568 <serviceCycle+0xf8>)
 80034c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80034cc:	482a      	ldr	r0, [pc, #168]	; (8003578 <serviceCycle+0x108>)
 80034ce:	f7fd fe79 	bl	80011c4 <sendAtCommand>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f083 0301 	eor.w	r3, r3, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d139      	bne.n	8003552 <serviceCycle+0xe2>
    	return;

    if (!sendAtCommand("AT+CPMS=\"SM\",\"ME\",\"SM\"\r",5000,"OK"))
 80034de:	4a22      	ldr	r2, [pc, #136]	; (8003568 <serviceCycle+0xf8>)
 80034e0:	f241 3188 	movw	r1, #5000	; 0x1388
 80034e4:	4825      	ldr	r0, [pc, #148]	; (800357c <serviceCycle+0x10c>)
 80034e6:	f7fd fe6d 	bl	80011c4 <sendAtCommand>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f083 0301 	eor.w	r3, r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d12f      	bne.n	8003556 <serviceCycle+0xe6>
    	return;

    if (!handleReadFile(device))
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fcc6 	bl	8001e88 <handleReadFile>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f083 0301 	eor.w	r3, r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d128      	bne.n	800355a <serviceCycle+0xea>
        return;

    if (gpsPositioning(device,90000)) {
 8003508:	491d      	ldr	r1, [pc, #116]	; (8003580 <serviceCycle+0x110>)
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fe feb2 	bl	8002274 <gpsPositioning>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <serviceCycle+0xb2>
        handleWriteFile(device);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fe fce9 	bl	8001eee <handleWriteFile>
        handleNotifications(device);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fa55 	bl	80029cc <handleNotifications>
   }

    if (!setIccid(device->iccid))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fae1 	bl	8001af0 <setIccid>
 800352e:	4603      	mov	r3, r0
 8003530:	f083 0301 	eor.w	r3, r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d111      	bne.n	800355e <serviceCycle+0xee>
    	return;

    handleMessages(device);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff feda 	bl	80032f4 <handleMessages>

    sendStoredSms();
 8003540:	f7fe f8cc 	bl	80016dc <sendStoredSms>
 8003544:	e00c      	b.n	8003560 <serviceCycle+0xf0>
		return;
 8003546:	bf00      	nop
 8003548:	e00a      	b.n	8003560 <serviceCycle+0xf0>
        return;
 800354a:	bf00      	nop
 800354c:	e008      	b.n	8003560 <serviceCycle+0xf0>
        return;
 800354e:	bf00      	nop
 8003550:	e006      	b.n	8003560 <serviceCycle+0xf0>
    	return;
 8003552:	bf00      	nop
 8003554:	e004      	b.n	8003560 <serviceCycle+0xf0>
    	return;
 8003556:	bf00      	nop
 8003558:	e002      	b.n	8003560 <serviceCycle+0xf0>
        return;
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <serviceCycle+0xf0>
    	return;
 800355e:	bf00      	nop

}
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	0800f548 	.word	0x0800f548
 800356c:	0800f984 	.word	0x0800f984
 8003570:	0800f98c 	.word	0x0800f98c
 8003574:	0800f998 	.word	0x0800f998
 8003578:	0800f9a4 	.word	0x0800f9a4
 800357c:	0800f9b8 	.word	0x0800f9b8
 8003580:	00015f90 	.word	0x00015f90

08003584 <enterSleep>:

void enterSleep(const int* interval) {
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
	/* Set STOP/LOWPOWER mode */
    HAL_SuspendTick();
 800358c:	f000 fbe2 	bl	8003d54 <HAL_SuspendTick>
    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, *interval , RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2204      	movs	r2, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4808      	ldr	r0, [pc, #32]	; (80035bc <enterSleep+0x38>)
 800359a:	f002 fa3b 	bl	8005a14 <HAL_RTCEx_SetWakeUpTimer_IT>
    /* Enter STOP/LOWPOWER mode */
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800359e:	2101      	movs	r1, #1
 80035a0:	2001      	movs	r0, #1
 80035a2:	f001 fa8f 	bl	8004ac4 <HAL_PWR_EnterSTOPMode>
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80035a6:	4805      	ldr	r0, [pc, #20]	; (80035bc <enterSleep+0x38>)
 80035a8:	f002 faf4 	bl	8005b94 <HAL_RTCEx_DeactivateWakeUpTimer>
    SystemClock_Config();
 80035ac:	f000 f836 	bl	800361c <SystemClock_Config>
    HAL_ResumeTick();
 80035b0:	f000 fbe0 	bl	8003d74 <HAL_ResumeTick>
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000260 	.word	0x20000260

080035c0 <workCycle>:

void workCycle() {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b0e6      	sub	sp, #408	; 0x198
 80035c4:	af00      	add	r7, sp, #0

	struct Device device = {0}; //struct Device device = { {52,19}, 1672527600, 120, { 0 } , 0 , {0} };
 80035c6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80035ca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80035ce:	4618      	mov	r0, r3
 80035d0:	f44f 73cc 	mov.w	r3, #408	; 0x198
 80035d4:	461a      	mov	r2, r3
 80035d6:	2100      	movs	r1, #0
 80035d8:	f005 fb3a 	bl	8008c50 <memset>

	serviceCycle(&device);
 80035dc:	463b      	mov	r3, r7
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff ff46 	bl	8003470 <serviceCycle>

	enterSleep(&(device.interval));
 80035e4:	463b      	mov	r3, r7
 80035e6:	3310      	adds	r3, #16
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ffcb 	bl	8003584 <enterSleep>

}
 80035ee:	bf00      	nop
 80035f0:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035fc:	f000 fb14 	bl	8003c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003600:	f000 f80c 	bl	800361c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003604:	f000 f924 	bl	8003850 <MX_GPIO_Init>
  MX_DMA_Init();
 8003608:	f000 f902 	bl	8003810 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800360c:	f000 f8d6 	bl	80037bc <MX_USART1_UART_Init>
  MX_RTC_Init();
 8003610:	f000 f870 	bl	80036f4 <MX_RTC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //loop
	  workCycle();
 8003614:	f7ff ffd4 	bl	80035c0 <workCycle>
 8003618:	e7fc      	b.n	8003614 <main+0x1c>
	...

0800361c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b094      	sub	sp, #80	; 0x50
 8003620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003622:	f107 0320 	add.w	r3, r7, #32
 8003626:	2230      	movs	r2, #48	; 0x30
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f005 fb10 	bl	8008c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003630:	f107 030c 	add.w	r3, r7, #12
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	4b29      	ldr	r3, [pc, #164]	; (80036ec <SystemClock_Config+0xd0>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4a28      	ldr	r2, [pc, #160]	; (80036ec <SystemClock_Config+0xd0>)
 800364a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364e:	6413      	str	r3, [r2, #64]	; 0x40
 8003650:	4b26      	ldr	r3, [pc, #152]	; (80036ec <SystemClock_Config+0xd0>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800365c:	2300      	movs	r3, #0
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <SystemClock_Config+0xd4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003668:	4a21      	ldr	r2, [pc, #132]	; (80036f0 <SystemClock_Config+0xd4>)
 800366a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <SystemClock_Config+0xd4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800367c:	230a      	movs	r3, #10
 800367e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003680:	2301      	movs	r3, #1
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003684:	2310      	movs	r3, #16
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003688:	2301      	movs	r3, #1
 800368a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800368c:	2302      	movs	r3, #2
 800368e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003690:	2300      	movs	r3, #0
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003694:	2308      	movs	r3, #8
 8003696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003698:	2350      	movs	r3, #80	; 0x50
 800369a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800369c:	2302      	movs	r3, #2
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80036a0:	2304      	movs	r3, #4
 80036a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a4:	f107 0320 	add.w	r3, r7, #32
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 fa37 	bl	8004b1c <HAL_RCC_OscConfig>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80036b4:	f000 f950 	bl	8003958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036b8:	230f      	movs	r3, #15
 80036ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036bc:	2302      	movs	r3, #2
 80036be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80036c0:	2390      	movs	r3, #144	; 0x90
 80036c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80036ce:	f107 030c 	add.w	r3, r7, #12
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 fc99 	bl	800500c <HAL_RCC_ClockConfig>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80036e0:	f000 f93a 	bl	8003958 <Error_Handler>
  }
}
 80036e4:	bf00      	nop
 80036e6:	3750      	adds	r7, #80	; 0x50
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40007000 	.word	0x40007000

080036f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003708:	2300      	movs	r3, #0
 800370a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800370c:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <MX_RTC_Init+0xc0>)
 800370e:	4a2a      	ldr	r2, [pc, #168]	; (80037b8 <MX_RTC_Init+0xc4>)
 8003710:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <MX_RTC_Init+0xc0>)
 8003714:	2200      	movs	r2, #0
 8003716:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <MX_RTC_Init+0xc0>)
 800371a:	227f      	movs	r2, #127	; 0x7f
 800371c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800371e:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <MX_RTC_Init+0xc0>)
 8003720:	22ff      	movs	r2, #255	; 0xff
 8003722:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003724:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <MX_RTC_Init+0xc0>)
 8003726:	2200      	movs	r2, #0
 8003728:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <MX_RTC_Init+0xc0>)
 800372c:	2200      	movs	r2, #0
 800372e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003730:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <MX_RTC_Init+0xc0>)
 8003732:	2200      	movs	r2, #0
 8003734:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003736:	481f      	ldr	r0, [pc, #124]	; (80037b4 <MX_RTC_Init+0xc0>)
 8003738:	f001 ff36 	bl	80055a8 <HAL_RTC_Init>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003742:	f000 f909 	bl	8003958 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003746:	2300      	movs	r3, #0
 8003748:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800374a:	2300      	movs	r3, #0
 800374c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800374e:	2300      	movs	r3, #0
 8003750:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	2201      	movs	r2, #1
 800375e:	4619      	mov	r1, r3
 8003760:	4814      	ldr	r0, [pc, #80]	; (80037b4 <MX_RTC_Init+0xc0>)
 8003762:	f001 ff97 	bl	8005694 <HAL_RTC_SetTime>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800376c:	f000 f8f4 	bl	8003958 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003770:	2301      	movs	r3, #1
 8003772:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003774:	2301      	movs	r3, #1
 8003776:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003778:	2301      	movs	r3, #1
 800377a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800377c:	2300      	movs	r3, #0
 800377e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003780:	463b      	mov	r3, r7
 8003782:	2201      	movs	r2, #1
 8003784:	4619      	mov	r1, r3
 8003786:	480b      	ldr	r0, [pc, #44]	; (80037b4 <MX_RTC_Init+0xc0>)
 8003788:	f002 f81e 	bl	80057c8 <HAL_RTC_SetDate>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003792:	f000 f8e1 	bl	8003958 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 300, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003796:	2204      	movs	r2, #4
 8003798:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800379c:	4805      	ldr	r0, [pc, #20]	; (80037b4 <MX_RTC_Init+0xc0>)
 800379e:	f002 f939 	bl	8005a14 <HAL_RTCEx_SetWakeUpTimer_IT>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80037a8:	f000 f8d6 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80037ac:	bf00      	nop
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000260 	.word	0x20000260
 80037b8:	40002800 	.word	0x40002800

080037bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <MX_USART1_UART_Init+0x4c>)
 80037c2:	4a12      	ldr	r2, [pc, #72]	; (800380c <MX_USART1_UART_Init+0x50>)
 80037c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037c6:	4b10      	ldr	r3, [pc, #64]	; (8003808 <MX_USART1_UART_Init+0x4c>)
 80037c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <MX_USART1_UART_Init+0x4c>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <MX_USART1_UART_Init+0x4c>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <MX_USART1_UART_Init+0x4c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037e0:	4b09      	ldr	r3, [pc, #36]	; (8003808 <MX_USART1_UART_Init+0x4c>)
 80037e2:	220c      	movs	r2, #12
 80037e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <MX_USART1_UART_Init+0x4c>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <MX_USART1_UART_Init+0x4c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037f2:	4805      	ldr	r0, [pc, #20]	; (8003808 <MX_USART1_UART_Init+0x4c>)
 80037f4:	f002 fa54 	bl	8005ca0 <HAL_UART_Init>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037fe:	f000 f8ab 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000280 	.word	0x20000280
 800380c:	40011000 	.word	0x40011000

08003810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	4b0c      	ldr	r3, [pc, #48]	; (800384c <MX_DMA_Init+0x3c>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a0b      	ldr	r2, [pc, #44]	; (800384c <MX_DMA_Init+0x3c>)
 8003820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <MX_DMA_Init+0x3c>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003832:	2200      	movs	r2, #0
 8003834:	2100      	movs	r1, #0
 8003836:	203a      	movs	r0, #58	; 0x3a
 8003838:	f000 fb87 	bl	8003f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800383c:	203a      	movs	r0, #58	; 0x3a
 800383e:	f000 fba0 	bl	8003f82 <HAL_NVIC_EnableIRQ>

}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800

08003850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003856:	f107 0314 	add.w	r3, r7, #20
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	609a      	str	r2, [r3, #8]
 8003862:	60da      	str	r2, [r3, #12]
 8003864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <MX_GPIO_Init+0xf4>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a35      	ldr	r2, [pc, #212]	; (8003944 <MX_GPIO_Init+0xf4>)
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b33      	ldr	r3, [pc, #204]	; (8003944 <MX_GPIO_Init+0xf4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <MX_GPIO_Init+0xf4>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a2e      	ldr	r2, [pc, #184]	; (8003944 <MX_GPIO_Init+0xf4>)
 800388c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <MX_GPIO_Init+0xf4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	4b28      	ldr	r3, [pc, #160]	; (8003944 <MX_GPIO_Init+0xf4>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a27      	ldr	r2, [pc, #156]	; (8003944 <MX_GPIO_Init+0xf4>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b25      	ldr	r3, [pc, #148]	; (8003944 <MX_GPIO_Init+0xf4>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	4b21      	ldr	r3, [pc, #132]	; (8003944 <MX_GPIO_Init+0xf4>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a20      	ldr	r2, [pc, #128]	; (8003944 <MX_GPIO_Init+0xf4>)
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <MX_GPIO_Init+0xf4>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80038d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80038da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038dc:	2303      	movs	r3, #3
 80038de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	4619      	mov	r1, r3
 80038ea:	4817      	ldr	r0, [pc, #92]	; (8003948 <MX_GPIO_Init+0xf8>)
 80038ec:	f000 ff66 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038f0:	2303      	movs	r3, #3
 80038f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038f4:	2303      	movs	r3, #3
 80038f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	4619      	mov	r1, r3
 8003902:	4812      	ldr	r0, [pc, #72]	; (800394c <MX_GPIO_Init+0xfc>)
 8003904:	f000 ff5a 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003908:	f649 73ff 	movw	r3, #40959	; 0x9fff
 800390c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800390e:	2303      	movs	r3, #3
 8003910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003916:	f107 0314 	add.w	r3, r7, #20
 800391a:	4619      	mov	r1, r3
 800391c:	480c      	ldr	r0, [pc, #48]	; (8003950 <MX_GPIO_Init+0x100>)
 800391e:	f000 ff4d 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003922:	f24f 7337 	movw	r3, #63287	; 0xf737
 8003926:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003928:	2303      	movs	r3, #3
 800392a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	4619      	mov	r1, r3
 8003936:	4807      	ldr	r0, [pc, #28]	; (8003954 <MX_GPIO_Init+0x104>)
 8003938:	f000 ff40 	bl	80047bc <HAL_GPIO_Init>

}
 800393c:	bf00      	nop
 800393e:	3728      	adds	r7, #40	; 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	40020800 	.word	0x40020800
 800394c:	40021c00 	.word	0x40021c00
 8003950:	40020000 	.word	0x40020000
 8003954:	40020400 	.word	0x40020400

08003958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800395c:	b672      	cpsid	i
}
 800395e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003960:	e7fe      	b.n	8003960 <Error_Handler+0x8>
	...

08003964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <HAL_MspInit+0x4c>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <HAL_MspInit+0x4c>)
 8003974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003978:	6453      	str	r3, [r2, #68]	; 0x44
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_MspInit+0x4c>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_MspInit+0x4c>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <HAL_MspInit+0x4c>)
 8003990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_MspInit+0x4c>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40023800 	.word	0x40023800

080039b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a10      	ldr	r2, [pc, #64]	; (8003a14 <HAL_RTC_MspInit+0x60>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d119      	bne.n	8003a0a <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80039d6:	2302      	movs	r3, #2
 80039d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80039da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039de:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 fcf1 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80039f0:	f7ff ffb2 	bl	8003958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039f4:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_RTC_MspInit+0x64>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2100      	movs	r1, #0
 80039fe:	2003      	movs	r0, #3
 8003a00:	f000 faa3 	bl	8003f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003a04:	2003      	movs	r0, #3
 8003a06:	f000 fabc 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a0a:	bf00      	nop
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40002800 	.word	0x40002800
 8003a18:	42470e3c 	.word	0x42470e3c

08003a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a34      	ldr	r2, [pc, #208]	; (8003b0c <HAL_UART_MspInit+0xf0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d161      	bne.n	8003b02 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	4b33      	ldr	r3, [pc, #204]	; (8003b10 <HAL_UART_MspInit+0xf4>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	4a32      	ldr	r2, [pc, #200]	; (8003b10 <HAL_UART_MspInit+0xf4>)
 8003a48:	f043 0310 	orr.w	r3, r3, #16
 8003a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a4e:	4b30      	ldr	r3, [pc, #192]	; (8003b10 <HAL_UART_MspInit+0xf4>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	4b2c      	ldr	r3, [pc, #176]	; (8003b10 <HAL_UART_MspInit+0xf4>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	4a2b      	ldr	r2, [pc, #172]	; (8003b10 <HAL_UART_MspInit+0xf4>)
 8003a64:	f043 0302 	orr.w	r3, r3, #2
 8003a68:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6a:	4b29      	ldr	r3, [pc, #164]	; (8003b10 <HAL_UART_MspInit+0xf4>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a76:	23c0      	movs	r3, #192	; 0xc0
 8003a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a82:	2300      	movs	r3, #0
 8003a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a86:	2307      	movs	r3, #7
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8a:	f107 0314 	add.w	r3, r7, #20
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4820      	ldr	r0, [pc, #128]	; (8003b14 <HAL_UART_MspInit+0xf8>)
 8003a92:	f000 fe93 	bl	80047bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003a96:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003a98:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <HAL_UART_MspInit+0x100>)
 8003a9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003a9c:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aa2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aa4:	4b1c      	ldr	r3, [pc, #112]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aaa:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ab8:	4b17      	ldr	r3, [pc, #92]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003ac4:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003aca:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ad6:	4810      	ldr	r0, [pc, #64]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003ad8:	f000 fa6e 	bl	8003fb8 <HAL_DMA_Init>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003ae2:	f7ff ff39 	bl	8003958 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_UART_MspInit+0xfc>)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2100      	movs	r1, #0
 8003af6:	2025      	movs	r0, #37	; 0x25
 8003af8:	f000 fa27 	bl	8003f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003afc:	2025      	movs	r0, #37	; 0x25
 8003afe:	f000 fa40 	bl	8003f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003b02:	bf00      	nop
 8003b04:	3728      	adds	r7, #40	; 0x28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40011000 	.word	0x40011000
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40020400 	.word	0x40020400
 8003b18:	200002c4 	.word	0x200002c4
 8003b1c:	40026440 	.word	0x40026440

08003b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b24:	e7fe      	b.n	8003b24 <NMI_Handler+0x4>

08003b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2a:	e7fe      	b.n	8003b2a <HardFault_Handler+0x4>

08003b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b30:	e7fe      	b.n	8003b30 <MemManage_Handler+0x4>

08003b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b36:	e7fe      	b.n	8003b36 <BusFault_Handler+0x4>

08003b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <UsageFault_Handler+0x4>

08003b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b6c:	f000 f8ae 	bl	8003ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003b78:	4802      	ldr	r0, [pc, #8]	; (8003b84 <RTC_WKUP_IRQHandler+0x10>)
 8003b7a:	f002 f863 	bl	8005c44 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000260 	.word	0x20000260

08003b88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b8c:	4802      	ldr	r0, [pc, #8]	; (8003b98 <USART1_IRQHandler+0x10>)
 8003b8e:	f002 fa4b 	bl	8006028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000280 	.word	0x20000280

08003b9c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ba0:	4802      	ldr	r0, [pc, #8]	; (8003bac <DMA2_Stream2_IRQHandler+0x10>)
 8003ba2:	f000 fba1 	bl	80042e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200002c4 	.word	0x200002c4

08003bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <SystemInit+0x20>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	4a05      	ldr	r2, [pc, #20]	; (8003bd0 <SystemInit+0x20>)
 8003bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bd8:	480d      	ldr	r0, [pc, #52]	; (8003c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bda:	490e      	ldr	r1, [pc, #56]	; (8003c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bdc:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003be0:	e002      	b.n	8003be8 <LoopCopyDataInit>

08003be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003be6:	3304      	adds	r3, #4

08003be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bec:	d3f9      	bcc.n	8003be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bee:	4a0b      	ldr	r2, [pc, #44]	; (8003c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bf0:	4c0b      	ldr	r4, [pc, #44]	; (8003c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bf4:	e001      	b.n	8003bfa <LoopFillZerobss>

08003bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bf8:	3204      	adds	r2, #4

08003bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bfc:	d3fb      	bcc.n	8003bf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bfe:	f7ff ffd7 	bl	8003bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c02:	f004 fed1 	bl	80089a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c06:	f7ff fcf7 	bl	80035f8 <main>
  bx  lr    
 8003c0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c14:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8003c18:	08010478 	.word	0x08010478
  ldr r2, =_sbss
 8003c1c:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8003c20:	2000036c 	.word	0x2000036c

08003c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c24:	e7fe      	b.n	8003c24 <ADC_IRQHandler>
	...

08003c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <HAL_Init+0x40>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0d      	ldr	r2, [pc, #52]	; (8003c68 <HAL_Init+0x40>)
 8003c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_Init+0x40>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <HAL_Init+0x40>)
 8003c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c44:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <HAL_Init+0x40>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <HAL_Init+0x40>)
 8003c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c50:	2003      	movs	r0, #3
 8003c52:	f000 f96f 	bl	8003f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c56:	200f      	movs	r0, #15
 8003c58:	f000 f808 	bl	8003c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c5c:	f7ff fe82 	bl	8003964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40023c00 	.word	0x40023c00

08003c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_InitTick+0x54>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <HAL_InitTick+0x58>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f987 	bl	8003f9e <HAL_SYSTICK_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e00e      	b.n	8003cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b0f      	cmp	r3, #15
 8003c9e:	d80a      	bhi.n	8003cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	f000 f94f 	bl	8003f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cac:	4a06      	ldr	r2, [pc, #24]	; (8003cc8 <HAL_InitTick+0x5c>)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e000      	b.n	8003cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	20000008 	.word	0x20000008
 8003cc8:	20000004 	.word	0x20000004

08003ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_IncTick+0x20>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_IncTick+0x24>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4413      	add	r3, r2
 8003cdc:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <HAL_IncTick+0x24>)
 8003cde:	6013      	str	r3, [r2, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000008 	.word	0x20000008
 8003cf0:	20000328 	.word	0x20000328

08003cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_GetTick+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000328 	.word	0x20000328

08003d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d14:	f7ff ffee 	bl	8003cf4 <HAL_GetTick>
 8003d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d005      	beq.n	8003d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d26:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <HAL_Delay+0x44>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d32:	bf00      	nop
 8003d34:	f7ff ffde 	bl	8003cf4 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d8f7      	bhi.n	8003d34 <HAL_Delay+0x28>
  {
  }
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000008 	.word	0x20000008

08003d54 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_SuspendTick+0x1c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <HAL_SuspendTick+0x1c>)
 8003d5e:	f023 0302 	bic.w	r3, r3, #2
 8003d62:	6013      	str	r3, [r2, #0]
}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	e000e010 	.word	0xe000e010

08003d74 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_ResumeTick+0x1c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <HAL_ResumeTick+0x1c>)
 8003d7e:	f043 0302 	orr.w	r3, r3, #2
 8003d82:	6013      	str	r3, [r2, #0]
}
 8003d84:	bf00      	nop
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e010 	.word	0xe000e010

08003d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003db0:	4013      	ands	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dc6:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	60d3      	str	r3, [r2, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <__NVIC_GetPriorityGrouping+0x18>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	f003 0307 	and.w	r3, r3, #7
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	db0b      	blt.n	8003e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	f003 021f 	and.w	r2, r3, #31
 8003e10:	4907      	ldr	r1, [pc, #28]	; (8003e30 <__NVIC_EnableIRQ+0x38>)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2001      	movs	r0, #1
 8003e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000e100 	.word	0xe000e100

08003e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	db0a      	blt.n	8003e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	490c      	ldr	r1, [pc, #48]	; (8003e80 <__NVIC_SetPriority+0x4c>)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	0112      	lsls	r2, r2, #4
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	440b      	add	r3, r1
 8003e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e5c:	e00a      	b.n	8003e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	4908      	ldr	r1, [pc, #32]	; (8003e84 <__NVIC_SetPriority+0x50>)
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	3b04      	subs	r3, #4
 8003e6c:	0112      	lsls	r2, r2, #4
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	440b      	add	r3, r1
 8003e72:	761a      	strb	r2, [r3, #24]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000e100 	.word	0xe000e100
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	; 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	bf28      	it	cs
 8003ea6:	2304      	movcs	r3, #4
 8003ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d902      	bls.n	8003eb8 <NVIC_EncodePriority+0x30>
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3b03      	subs	r3, #3
 8003eb6:	e000      	b.n	8003eba <NVIC_EncodePriority+0x32>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	401a      	ands	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eda:	43d9      	mvns	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	4313      	orrs	r3, r2
         );
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3724      	adds	r7, #36	; 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f00:	d301      	bcc.n	8003f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f02:	2301      	movs	r3, #1
 8003f04:	e00f      	b.n	8003f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <SysTick_Config+0x40>)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f0e:	210f      	movs	r1, #15
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295
 8003f14:	f7ff ff8e 	bl	8003e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <SysTick_Config+0x40>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f1e:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <SysTick_Config+0x40>)
 8003f20:	2207      	movs	r2, #7
 8003f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	e000e010 	.word	0xe000e010

08003f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff29 	bl	8003d94 <__NVIC_SetPriorityGrouping>
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	4603      	mov	r3, r0
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f5c:	f7ff ff3e 	bl	8003ddc <__NVIC_GetPriorityGrouping>
 8003f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff ff8e 	bl	8003e88 <NVIC_EncodePriority>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff5d 	bl	8003e34 <__NVIC_SetPriority>
}
 8003f7a:	bf00      	nop
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	4603      	mov	r3, r0
 8003f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff31 	bl	8003df8 <__NVIC_EnableIRQ>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ffa2 	bl	8003ef0 <SysTick_Config>
 8003fac:	4603      	mov	r3, r0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fc4:	f7ff fe96 	bl	8003cf4 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e099      	b.n	8004108 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ff4:	e00f      	b.n	8004016 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ff6:	f7ff fe7d 	bl	8003cf4 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b05      	cmp	r3, #5
 8004002:	d908      	bls.n	8004016 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2203      	movs	r2, #3
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e078      	b.n	8004108 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e8      	bne.n	8003ff6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4b38      	ldr	r3, [pc, #224]	; (8004110 <HAL_DMA_Init+0x158>)
 8004030:	4013      	ands	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004042:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800404e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800405a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	2b04      	cmp	r3, #4
 800406e:	d107      	bne.n	8004080 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	4313      	orrs	r3, r2
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0307 	bic.w	r3, r3, #7
 8004096:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d117      	bne.n	80040da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00e      	beq.n	80040da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fb01 	bl	80046c4 <DMA_CheckFifoParam>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2240      	movs	r2, #64	; 0x40
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040d6:	2301      	movs	r3, #1
 80040d8:	e016      	b.n	8004108 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fab8 	bl	8004658 <DMA_CalcBaseAndBitshift>
 80040e8:	4603      	mov	r3, r0
 80040ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	223f      	movs	r2, #63	; 0x3f
 80040f2:	409a      	lsls	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	f010803f 	.word	0xf010803f

08004114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_DMA_Start_IT+0x26>
 8004136:	2302      	movs	r3, #2
 8004138:	e040      	b.n	80041bc <HAL_DMA_Start_IT+0xa8>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d12f      	bne.n	80041ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fa4a 	bl	80045fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	223f      	movs	r2, #63	; 0x3f
 800416e:	409a      	lsls	r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0216 	orr.w	r2, r2, #22
 8004182:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0208 	orr.w	r2, r2, #8
 800419a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e005      	b.n	80041ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041b6:	2302      	movs	r3, #2
 80041b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041d2:	f7ff fd8f 	bl	8003cf4 <HAL_GetTick>
 80041d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d008      	beq.n	80041f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e052      	b.n	800429c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0216 	bic.w	r2, r2, #22
 8004204:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004214:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d103      	bne.n	8004226 <HAL_DMA_Abort+0x62>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0208 	bic.w	r2, r2, #8
 8004234:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004246:	e013      	b.n	8004270 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004248:	f7ff fd54 	bl	8003cf4 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b05      	cmp	r3, #5
 8004254:	d90c      	bls.n	8004270 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2203      	movs	r2, #3
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e015      	b.n	800429c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e4      	bne.n	8004248 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	223f      	movs	r2, #63	; 0x3f
 8004284:	409a      	lsls	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d004      	beq.n	80042c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2280      	movs	r2, #128	; 0x80
 80042bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e00c      	b.n	80042dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2205      	movs	r2, #5
 80042c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042f4:	4b8e      	ldr	r3, [pc, #568]	; (8004530 <HAL_DMA_IRQHandler+0x248>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a8e      	ldr	r2, [pc, #568]	; (8004534 <HAL_DMA_IRQHandler+0x24c>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	0a9b      	lsrs	r3, r3, #10
 8004300:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004312:	2208      	movs	r2, #8
 8004314:	409a      	lsls	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01a      	beq.n	8004354 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d013      	beq.n	8004354 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0204 	bic.w	r2, r2, #4
 800433a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	2208      	movs	r2, #8
 8004342:	409a      	lsls	r2, r3
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	f043 0201 	orr.w	r2, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	2201      	movs	r2, #1
 800435a:	409a      	lsls	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d012      	beq.n	800438a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004376:	2201      	movs	r2, #1
 8004378:	409a      	lsls	r2, r3
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f043 0202 	orr.w	r2, r3, #2
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438e:	2204      	movs	r2, #4
 8004390:	409a      	lsls	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d012      	beq.n	80043c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ac:	2204      	movs	r2, #4
 80043ae:	409a      	lsls	r2, r3
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	f043 0204 	orr.w	r2, r3, #4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c4:	2210      	movs	r2, #16
 80043c6:	409a      	lsls	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d043      	beq.n	8004458 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d03c      	beq.n	8004458 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e2:	2210      	movs	r2, #16
 80043e4:	409a      	lsls	r2, r3
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d018      	beq.n	800442a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d108      	bne.n	8004418 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d024      	beq.n	8004458 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
 8004416:	e01f      	b.n	8004458 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01b      	beq.n	8004458 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
 8004428:	e016      	b.n	8004458 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d107      	bne.n	8004448 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0208 	bic.w	r2, r2, #8
 8004446:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445c:	2220      	movs	r2, #32
 800445e:	409a      	lsls	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 808f 	beq.w	8004588 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8087 	beq.w	8004588 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447e:	2220      	movs	r2, #32
 8004480:	409a      	lsls	r2, r3
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b05      	cmp	r3, #5
 8004490:	d136      	bne.n	8004500 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0216 	bic.w	r2, r2, #22
 80044a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <HAL_DMA_IRQHandler+0x1da>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0208 	bic.w	r2, r2, #8
 80044d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d6:	223f      	movs	r2, #63	; 0x3f
 80044d8:	409a      	lsls	r2, r3
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d07e      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	4798      	blx	r3
        }
        return;
 80044fe:	e079      	b.n	80045f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01d      	beq.n	800454a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10d      	bne.n	8004538 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	2b00      	cmp	r3, #0
 8004522:	d031      	beq.n	8004588 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	4798      	blx	r3
 800452c:	e02c      	b.n	8004588 <HAL_DMA_IRQHandler+0x2a0>
 800452e:	bf00      	nop
 8004530:	20000000 	.word	0x20000000
 8004534:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d023      	beq.n	8004588 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3
 8004548:	e01e      	b.n	8004588 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10f      	bne.n	8004578 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0210 	bic.w	r2, r2, #16
 8004566:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	2b00      	cmp	r3, #0
 800458e:	d032      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d022      	beq.n	80045e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2205      	movs	r2, #5
 80045a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d307      	bcc.n	80045d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f2      	bne.n	80045b4 <HAL_DMA_IRQHandler+0x2cc>
 80045ce:	e000      	b.n	80045d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
 80045f2:	e000      	b.n	80045f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80045f4:	bf00      	nop
    }
  }
}
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004618:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b40      	cmp	r3, #64	; 0x40
 8004628:	d108      	bne.n	800463c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800463a:	e007      	b.n	800464c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	60da      	str	r2, [r3, #12]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	3b10      	subs	r3, #16
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <DMA_CalcBaseAndBitshift+0x64>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004672:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b03      	cmp	r3, #3
 8004684:	d909      	bls.n	800469a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	1d1a      	adds	r2, r3, #4
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	659a      	str	r2, [r3, #88]	; 0x58
 8004698:	e007      	b.n	80046aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	aaaaaaab 	.word	0xaaaaaaab
 80046c0:	0800f9f4 	.word	0x0800f9f4

080046c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d11f      	bne.n	800471e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d856      	bhi.n	8004792 <DMA_CheckFifoParam+0xce>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <DMA_CheckFifoParam+0x28>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	0800470f 	.word	0x0800470f
 80046f4:	080046fd 	.word	0x080046fd
 80046f8:	08004793 	.word	0x08004793
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d046      	beq.n	8004796 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470c:	e043      	b.n	8004796 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004716:	d140      	bne.n	800479a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471c:	e03d      	b.n	800479a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004726:	d121      	bne.n	800476c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b03      	cmp	r3, #3
 800472c:	d837      	bhi.n	800479e <DMA_CheckFifoParam+0xda>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <DMA_CheckFifoParam+0x70>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004745 	.word	0x08004745
 8004738:	0800474b 	.word	0x0800474b
 800473c:	08004745 	.word	0x08004745
 8004740:	0800475d 	.word	0x0800475d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      break;
 8004748:	e030      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d025      	beq.n	80047a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475a:	e022      	b.n	80047a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004764:	d11f      	bne.n	80047a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800476a:	e01c      	b.n	80047a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d903      	bls.n	800477a <DMA_CheckFifoParam+0xb6>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b03      	cmp	r3, #3
 8004776:	d003      	beq.n	8004780 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004778:	e018      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
      break;
 800477e:	e015      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
      break;
 8004790:	e00b      	b.n	80047aa <DMA_CheckFifoParam+0xe6>
      break;
 8004792:	bf00      	nop
 8004794:	e00a      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;
 8004796:	bf00      	nop
 8004798:	e008      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;
 800479a:	bf00      	nop
 800479c:	e006      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;
 800479e:	bf00      	nop
 80047a0:	e004      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;
 80047a2:	bf00      	nop
 80047a4:	e002      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;   
 80047a6:	bf00      	nop
 80047a8:	e000      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;
 80047aa:	bf00      	nop
    }
  } 
  
  return status; 
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop

080047bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047bc:	b480      	push	{r7}
 80047be:	b089      	sub	sp, #36	; 0x24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	e159      	b.n	8004a8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047d8:	2201      	movs	r2, #1
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4013      	ands	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	f040 8148 	bne.w	8004a86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d005      	beq.n	800480e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800480a:	2b02      	cmp	r3, #2
 800480c:	d130      	bne.n	8004870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	2203      	movs	r2, #3
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4313      	orrs	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004844:	2201      	movs	r2, #1
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 0201 	and.w	r2, r3, #1
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	2b03      	cmp	r3, #3
 800487a:	d017      	beq.n	80048ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2203      	movs	r2, #3
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d123      	bne.n	8004900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	08da      	lsrs	r2, r3, #3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3208      	adds	r2, #8
 80048c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	220f      	movs	r2, #15
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	08da      	lsrs	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3208      	adds	r2, #8
 80048fa:	69b9      	ldr	r1, [r7, #24]
 80048fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	2203      	movs	r2, #3
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 0203 	and.w	r2, r3, #3
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80a2 	beq.w	8004a86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	4b57      	ldr	r3, [pc, #348]	; (8004aa4 <HAL_GPIO_Init+0x2e8>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	4a56      	ldr	r2, [pc, #344]	; (8004aa4 <HAL_GPIO_Init+0x2e8>)
 800494c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004950:	6453      	str	r3, [r2, #68]	; 0x44
 8004952:	4b54      	ldr	r3, [pc, #336]	; (8004aa4 <HAL_GPIO_Init+0x2e8>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800495e:	4a52      	ldr	r2, [pc, #328]	; (8004aa8 <HAL_GPIO_Init+0x2ec>)
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	089b      	lsrs	r3, r3, #2
 8004964:	3302      	adds	r3, #2
 8004966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	220f      	movs	r2, #15
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a49      	ldr	r2, [pc, #292]	; (8004aac <HAL_GPIO_Init+0x2f0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d019      	beq.n	80049be <HAL_GPIO_Init+0x202>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a48      	ldr	r2, [pc, #288]	; (8004ab0 <HAL_GPIO_Init+0x2f4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_GPIO_Init+0x1fe>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a47      	ldr	r2, [pc, #284]	; (8004ab4 <HAL_GPIO_Init+0x2f8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00d      	beq.n	80049b6 <HAL_GPIO_Init+0x1fa>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a46      	ldr	r2, [pc, #280]	; (8004ab8 <HAL_GPIO_Init+0x2fc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d007      	beq.n	80049b2 <HAL_GPIO_Init+0x1f6>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a45      	ldr	r2, [pc, #276]	; (8004abc <HAL_GPIO_Init+0x300>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_GPIO_Init+0x1f2>
 80049aa:	2304      	movs	r3, #4
 80049ac:	e008      	b.n	80049c0 <HAL_GPIO_Init+0x204>
 80049ae:	2307      	movs	r3, #7
 80049b0:	e006      	b.n	80049c0 <HAL_GPIO_Init+0x204>
 80049b2:	2303      	movs	r3, #3
 80049b4:	e004      	b.n	80049c0 <HAL_GPIO_Init+0x204>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e002      	b.n	80049c0 <HAL_GPIO_Init+0x204>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <HAL_GPIO_Init+0x204>
 80049be:	2300      	movs	r3, #0
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	f002 0203 	and.w	r2, r2, #3
 80049c6:	0092      	lsls	r2, r2, #2
 80049c8:	4093      	lsls	r3, r2
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049d0:	4935      	ldr	r1, [pc, #212]	; (8004aa8 <HAL_GPIO_Init+0x2ec>)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	3302      	adds	r3, #2
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049de:	4b38      	ldr	r3, [pc, #224]	; (8004ac0 <HAL_GPIO_Init+0x304>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a02:	4a2f      	ldr	r2, [pc, #188]	; (8004ac0 <HAL_GPIO_Init+0x304>)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a08:	4b2d      	ldr	r3, [pc, #180]	; (8004ac0 <HAL_GPIO_Init+0x304>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a2c:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <HAL_GPIO_Init+0x304>)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a32:	4b23      	ldr	r3, [pc, #140]	; (8004ac0 <HAL_GPIO_Init+0x304>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a56:	4a1a      	ldr	r2, [pc, #104]	; (8004ac0 <HAL_GPIO_Init+0x304>)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a5c:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <HAL_GPIO_Init+0x304>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a80:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <HAL_GPIO_Init+0x304>)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2b0f      	cmp	r3, #15
 8004a90:	f67f aea2 	bls.w	80047d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	3724      	adds	r7, #36	; 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	40013800 	.word	0x40013800
 8004aac:	40020000 	.word	0x40020000
 8004ab0:	40020400 	.word	0x40020400
 8004ab4:	40020800 	.word	0x40020800
 8004ab8:	40020c00 	.word	0x40020c00
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40013c00 	.word	0x40013c00

08004ac4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8004ad0:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <HAL_PWR_EnterSTOPMode+0x50>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f023 0203 	bic.w	r2, r3, #3
 8004ad8:	490e      	ldr	r1, [pc, #56]	; (8004b14 <HAL_PWR_EnterSTOPMode+0x50>)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ae0:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <HAL_PWR_EnterSTOPMode+0x54>)
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	4a0c      	ldr	r2, [pc, #48]	; (8004b18 <HAL_PWR_EnterSTOPMode+0x54>)
 8004ae6:	f043 0304 	orr.w	r3, r3, #4
 8004aea:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004af2:	bf30      	wfi
 8004af4:	e002      	b.n	8004afc <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004af6:	bf40      	sev
    __WFE();
 8004af8:	bf20      	wfe
    __WFE();
 8004afa:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_PWR_EnterSTOPMode+0x54>)
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	4a05      	ldr	r2, [pc, #20]	; (8004b18 <HAL_PWR_EnterSTOPMode+0x54>)
 8004b02:	f023 0304 	bic.w	r3, r3, #4
 8004b06:	6113      	str	r3, [r2, #16]
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	40007000 	.word	0x40007000
 8004b18:	e000ed00 	.word	0xe000ed00

08004b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e267      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d075      	beq.n	8004c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b3a:	4b88      	ldr	r3, [pc, #544]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d00c      	beq.n	8004b60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b46:	4b85      	ldr	r3, [pc, #532]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d112      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b52:	4b82      	ldr	r3, [pc, #520]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b5e:	d10b      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b60:	4b7e      	ldr	r3, [pc, #504]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d05b      	beq.n	8004c24 <HAL_RCC_OscConfig+0x108>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d157      	bne.n	8004c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e242      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b80:	d106      	bne.n	8004b90 <HAL_RCC_OscConfig+0x74>
 8004b82:	4b76      	ldr	r3, [pc, #472]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a75      	ldr	r2, [pc, #468]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e01d      	b.n	8004bcc <HAL_RCC_OscConfig+0xb0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x98>
 8004b9a:	4b70      	ldr	r3, [pc, #448]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a6f      	ldr	r2, [pc, #444]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a6c      	ldr	r2, [pc, #432]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCC_OscConfig+0xb0>
 8004bb4:	4b69      	ldr	r3, [pc, #420]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a68      	ldr	r2, [pc, #416]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4b66      	ldr	r3, [pc, #408]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a65      	ldr	r2, [pc, #404]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7ff f88e 	bl	8003cf4 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bdc:	f7ff f88a 	bl	8003cf4 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	; 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e207      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bee:	4b5b      	ldr	r3, [pc, #364]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0xc0>
 8004bfa:	e014      	b.n	8004c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7ff f87a 	bl	8003cf4 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c04:	f7ff f876 	bl	8003cf4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e1f3      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c16:	4b51      	ldr	r3, [pc, #324]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0xe8>
 8004c22:	e000      	b.n	8004c26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d063      	beq.n	8004cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c32:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d11c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4a:	4b44      	ldr	r3, [pc, #272]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d116      	bne.n	8004c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c56:	4b41      	ldr	r3, [pc, #260]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_RCC_OscConfig+0x152>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e1c7      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6e:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4937      	ldr	r1, [pc, #220]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c82:	e03a      	b.n	8004cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d020      	beq.n	8004cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c8c:	4b34      	ldr	r3, [pc, #208]	; (8004d60 <HAL_RCC_OscConfig+0x244>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c92:	f7ff f82f 	bl	8003cf4 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9a:	f7ff f82b 	bl	8003cf4 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e1a8      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cac:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb8:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4925      	ldr	r1, [pc, #148]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]
 8004ccc:	e015      	b.n	8004cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cce:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <HAL_RCC_OscConfig+0x244>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7ff f80e 	bl	8003cf4 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cdc:	f7ff f80a 	bl	8003cf4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e187      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cee:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d036      	beq.n	8004d74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d016      	beq.n	8004d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d0e:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <HAL_RCC_OscConfig+0x248>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fe ffee 	bl	8003cf4 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7fe ffea 	bl	8003cf4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e167      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0x200>
 8004d3a:	e01b      	b.n	8004d74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <HAL_RCC_OscConfig+0x248>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d42:	f7fe ffd7 	bl	8003cf4 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d48:	e00e      	b.n	8004d68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d4a:	f7fe ffd3 	bl	8003cf4 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d907      	bls.n	8004d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e150      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	42470000 	.word	0x42470000
 8004d64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d68:	4b88      	ldr	r3, [pc, #544]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1ea      	bne.n	8004d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8097 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d82:	2300      	movs	r3, #0
 8004d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d86:	4b81      	ldr	r3, [pc, #516]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10f      	bne.n	8004db2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	4b7d      	ldr	r3, [pc, #500]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	4a7c      	ldr	r2, [pc, #496]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da0:	6413      	str	r3, [r2, #64]	; 0x40
 8004da2:	4b7a      	ldr	r3, [pc, #488]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dae:	2301      	movs	r3, #1
 8004db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db2:	4b77      	ldr	r3, [pc, #476]	; (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d118      	bne.n	8004df0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dbe:	4b74      	ldr	r3, [pc, #464]	; (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a73      	ldr	r2, [pc, #460]	; (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dca:	f7fe ff93 	bl	8003cf4 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd2:	f7fe ff8f 	bl	8003cf4 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e10c      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de4:	4b6a      	ldr	r3, [pc, #424]	; (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d106      	bne.n	8004e06 <HAL_RCC_OscConfig+0x2ea>
 8004df8:	4b64      	ldr	r3, [pc, #400]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	4a63      	ldr	r2, [pc, #396]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	6713      	str	r3, [r2, #112]	; 0x70
 8004e04:	e01c      	b.n	8004e40 <HAL_RCC_OscConfig+0x324>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCC_OscConfig+0x30c>
 8004e0e:	4b5f      	ldr	r3, [pc, #380]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	4a5e      	ldr	r2, [pc, #376]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e14:	f043 0304 	orr.w	r3, r3, #4
 8004e18:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1a:	4b5c      	ldr	r3, [pc, #368]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	4a5b      	ldr	r2, [pc, #364]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6713      	str	r3, [r2, #112]	; 0x70
 8004e26:	e00b      	b.n	8004e40 <HAL_RCC_OscConfig+0x324>
 8004e28:	4b58      	ldr	r3, [pc, #352]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	4a57      	ldr	r2, [pc, #348]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	6713      	str	r3, [r2, #112]	; 0x70
 8004e34:	4b55      	ldr	r3, [pc, #340]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	4a54      	ldr	r2, [pc, #336]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e3a:	f023 0304 	bic.w	r3, r3, #4
 8004e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d015      	beq.n	8004e74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e48:	f7fe ff54 	bl	8003cf4 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e50:	f7fe ff50 	bl	8003cf4 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e0cb      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e66:	4b49      	ldr	r3, [pc, #292]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0ee      	beq.n	8004e50 <HAL_RCC_OscConfig+0x334>
 8004e72:	e014      	b.n	8004e9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e74:	f7fe ff3e 	bl	8003cf4 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e7a:	e00a      	b.n	8004e92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f7fe ff3a 	bl	8003cf4 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e0b5      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e92:	4b3e      	ldr	r3, [pc, #248]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1ee      	bne.n	8004e7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d105      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea4:	4b39      	ldr	r3, [pc, #228]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	4a38      	ldr	r2, [pc, #224]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80a1 	beq.w	8004ffc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eba:	4b34      	ldr	r3, [pc, #208]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d05c      	beq.n	8004f80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d141      	bne.n	8004f52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ece:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <HAL_RCC_OscConfig+0x478>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fe ff0e 	bl	8003cf4 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fe ff0a 	bl	8003cf4 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e087      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eee:	4b27      	ldr	r3, [pc, #156]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	019b      	lsls	r3, r3, #6
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	3b01      	subs	r3, #1
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	061b      	lsls	r3, r3, #24
 8004f1e:	491b      	ldr	r1, [pc, #108]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f24:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <HAL_RCC_OscConfig+0x478>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fe fee3 	bl	8003cf4 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f32:	f7fe fedf 	bl	8003cf4 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e05c      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f44:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x416>
 8004f50:	e054      	b.n	8004ffc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <HAL_RCC_OscConfig+0x478>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fe fecc 	bl	8003cf4 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fe fec8 	bl	8003cf4 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e045      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f72:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x444>
 8004f7e:	e03d      	b.n	8004ffc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d107      	bne.n	8004f98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e038      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	40007000 	.word	0x40007000
 8004f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f98:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <HAL_RCC_OscConfig+0x4ec>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d028      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d121      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d11a      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fc8:	4013      	ands	r3, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d111      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d107      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40023800 	.word	0x40023800

0800500c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0cc      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005020:	4b68      	ldr	r3, [pc, #416]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d90c      	bls.n	8005048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b65      	ldr	r3, [pc, #404]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b63      	ldr	r3, [pc, #396]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0b8      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d020      	beq.n	8005096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005060:	4b59      	ldr	r3, [pc, #356]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a58      	ldr	r2, [pc, #352]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800506a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005078:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4a52      	ldr	r2, [pc, #328]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005084:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	494d      	ldr	r1, [pc, #308]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d044      	beq.n	800512c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d119      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e07f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d003      	beq.n	80050ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ca:	4b3f      	ldr	r3, [pc, #252]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e06f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050da:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e067      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ea:	4b37      	ldr	r3, [pc, #220]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f023 0203 	bic.w	r2, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4934      	ldr	r1, [pc, #208]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050fc:	f7fe fdfa 	bl	8003cf4 <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	e00a      	b.n	800511a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005104:	f7fe fdf6 	bl	8003cf4 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e04f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	4b2b      	ldr	r3, [pc, #172]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 020c 	and.w	r2, r3, #12
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	429a      	cmp	r2, r3
 800512a:	d1eb      	bne.n	8005104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800512c:	4b25      	ldr	r3, [pc, #148]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d20c      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e032      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4916      	ldr	r1, [pc, #88]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	490e      	ldr	r1, [pc, #56]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005192:	f000 f821 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8005196:	4602      	mov	r2, r0
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	490a      	ldr	r1, [pc, #40]	; (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 80051a4:	5ccb      	ldrb	r3, [r1, r3]
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_RCC_ClockConfig+0x1c8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fd5a 	bl	8003c6c <HAL_InitTick>

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40023c00 	.word	0x40023c00
 80051c8:	40023800 	.word	0x40023800
 80051cc:	0800f9dc 	.word	0x0800f9dc
 80051d0:	20000000 	.word	0x20000000
 80051d4:	20000004 	.word	0x20000004

080051d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051dc:	b090      	sub	sp, #64	; 0x40
 80051de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	637b      	str	r3, [r7, #52]	; 0x34
 80051e4:	2300      	movs	r3, #0
 80051e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e8:	2300      	movs	r3, #0
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f0:	4b59      	ldr	r3, [pc, #356]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 030c 	and.w	r3, r3, #12
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d00d      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x40>
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	f200 80a1 	bhi.w	8005344 <HAL_RCC_GetSysClockFreq+0x16c>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0x34>
 8005206:	2b04      	cmp	r3, #4
 8005208:	d003      	beq.n	8005212 <HAL_RCC_GetSysClockFreq+0x3a>
 800520a:	e09b      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800520c:	4b53      	ldr	r3, [pc, #332]	; (800535c <HAL_RCC_GetSysClockFreq+0x184>)
 800520e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005210:	e09b      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005212:	4b53      	ldr	r3, [pc, #332]	; (8005360 <HAL_RCC_GetSysClockFreq+0x188>)
 8005214:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005216:	e098      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005218:	4b4f      	ldr	r3, [pc, #316]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005222:	4b4d      	ldr	r3, [pc, #308]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d028      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522e:	4b4a      	ldr	r3, [pc, #296]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	099b      	lsrs	r3, r3, #6
 8005234:	2200      	movs	r2, #0
 8005236:	623b      	str	r3, [r7, #32]
 8005238:	627a      	str	r2, [r7, #36]	; 0x24
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005240:	2100      	movs	r1, #0
 8005242:	4b47      	ldr	r3, [pc, #284]	; (8005360 <HAL_RCC_GetSysClockFreq+0x188>)
 8005244:	fb03 f201 	mul.w	r2, r3, r1
 8005248:	2300      	movs	r3, #0
 800524a:	fb00 f303 	mul.w	r3, r0, r3
 800524e:	4413      	add	r3, r2
 8005250:	4a43      	ldr	r2, [pc, #268]	; (8005360 <HAL_RCC_GetSysClockFreq+0x188>)
 8005252:	fba0 1202 	umull	r1, r2, r0, r2
 8005256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005258:	460a      	mov	r2, r1
 800525a:	62ba      	str	r2, [r7, #40]	; 0x28
 800525c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800525e:	4413      	add	r3, r2
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005264:	2200      	movs	r2, #0
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	61fa      	str	r2, [r7, #28]
 800526a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005272:	f7fb fd71 	bl	8000d58 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4613      	mov	r3, r2
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800527e:	e053      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005280:	4b35      	ldr	r3, [pc, #212]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	099b      	lsrs	r3, r3, #6
 8005286:	2200      	movs	r2, #0
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	617a      	str	r2, [r7, #20]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005292:	f04f 0b00 	mov.w	fp, #0
 8005296:	4652      	mov	r2, sl
 8005298:	465b      	mov	r3, fp
 800529a:	f04f 0000 	mov.w	r0, #0
 800529e:	f04f 0100 	mov.w	r1, #0
 80052a2:	0159      	lsls	r1, r3, #5
 80052a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a8:	0150      	lsls	r0, r2, #5
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	ebb2 080a 	subs.w	r8, r2, sl
 80052b2:	eb63 090b 	sbc.w	r9, r3, fp
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80052c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052ca:	ebb2 0408 	subs.w	r4, r2, r8
 80052ce:	eb63 0509 	sbc.w	r5, r3, r9
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	00eb      	lsls	r3, r5, #3
 80052dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052e0:	00e2      	lsls	r2, r4, #3
 80052e2:	4614      	mov	r4, r2
 80052e4:	461d      	mov	r5, r3
 80052e6:	eb14 030a 	adds.w	r3, r4, sl
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	eb45 030b 	adc.w	r3, r5, fp
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052fe:	4629      	mov	r1, r5
 8005300:	028b      	lsls	r3, r1, #10
 8005302:	4621      	mov	r1, r4
 8005304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005308:	4621      	mov	r1, r4
 800530a:	028a      	lsls	r2, r1, #10
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005312:	2200      	movs	r2, #0
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	60fa      	str	r2, [r7, #12]
 8005318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800531c:	f7fb fd1c 	bl	8000d58 <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4613      	mov	r3, r2
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCC_GetSysClockFreq+0x180>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	3301      	adds	r3, #1
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005342:	e002      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_GetSysClockFreq+0x184>)
 8005346:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800534c:	4618      	mov	r0, r3
 800534e:	3740      	adds	r7, #64	; 0x40
 8005350:	46bd      	mov	sp, r7
 8005352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005356:	bf00      	nop
 8005358:	40023800 	.word	0x40023800
 800535c:	00f42400 	.word	0x00f42400
 8005360:	017d7840 	.word	0x017d7840

08005364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005368:	4b03      	ldr	r3, [pc, #12]	; (8005378 <HAL_RCC_GetHCLKFreq+0x14>)
 800536a:	681b      	ldr	r3, [r3, #0]
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000000 	.word	0x20000000

0800537c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005380:	f7ff fff0 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0a9b      	lsrs	r3, r3, #10
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	; (80053a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	0800f9ec 	.word	0x0800f9ec

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053a8:	f7ff ffdc 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0b5b      	lsrs	r3, r3, #13
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	; (80053c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	0800f9ec 	.word	0x0800f9ec

080053cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d035      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053f4:	4b67      	ldr	r3, [pc, #412]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053fa:	f7fe fc7b 	bl	8003cf4 <HAL_GetTick>
 80053fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005402:	f7fe fc77 	bl	8003cf4 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e0ba      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005414:	4b60      	ldr	r3, [pc, #384]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1f0      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	019a      	lsls	r2, r3, #6
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	071b      	lsls	r3, r3, #28
 800542c:	495a      	ldr	r1, [pc, #360]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005434:	4b57      	ldr	r3, [pc, #348]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800543a:	f7fe fc5b 	bl	8003cf4 <HAL_GetTick>
 800543e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005442:	f7fe fc57 	bl	8003cf4 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e09a      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005454:	4b50      	ldr	r3, [pc, #320]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f0      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8083 	beq.w	8005574 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	4b49      	ldr	r3, [pc, #292]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	4a48      	ldr	r2, [pc, #288]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547c:	6413      	str	r3, [r2, #64]	; 0x40
 800547e:	4b46      	ldr	r3, [pc, #280]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800548a:	4b44      	ldr	r3, [pc, #272]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a43      	ldr	r2, [pc, #268]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005494:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005496:	f7fe fc2d 	bl	8003cf4 <HAL_GetTick>
 800549a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800549c:	e008      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800549e:	f7fe fc29 	bl	8003cf4 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e06c      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054b0:	4b3a      	ldr	r3, [pc, #232]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054bc:	4b36      	ldr	r3, [pc, #216]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d02f      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d028      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054da:	4b2f      	ldr	r3, [pc, #188]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054e4:	4b2e      	ldr	r3, [pc, #184]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054ea:	4b2d      	ldr	r3, [pc, #180]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054f0:	4a29      	ldr	r2, [pc, #164]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054f6:	4b28      	ldr	r3, [pc, #160]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d114      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005502:	f7fe fbf7 	bl	8003cf4 <HAL_GetTick>
 8005506:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005508:	e00a      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800550a:	f7fe fbf3 	bl	8003cf4 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	f241 3288 	movw	r2, #5000	; 0x1388
 8005518:	4293      	cmp	r3, r2
 800551a:	d901      	bls.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e034      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005520:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0ee      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005538:	d10d      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800553a:	4b17      	ldr	r3, [pc, #92]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800554a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554e:	4912      	ldr	r1, [pc, #72]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005550:	4313      	orrs	r3, r2
 8005552:	608b      	str	r3, [r1, #8]
 8005554:	e005      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	4a0f      	ldr	r2, [pc, #60]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800555c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005560:	6093      	str	r3, [r2, #8]
 8005562:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005564:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556e:	490a      	ldr	r1, [pc, #40]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005570:	4313      	orrs	r3, r2
 8005572:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	7c1a      	ldrb	r2, [r3, #16]
 8005584:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005586:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	42470068 	.word	0x42470068
 8005598:	40023800 	.word	0x40023800
 800559c:	40007000 	.word	0x40007000
 80055a0:	42470e40 	.word	0x42470e40
 80055a4:	424711e0 	.word	0x424711e0

080055a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e066      	b.n	800568c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	7f5b      	ldrb	r3, [r3, #29]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d105      	bne.n	80055d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fe f9f0 	bl	80039b4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	22ca      	movs	r2, #202	; 0xca
 80055e0:	625a      	str	r2, [r3, #36]	; 0x24
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2253      	movs	r2, #83	; 0x53
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f998 	bl	8005920 <RTC_EnterInitMode>
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d12c      	bne.n	8005654 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6899      	ldr	r1, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68d2      	ldr	r2, [r2, #12]
 8005634:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6919      	ldr	r1, [r3, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	041a      	lsls	r2, r3, #16
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f99f 	bl	800598e <RTC_ExitInitMode>
 8005650:	4603      	mov	r3, r0
 8005652:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d113      	bne.n	8005682 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	22ff      	movs	r2, #255	; 0xff
 8005688:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005694:	b590      	push	{r4, r7, lr}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	7f1b      	ldrb	r3, [r3, #28]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_RTC_SetTime+0x1c>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e087      	b.n	80057c0 <HAL_RTC_SetTime+0x12c>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2202      	movs	r2, #2
 80056ba:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d126      	bne.n	8005710 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2200      	movs	r2, #0
 80056d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 f97c 	bl	80059d8 <RTC_ByteToBcd2>
 80056e0:	4603      	mov	r3, r0
 80056e2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 f975 	bl	80059d8 <RTC_ByteToBcd2>
 80056ee:	4603      	mov	r3, r0
 80056f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056f2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	789b      	ldrb	r3, [r3, #2]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 f96d 	bl	80059d8 <RTC_ByteToBcd2>
 80056fe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005700:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	78db      	ldrb	r3, [r3, #3]
 8005708:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	e018      	b.n	8005742 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d102      	bne.n	8005724 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2200      	movs	r2, #0
 8005722:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	785b      	ldrb	r3, [r3, #1]
 800572e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005730:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005736:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	22ca      	movs	r2, #202	; 0xca
 8005748:	625a      	str	r2, [r3, #36]	; 0x24
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2253      	movs	r2, #83	; 0x53
 8005750:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f8e4 	bl	8005920 <RTC_EnterInitMode>
 8005758:	4603      	mov	r3, r0
 800575a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d120      	bne.n	80057a4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800576c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005770:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005780:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6899      	ldr	r1, [r3, #8]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	431a      	orrs	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f8f7 	bl	800598e <RTC_ExitInitMode>
 80057a0:	4603      	mov	r3, r0
 80057a2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d102      	bne.n	80057b0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	22ff      	movs	r2, #255	; 0xff
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	771a      	strb	r2, [r3, #28]

  return status;
 80057be:	7cfb      	ldrb	r3, [r7, #19]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd90      	pop	{r4, r7, pc}

080057c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	7f1b      	ldrb	r3, [r3, #28]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_RTC_SetDate+0x1c>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e071      	b.n	80058c8 <HAL_RTC_SetDate+0x100>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2202      	movs	r2, #2
 80057ee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10e      	bne.n	8005814 <HAL_RTC_SetDate+0x4c>
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	f023 0310 	bic.w	r3, r3, #16
 800580a:	b2db      	uxtb	r3, r3
 800580c:	330a      	adds	r3, #10
 800580e:	b2da      	uxtb	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d11c      	bne.n	8005854 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	78db      	ldrb	r3, [r3, #3]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 f8da 	bl	80059d8 <RTC_ByteToBcd2>
 8005824:	4603      	mov	r3, r0
 8005826:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f8d3 	bl	80059d8 <RTC_ByteToBcd2>
 8005832:	4603      	mov	r3, r0
 8005834:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005836:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	789b      	ldrb	r3, [r3, #2]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 f8cb 	bl	80059d8 <RTC_ByteToBcd2>
 8005842:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005844:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e00e      	b.n	8005872 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	78db      	ldrb	r3, [r3, #3]
 8005858:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005860:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005866:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	22ca      	movs	r2, #202	; 0xca
 8005878:	625a      	str	r2, [r3, #36]	; 0x24
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2253      	movs	r2, #83	; 0x53
 8005880:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f84c 	bl	8005920 <RTC_EnterInitMode>
 8005888:	4603      	mov	r3, r0
 800588a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800588c:	7cfb      	ldrb	r3, [r7, #19]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10c      	bne.n	80058ac <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800589c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f873 	bl	800598e <RTC_ExitInitMode>
 80058a8:	4603      	mov	r3, r0
 80058aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80058ac:	7cfb      	ldrb	r3, [r7, #19]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	22ff      	movs	r2, #255	; 0xff
 80058be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	771a      	strb	r2, [r3, #28]

  return status;
 80058c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd90      	pop	{r4, r7, pc}

080058d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058ea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058ec:	f7fe fa02 	bl	8003cf4 <HAL_GetTick>
 80058f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058f2:	e009      	b.n	8005908 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058f4:	f7fe f9fe 	bl	8003cf4 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005902:	d901      	bls.n	8005908 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e007      	b.n	8005918 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0ee      	beq.n	80058f4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d122      	bne.n	8005984 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800594c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800594e:	f7fe f9d1 	bl	8003cf4 <HAL_GetTick>
 8005952:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005954:	e00c      	b.n	8005970 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005956:	f7fe f9cd 	bl	8003cf4 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005964:	d904      	bls.n	8005970 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2204      	movs	r2, #4
 800596a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <RTC_EnterInitMode+0x64>
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d1e8      	bne.n	8005956 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005984:	7bfb      	ldrb	r3, [r7, #15]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059a8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff ff89 	bl	80058d0 <HAL_RTC_WaitForSynchro>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2204      	movs	r2, #4
 80059c8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80059e6:	e005      	b.n	80059f4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	3301      	adds	r3, #1
 80059ec:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	3b0a      	subs	r3, #10
 80059f2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	2b09      	cmp	r3, #9
 80059f8:	d8f6      	bhi.n	80059e8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	79fb      	ldrb	r3, [r7, #7]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	b2db      	uxtb	r3, r3
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005a20:	4b59      	ldr	r3, [pc, #356]	; (8005b88 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a59      	ldr	r2, [pc, #356]	; (8005b8c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	0adb      	lsrs	r3, r3, #11
 8005a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	7f1b      	ldrb	r3, [r3, #28]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e09b      	b.n	8005b7a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	22ca      	movs	r2, #202	; 0xca
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2253      	movs	r2, #83	; 0x53
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d017      	beq.n	8005a9c <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	1e5a      	subs	r2, r3, #1
 8005a70:	617a      	str	r2, [r7, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	22ff      	movs	r2, #255	; 0xff
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2203      	movs	r2, #3
 8005a82:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e075      	b.n	8005b7a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e7      	bne.n	8005a6c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aaa:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005abc:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005abe:	4b32      	ldr	r3, [pc, #200]	; (8005b88 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a32      	ldr	r2, [pc, #200]	; (8005b8c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	0adb      	lsrs	r3, r3, #11
 8005aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	1e5a      	subs	r2, r3, #1
 8005ad8:	617a      	str	r2, [r7, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10b      	bne.n	8005af6 <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	22ff      	movs	r2, #255	; 0xff
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e041      	b.n	8005b7a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0e7      	beq.n	8005ad4 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0207 	bic.w	r2, r2, #7
 8005b12:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6899      	ldr	r1, [r3, #8]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005b2c:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a17      	ldr	r2, [pc, #92]	; (8005b90 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005b32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b36:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005b38:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	4a14      	ldr	r2, [pc, #80]	; (8005b90 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005b3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b42:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b52:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b62:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	22ff      	movs	r2, #255	; 0xff
 8005b6a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	20000000 	.word	0x20000000
 8005b8c:	10624dd3 	.word	0x10624dd3
 8005b90:	40013c00 	.word	0x40013c00

08005b94 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	7f1b      	ldrb	r3, [r3, #28]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e047      	b.n	8005c3c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	22ca      	movs	r2, #202	; 0xca
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2253      	movs	r2, #83	; 0x53
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005be6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005be8:	f7fe f884 	bl	8003cf4 <HAL_GetTick>
 8005bec:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005bee:	e013      	b.n	8005c18 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bf0:	f7fe f880 	bl	8003cf4 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bfe:	d90b      	bls.n	8005c18 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	22ff      	movs	r2, #255	; 0xff
 8005c06:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2203      	movs	r2, #3
 8005c0c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e011      	b.n	8005c3c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0e4      	beq.n	8005bf0 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	22ff      	movs	r2, #255	; 0xff
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f816 	bl	8005c8c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005c70:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005c72:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8005c74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005c78:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	775a      	strb	r2, [r3, #29]
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40013c00 	.word	0x40013c00

08005c8c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e03f      	b.n	8005d32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fd fea8 	bl	8003a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2224      	movs	r2, #36	; 0x24
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 f811 	bl	8006d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695a      	ldr	r2, [r3, #20]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b08a      	sub	sp, #40	; 0x28
 8005d3e:	af02      	add	r7, sp, #8
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d17c      	bne.n	8005e54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_UART_Transmit+0x2c>
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e075      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_UART_Transmit+0x3e>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e06e      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2221      	movs	r2, #33	; 0x21
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d8e:	f7fd ffb1 	bl	8003cf4 <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da8:	d108      	bne.n	8005dbc <HAL_UART_Transmit+0x82>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	e003      	b.n	8005dc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005dcc:	e02a      	b.n	8005e24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2180      	movs	r1, #128	; 0x80
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 fcc9 	bl	8006770 <UART_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e036      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	3302      	adds	r3, #2
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	e007      	b.n	8005e16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	3301      	adds	r3, #1
 8005e14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1cf      	bne.n	8005dce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2200      	movs	r2, #0
 8005e36:	2140      	movs	r1, #64	; 0x40
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fc99 	bl	8006770 <UART_WaitOnFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e006      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b090      	sub	sp, #64	; 0x40
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e74:	2b80      	cmp	r3, #128	; 0x80
 8005e76:	bf0c      	ite	eq
 8005e78:	2301      	moveq	r3, #1
 8005e7a:	2300      	movne	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b21      	cmp	r3, #33	; 0x21
 8005e8a:	d128      	bne.n	8005ede <HAL_UART_DMAStop+0x80>
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d025      	beq.n	8005ede <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3314      	adds	r3, #20
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3314      	adds	r3, #20
 8005eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eb2:	633a      	str	r2, [r7, #48]	; 0x30
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e5      	bne.n	8005e92 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fe f976 	bl	80041c4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fd55 	bl	8006988 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b40      	cmp	r3, #64	; 0x40
 8005eea:	bf0c      	ite	eq
 8005eec:	2301      	moveq	r3, #1
 8005eee:	2300      	movne	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b22      	cmp	r3, #34	; 0x22
 8005efe:	d128      	bne.n	8005f52 <HAL_UART_DMAStop+0xf4>
 8005f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d025      	beq.n	8005f52 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3314      	adds	r3, #20
 8005f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3314      	adds	r3, #20
 8005f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f26:	61fa      	str	r2, [r7, #28]
 8005f28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	69b9      	ldr	r1, [r7, #24]
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	617b      	str	r3, [r7, #20]
   return(result);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e5      	bne.n	8005f06 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe f93c 	bl	80041c4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fd43 	bl	80069d8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3740      	adds	r7, #64	; 0x40
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08c      	sub	sp, #48	; 0x30
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d152      	bne.n	800601c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e04b      	b.n	800601e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e044      	b.n	800601e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 fc4f 	bl	800684c <UART_Start_Receive_DMA>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d12c      	bne.n	8006016 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d125      	bne.n	8006010 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	330c      	adds	r3, #12
 8005fe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f043 0310 	orr.w	r3, r3, #16
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ffa:	627a      	str	r2, [r7, #36]	; 0x24
 8005ffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6a39      	ldr	r1, [r7, #32]
 8006000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	61fb      	str	r3, [r7, #28]
   return(result);
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e5      	bne.n	8005fda <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800600e:	e002      	b.n	8006016 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006016:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800601a:	e000      	b.n	800601e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3730      	adds	r7, #48	; 0x30
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b0ba      	sub	sp, #232	; 0xe8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800604e:	2300      	movs	r3, #0
 8006050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006054:	2300      	movs	r3, #0
 8006056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800605a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10f      	bne.n	800608e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_UART_IRQHandler+0x66>
 800607a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fd85 	bl	8006b96 <UART_Receive_IT>
      return;
 800608c:	e256      	b.n	800653c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800608e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80de 	beq.w	8006254 <HAL_UART_IRQHandler+0x22c>
 8006098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d106      	bne.n	80060b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80d1 	beq.w	8006254 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <HAL_UART_IRQHandler+0xae>
 80060be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f043 0201 	orr.w	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00b      	beq.n	80060fa <HAL_UART_IRQHandler+0xd2>
 80060e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f043 0202 	orr.w	r2, r3, #2
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <HAL_UART_IRQHandler+0xf6>
 8006106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f043 0204 	orr.w	r2, r3, #4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d011      	beq.n	800614e <HAL_UART_IRQHandler+0x126>
 800612a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d105      	bne.n	8006142 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	f043 0208 	orr.w	r2, r3, #8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 81ed 	beq.w	8006532 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <HAL_UART_IRQHandler+0x14e>
 8006164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fd10 	bl	8006b96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	bf0c      	ite	eq
 8006184:	2301      	moveq	r3, #1
 8006186:	2300      	movne	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	d103      	bne.n	80061a2 <HAL_UART_IRQHandler+0x17a>
 800619a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d04f      	beq.n	8006242 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fc18 	bl	80069d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b2:	2b40      	cmp	r3, #64	; 0x40
 80061b4:	d141      	bne.n	800623a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3314      	adds	r3, #20
 80061bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3314      	adds	r3, #20
 80061de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1d9      	bne.n	80061b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	2b00      	cmp	r3, #0
 8006208:	d013      	beq.n	8006232 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	4a7d      	ldr	r2, [pc, #500]	; (8006404 <HAL_UART_IRQHandler+0x3dc>)
 8006210:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	4618      	mov	r0, r3
 8006218:	f7fe f844 	bl	80042a4 <HAL_DMA_Abort_IT>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d016      	beq.n	8006250 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800622c:	4610      	mov	r0, r2
 800622e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	e00e      	b.n	8006250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fa ff5a 	bl	80010ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	e00a      	b.n	8006250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fa ff56 	bl	80010ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006240:	e006      	b.n	8006250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fa ff52 	bl	80010ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800624e:	e170      	b.n	8006532 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006250:	bf00      	nop
    return;
 8006252:	e16e      	b.n	8006532 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	2b01      	cmp	r3, #1
 800625a:	f040 814a 	bne.w	80064f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 8143 	beq.w	80064f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800626c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 813c 	beq.w	80064f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800627a:	2300      	movs	r3, #0
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60bb      	str	r3, [r7, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	f040 80b4 	bne.w	8006408 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8140 	beq.w	8006536 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062be:	429a      	cmp	r2, r3
 80062c0:	f080 8139 	bcs.w	8006536 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d6:	f000 8088 	beq.w	80063ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	330c      	adds	r3, #12
 8006302:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800630a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006312:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800631e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1d9      	bne.n	80062da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3314      	adds	r3, #20
 800632c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006338:	f023 0301 	bic.w	r3, r3, #1
 800633c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3314      	adds	r3, #20
 8006346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800634a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800634e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006352:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800635c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e1      	bne.n	8006326 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3314      	adds	r3, #20
 8006368:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3314      	adds	r3, #20
 8006382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006386:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006388:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800638c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e3      	bne.n	8006362 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ba:	f023 0310 	bic.w	r3, r3, #16
 80063be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	330c      	adds	r3, #12
 80063c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80063ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e3      	bne.n	80063a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fd feed 	bl	80041c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fa fe64 	bl	80010c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006400:	e099      	b.n	8006536 <HAL_UART_IRQHandler+0x50e>
 8006402:	bf00      	nop
 8006404:	08006a9f 	.word	0x08006a9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006410:	b29b      	uxth	r3, r3
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 808b 	beq.w	800653a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 8086 	beq.w	800653a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006452:	647a      	str	r2, [r7, #68]	; 0x44
 8006454:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e3      	bne.n	800642e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3314      	adds	r3, #20
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	623b      	str	r3, [r7, #32]
   return(result);
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3314      	adds	r3, #20
 8006486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800648a:	633a      	str	r2, [r7, #48]	; 0x30
 800648c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e3      	bne.n	8006466 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0310 	bic.w	r3, r3, #16
 80064c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064d0:	61fa      	str	r2, [r7, #28]
 80064d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	69b9      	ldr	r1, [r7, #24]
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	617b      	str	r3, [r7, #20]
   return(result);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e3      	bne.n	80064ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fa fdec 	bl	80010c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064f0:	e023      	b.n	800653a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <HAL_UART_IRQHandler+0x4ea>
 80064fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fadb 	bl	8006ac6 <UART_Transmit_IT>
    return;
 8006510:	e014      	b.n	800653c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00e      	beq.n	800653c <HAL_UART_IRQHandler+0x514>
 800651e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d008      	beq.n	800653c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fb1b 	bl	8006b66 <UART_EndTransmit_IT>
    return;
 8006530:	e004      	b.n	800653c <HAL_UART_IRQHandler+0x514>
    return;
 8006532:	bf00      	nop
 8006534:	e002      	b.n	800653c <HAL_UART_IRQHandler+0x514>
      return;
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <HAL_UART_IRQHandler+0x514>
      return;
 800653a:	bf00      	nop
  }
}
 800653c:	37e8      	adds	r7, #232	; 0xe8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop

08006544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b09c      	sub	sp, #112	; 0x70
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006598:	2b00      	cmp	r3, #0
 800659a:	d172      	bne.n	8006682 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800659c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659e:	2200      	movs	r2, #0
 80065a0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	330c      	adds	r3, #12
 80065a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80065ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80065c4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e5      	bne.n	80065a2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3314      	adds	r3, #20
 80065dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e8:	f023 0301 	bic.w	r3, r3, #1
 80065ec:	667b      	str	r3, [r7, #100]	; 0x64
 80065ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3314      	adds	r3, #20
 80065f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065f6:	647a      	str	r2, [r7, #68]	; 0x44
 80065f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e5      	bne.n	80065d6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800660a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3314      	adds	r3, #20
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	623b      	str	r3, [r7, #32]
   return(result);
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006620:	663b      	str	r3, [r7, #96]	; 0x60
 8006622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3314      	adds	r3, #20
 8006628:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800662a:	633a      	str	r2, [r7, #48]	; 0x30
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e5      	bne.n	800660a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800663e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664a:	2b01      	cmp	r3, #1
 800664c:	d119      	bne.n	8006682 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	330c      	adds	r3, #12
 8006654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	60fb      	str	r3, [r7, #12]
   return(result);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f023 0310 	bic.w	r3, r3, #16
 8006664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800666e:	61fa      	str	r2, [r7, #28]
 8006670:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	69b9      	ldr	r1, [r7, #24]
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	617b      	str	r3, [r7, #20]
   return(result);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e5      	bne.n	800664e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	2b01      	cmp	r3, #1
 8006688:	d106      	bne.n	8006698 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800668e:	4619      	mov	r1, r3
 8006690:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006692:	f7fa fd19 	bl	80010c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006696:	e002      	b.n	800669e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006698:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800669a:	f7ff ff5d 	bl	8006558 <HAL_UART_RxCpltCallback>
}
 800669e:	bf00      	nop
 80066a0:	3770      	adds	r7, #112	; 0x70
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d108      	bne.n	80066ce <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	4619      	mov	r1, r3
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7fa fcfe 	bl	80010c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066cc:	e002      	b.n	80066d4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7ff ff4c 	bl	800656c <HAL_UART_RxHalfCpltCallback>
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f8:	2b80      	cmp	r3, #128	; 0x80
 80066fa:	bf0c      	ite	eq
 80066fc:	2301      	moveq	r3, #1
 80066fe:	2300      	movne	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b21      	cmp	r3, #33	; 0x21
 800670e:	d108      	bne.n	8006722 <UART_DMAError+0x46>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2200      	movs	r2, #0
 800671a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800671c:	68b8      	ldr	r0, [r7, #8]
 800671e:	f000 f933 	bl	8006988 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	bf0c      	ite	eq
 8006730:	2301      	moveq	r3, #1
 8006732:	2300      	movne	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b22      	cmp	r3, #34	; 0x22
 8006742:	d108      	bne.n	8006756 <UART_DMAError+0x7a>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2200      	movs	r2, #0
 800674e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006750:	68b8      	ldr	r0, [r7, #8]
 8006752:	f000 f941 	bl	80069d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f043 0210 	orr.w	r2, r3, #16
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006762:	68b8      	ldr	r0, [r7, #8]
 8006764:	f7fa fcc2 	bl	80010ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006768:	bf00      	nop
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b090      	sub	sp, #64	; 0x40
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006780:	e050      	b.n	8006824 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d04c      	beq.n	8006824 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800678a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006790:	f7fd fab0 	bl	8003cf4 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800679c:	429a      	cmp	r2, r3
 800679e:	d241      	bcs.n	8006824 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	330c      	adds	r3, #12
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	330c      	adds	r3, #12
 80067be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067c0:	637a      	str	r2, [r7, #52]	; 0x34
 80067c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e5      	bne.n	80067a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3314      	adds	r3, #20
 80067da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	613b      	str	r3, [r7, #16]
   return(result);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3314      	adds	r3, #20
 80067f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f4:	623a      	str	r2, [r7, #32]
 80067f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	69f9      	ldr	r1, [r7, #28]
 80067fa:	6a3a      	ldr	r2, [r7, #32]
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	61bb      	str	r3, [r7, #24]
   return(result);
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e5      	bne.n	80067d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e00f      	b.n	8006844 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	4013      	ands	r3, r2
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	429a      	cmp	r2, r3
 8006832:	bf0c      	ite	eq
 8006834:	2301      	moveq	r3, #1
 8006836:	2300      	movne	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	461a      	mov	r2, r3
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	429a      	cmp	r2, r3
 8006840:	d09f      	beq.n	8006782 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3740      	adds	r7, #64	; 0x40
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b098      	sub	sp, #96	; 0x60
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	4613      	mov	r3, r2
 8006858:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	88fa      	ldrh	r2, [r7, #6]
 8006864:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2222      	movs	r2, #34	; 0x22
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	4a40      	ldr	r2, [pc, #256]	; (800697c <UART_Start_Receive_DMA+0x130>)
 800687a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	4a3f      	ldr	r2, [pc, #252]	; (8006980 <UART_Start_Receive_DMA+0x134>)
 8006882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	4a3e      	ldr	r2, [pc, #248]	; (8006984 <UART_Start_Receive_DMA+0x138>)
 800688a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006890:	2200      	movs	r2, #0
 8006892:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006894:	f107 0308 	add.w	r3, r7, #8
 8006898:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	f7fd fc32 	bl	8004114 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80068b0:	2300      	movs	r3, #0
 80068b2:	613b      	str	r3, [r7, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d019      	beq.n	800690a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	330c      	adds	r3, #12
 80068dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	330c      	adds	r3, #12
 80068f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80068f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80068fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e5      	bne.n	80068d6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3314      	adds	r3, #20
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	f043 0301 	orr.w	r3, r3, #1
 8006920:	657b      	str	r3, [r7, #84]	; 0x54
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3314      	adds	r3, #20
 8006928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800692a:	63ba      	str	r2, [r7, #56]	; 0x38
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e5      	bne.n	800690a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	617b      	str	r3, [r7, #20]
   return(result);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006954:	653b      	str	r3, [r7, #80]	; 0x50
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3314      	adds	r3, #20
 800695c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800695e:	627a      	str	r2, [r7, #36]	; 0x24
 8006960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6a39      	ldr	r1, [r7, #32]
 8006964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	61fb      	str	r3, [r7, #28]
   return(result);
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e5      	bne.n	800693e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3760      	adds	r7, #96	; 0x60
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	08006581 	.word	0x08006581
 8006980:	080066a7 	.word	0x080066a7
 8006984:	080066dd 	.word	0x080066dd

08006988 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006988:	b480      	push	{r7}
 800698a:	b089      	sub	sp, #36	; 0x24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069a6:	61fb      	str	r3, [r7, #28]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	330c      	adds	r3, #12
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	61ba      	str	r2, [r7, #24]
 80069b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6979      	ldr	r1, [r7, #20]
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	613b      	str	r3, [r7, #16]
   return(result);
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e5      	bne.n	8006990 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80069cc:	bf00      	nop
 80069ce:	3724      	adds	r7, #36	; 0x24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b095      	sub	sp, #84	; 0x54
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	330c      	adds	r3, #12
 80069e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	330c      	adds	r3, #12
 80069fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a00:	643a      	str	r2, [r7, #64]	; 0x40
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e5      	bne.n	80069e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3314      	adds	r3, #20
 8006a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f023 0301 	bic.w	r3, r3, #1
 8006a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3314      	adds	r3, #20
 8006a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e5      	bne.n	8006a14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d119      	bne.n	8006a84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	330c      	adds	r3, #12
 8006a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f023 0310 	bic.w	r3, r3, #16
 8006a66:	647b      	str	r3, [r7, #68]	; 0x44
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	330c      	adds	r3, #12
 8006a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a70:	61ba      	str	r2, [r7, #24]
 8006a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6979      	ldr	r1, [r7, #20]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e5      	bne.n	8006a50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a92:	bf00      	nop
 8006a94:	3754      	adds	r7, #84	; 0x54
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f7fa fb17 	bl	80010ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006abe:	bf00      	nop
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b21      	cmp	r3, #33	; 0x21
 8006ad8:	d13e      	bne.n	8006b58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae2:	d114      	bne.n	8006b0e <UART_Transmit_IT+0x48>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d110      	bne.n	8006b0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	1c9a      	adds	r2, r3, #2
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	621a      	str	r2, [r3, #32]
 8006b0c:	e008      	b.n	8006b20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	1c59      	adds	r1, r3, #1
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6211      	str	r1, [r2, #32]
 8006b18:	781a      	ldrb	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10f      	bne.n	8006b54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e000      	b.n	8006b5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b58:	2302      	movs	r3, #2
  }
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff fcdc 	bl	8006544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b08c      	sub	sp, #48	; 0x30
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b22      	cmp	r3, #34	; 0x22
 8006ba8:	f040 80ab 	bne.w	8006d02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb4:	d117      	bne.n	8006be6 <UART_Receive_IT+0x50>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d113      	bne.n	8006be6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	1c9a      	adds	r2, r3, #2
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28
 8006be4:	e026      	b.n	8006c34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006bec:	2300      	movs	r3, #0
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf8:	d007      	beq.n	8006c0a <UART_Receive_IT+0x74>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <UART_Receive_IT+0x82>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	e008      	b.n	8006c2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	4619      	mov	r1, r3
 8006c42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d15a      	bne.n	8006cfe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0220 	bic.w	r2, r2, #32
 8006c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	695a      	ldr	r2, [r3, #20]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0201 	bic.w	r2, r2, #1
 8006c76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d135      	bne.n	8006cf4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	330c      	adds	r3, #12
 8006c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f023 0310 	bic.w	r3, r3, #16
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	330c      	adds	r3, #12
 8006cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cae:	623a      	str	r2, [r7, #32]
 8006cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	69f9      	ldr	r1, [r7, #28]
 8006cb4:	6a3a      	ldr	r2, [r7, #32]
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e5      	bne.n	8006c8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d10a      	bne.n	8006ce6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fa f9eb 	bl	80010c8 <HAL_UARTEx_RxEventCallback>
 8006cf2:	e002      	b.n	8006cfa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff fc2f 	bl	8006558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e002      	b.n	8006d04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e000      	b.n	8006d04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d02:	2302      	movs	r3, #2
  }
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3730      	adds	r7, #48	; 0x30
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d10:	b0c0      	sub	sp, #256	; 0x100
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d28:	68d9      	ldr	r1, [r3, #12]
 8006d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	ea40 0301 	orr.w	r3, r0, r1
 8006d34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d64:	f021 010c 	bic.w	r1, r1, #12
 8006d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d72:	430b      	orrs	r3, r1
 8006d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d86:	6999      	ldr	r1, [r3, #24]
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	ea40 0301 	orr.w	r3, r0, r1
 8006d92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4b8f      	ldr	r3, [pc, #572]	; (8006fd8 <UART_SetConfig+0x2cc>)
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d005      	beq.n	8006dac <UART_SetConfig+0xa0>
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	4b8d      	ldr	r3, [pc, #564]	; (8006fdc <UART_SetConfig+0x2d0>)
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d104      	bne.n	8006db6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dac:	f7fe fafa 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 8006db0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006db4:	e003      	b.n	8006dbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006db6:	f7fe fae1 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8006dba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc8:	f040 810c 	bne.w	8006fe4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006dda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006dde:	4622      	mov	r2, r4
 8006de0:	462b      	mov	r3, r5
 8006de2:	1891      	adds	r1, r2, r2
 8006de4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006de6:	415b      	adcs	r3, r3
 8006de8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006dee:	4621      	mov	r1, r4
 8006df0:	eb12 0801 	adds.w	r8, r2, r1
 8006df4:	4629      	mov	r1, r5
 8006df6:	eb43 0901 	adc.w	r9, r3, r1
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e0e:	4690      	mov	r8, r2
 8006e10:	4699      	mov	r9, r3
 8006e12:	4623      	mov	r3, r4
 8006e14:	eb18 0303 	adds.w	r3, r8, r3
 8006e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	eb49 0303 	adc.w	r3, r9, r3
 8006e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	18db      	adds	r3, r3, r3
 8006e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e40:	4613      	mov	r3, r2
 8006e42:	eb42 0303 	adc.w	r3, r2, r3
 8006e46:	657b      	str	r3, [r7, #84]	; 0x54
 8006e48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e50:	f7f9 ff82 	bl	8000d58 <__aeabi_uldivmod>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4b61      	ldr	r3, [pc, #388]	; (8006fe0 <UART_SetConfig+0x2d4>)
 8006e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	011c      	lsls	r4, r3, #4
 8006e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e74:	4642      	mov	r2, r8
 8006e76:	464b      	mov	r3, r9
 8006e78:	1891      	adds	r1, r2, r2
 8006e7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e7c:	415b      	adcs	r3, r3
 8006e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e84:	4641      	mov	r1, r8
 8006e86:	eb12 0a01 	adds.w	sl, r2, r1
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	eb43 0b01 	adc.w	fp, r3, r1
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ea4:	4692      	mov	sl, r2
 8006ea6:	469b      	mov	fp, r3
 8006ea8:	4643      	mov	r3, r8
 8006eaa:	eb1a 0303 	adds.w	r3, sl, r3
 8006eae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	eb4b 0303 	adc.w	r3, fp, r3
 8006eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ec8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ecc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	18db      	adds	r3, r3, r3
 8006ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	eb42 0303 	adc.w	r3, r2, r3
 8006edc:	647b      	str	r3, [r7, #68]	; 0x44
 8006ede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ee2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ee6:	f7f9 ff37 	bl	8000d58 <__aeabi_uldivmod>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4611      	mov	r1, r2
 8006ef0:	4b3b      	ldr	r3, [pc, #236]	; (8006fe0 <UART_SetConfig+0x2d4>)
 8006ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ef6:	095b      	lsrs	r3, r3, #5
 8006ef8:	2264      	movs	r2, #100	; 0x64
 8006efa:	fb02 f303 	mul.w	r3, r2, r3
 8006efe:	1acb      	subs	r3, r1, r3
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f06:	4b36      	ldr	r3, [pc, #216]	; (8006fe0 <UART_SetConfig+0x2d4>)
 8006f08:	fba3 2302 	umull	r2, r3, r3, r2
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f14:	441c      	add	r4, r3
 8006f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f28:	4642      	mov	r2, r8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	1891      	adds	r1, r2, r2
 8006f2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f30:	415b      	adcs	r3, r3
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f38:	4641      	mov	r1, r8
 8006f3a:	1851      	adds	r1, r2, r1
 8006f3c:	6339      	str	r1, [r7, #48]	; 0x30
 8006f3e:	4649      	mov	r1, r9
 8006f40:	414b      	adcs	r3, r1
 8006f42:	637b      	str	r3, [r7, #52]	; 0x34
 8006f44:	f04f 0200 	mov.w	r2, #0
 8006f48:	f04f 0300 	mov.w	r3, #0
 8006f4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f50:	4659      	mov	r1, fp
 8006f52:	00cb      	lsls	r3, r1, #3
 8006f54:	4651      	mov	r1, sl
 8006f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f5a:	4651      	mov	r1, sl
 8006f5c:	00ca      	lsls	r2, r1, #3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	4619      	mov	r1, r3
 8006f62:	4603      	mov	r3, r0
 8006f64:	4642      	mov	r2, r8
 8006f66:	189b      	adds	r3, r3, r2
 8006f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f6c:	464b      	mov	r3, r9
 8006f6e:	460a      	mov	r2, r1
 8006f70:	eb42 0303 	adc.w	r3, r2, r3
 8006f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	18db      	adds	r3, r3, r3
 8006f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f92:	4613      	mov	r3, r2
 8006f94:	eb42 0303 	adc.w	r3, r2, r3
 8006f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fa2:	f7f9 fed9 	bl	8000d58 <__aeabi_uldivmod>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4b0d      	ldr	r3, [pc, #52]	; (8006fe0 <UART_SetConfig+0x2d4>)
 8006fac:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb0:	095b      	lsrs	r3, r3, #5
 8006fb2:	2164      	movs	r1, #100	; 0x64
 8006fb4:	fb01 f303 	mul.w	r3, r1, r3
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	3332      	adds	r3, #50	; 0x32
 8006fbe:	4a08      	ldr	r2, [pc, #32]	; (8006fe0 <UART_SetConfig+0x2d4>)
 8006fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc4:	095b      	lsrs	r3, r3, #5
 8006fc6:	f003 0207 	and.w	r2, r3, #7
 8006fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4422      	add	r2, r4
 8006fd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fd4:	e105      	b.n	80071e2 <UART_SetConfig+0x4d6>
 8006fd6:	bf00      	nop
 8006fd8:	40011000 	.word	0x40011000
 8006fdc:	40011400 	.word	0x40011400
 8006fe0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ff2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ff6:	4642      	mov	r2, r8
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	1891      	adds	r1, r2, r2
 8006ffc:	6239      	str	r1, [r7, #32]
 8006ffe:	415b      	adcs	r3, r3
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
 8007002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007006:	4641      	mov	r1, r8
 8007008:	1854      	adds	r4, r2, r1
 800700a:	4649      	mov	r1, r9
 800700c:	eb43 0501 	adc.w	r5, r3, r1
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	00eb      	lsls	r3, r5, #3
 800701a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800701e:	00e2      	lsls	r2, r4, #3
 8007020:	4614      	mov	r4, r2
 8007022:	461d      	mov	r5, r3
 8007024:	4643      	mov	r3, r8
 8007026:	18e3      	adds	r3, r4, r3
 8007028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800702c:	464b      	mov	r3, r9
 800702e:	eb45 0303 	adc.w	r3, r5, r3
 8007032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	f04f 0300 	mov.w	r3, #0
 800704e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007052:	4629      	mov	r1, r5
 8007054:	008b      	lsls	r3, r1, #2
 8007056:	4621      	mov	r1, r4
 8007058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800705c:	4621      	mov	r1, r4
 800705e:	008a      	lsls	r2, r1, #2
 8007060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007064:	f7f9 fe78 	bl	8000d58 <__aeabi_uldivmod>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4b60      	ldr	r3, [pc, #384]	; (80071f0 <UART_SetConfig+0x4e4>)
 800706e:	fba3 2302 	umull	r2, r3, r3, r2
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	011c      	lsls	r4, r3, #4
 8007076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800707a:	2200      	movs	r2, #0
 800707c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007080:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007084:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007088:	4642      	mov	r2, r8
 800708a:	464b      	mov	r3, r9
 800708c:	1891      	adds	r1, r2, r2
 800708e:	61b9      	str	r1, [r7, #24]
 8007090:	415b      	adcs	r3, r3
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007098:	4641      	mov	r1, r8
 800709a:	1851      	adds	r1, r2, r1
 800709c:	6139      	str	r1, [r7, #16]
 800709e:	4649      	mov	r1, r9
 80070a0:	414b      	adcs	r3, r1
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070b0:	4659      	mov	r1, fp
 80070b2:	00cb      	lsls	r3, r1, #3
 80070b4:	4651      	mov	r1, sl
 80070b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ba:	4651      	mov	r1, sl
 80070bc:	00ca      	lsls	r2, r1, #3
 80070be:	4610      	mov	r0, r2
 80070c0:	4619      	mov	r1, r3
 80070c2:	4603      	mov	r3, r0
 80070c4:	4642      	mov	r2, r8
 80070c6:	189b      	adds	r3, r3, r2
 80070c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070cc:	464b      	mov	r3, r9
 80070ce:	460a      	mov	r2, r1
 80070d0:	eb42 0303 	adc.w	r3, r2, r3
 80070d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80070e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80070f0:	4649      	mov	r1, r9
 80070f2:	008b      	lsls	r3, r1, #2
 80070f4:	4641      	mov	r1, r8
 80070f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070fa:	4641      	mov	r1, r8
 80070fc:	008a      	lsls	r2, r1, #2
 80070fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007102:	f7f9 fe29 	bl	8000d58 <__aeabi_uldivmod>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	4b39      	ldr	r3, [pc, #228]	; (80071f0 <UART_SetConfig+0x4e4>)
 800710c:	fba3 1302 	umull	r1, r3, r3, r2
 8007110:	095b      	lsrs	r3, r3, #5
 8007112:	2164      	movs	r1, #100	; 0x64
 8007114:	fb01 f303 	mul.w	r3, r1, r3
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	3332      	adds	r3, #50	; 0x32
 800711e:	4a34      	ldr	r2, [pc, #208]	; (80071f0 <UART_SetConfig+0x4e4>)
 8007120:	fba2 2303 	umull	r2, r3, r2, r3
 8007124:	095b      	lsrs	r3, r3, #5
 8007126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800712a:	441c      	add	r4, r3
 800712c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007130:	2200      	movs	r2, #0
 8007132:	673b      	str	r3, [r7, #112]	; 0x70
 8007134:	677a      	str	r2, [r7, #116]	; 0x74
 8007136:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800713a:	4642      	mov	r2, r8
 800713c:	464b      	mov	r3, r9
 800713e:	1891      	adds	r1, r2, r2
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	415b      	adcs	r3, r3
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800714a:	4641      	mov	r1, r8
 800714c:	1851      	adds	r1, r2, r1
 800714e:	6039      	str	r1, [r7, #0]
 8007150:	4649      	mov	r1, r9
 8007152:	414b      	adcs	r3, r1
 8007154:	607b      	str	r3, [r7, #4]
 8007156:	f04f 0200 	mov.w	r2, #0
 800715a:	f04f 0300 	mov.w	r3, #0
 800715e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007162:	4659      	mov	r1, fp
 8007164:	00cb      	lsls	r3, r1, #3
 8007166:	4651      	mov	r1, sl
 8007168:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800716c:	4651      	mov	r1, sl
 800716e:	00ca      	lsls	r2, r1, #3
 8007170:	4610      	mov	r0, r2
 8007172:	4619      	mov	r1, r3
 8007174:	4603      	mov	r3, r0
 8007176:	4642      	mov	r2, r8
 8007178:	189b      	adds	r3, r3, r2
 800717a:	66bb      	str	r3, [r7, #104]	; 0x68
 800717c:	464b      	mov	r3, r9
 800717e:	460a      	mov	r2, r1
 8007180:	eb42 0303 	adc.w	r3, r2, r3
 8007184:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	663b      	str	r3, [r7, #96]	; 0x60
 8007190:	667a      	str	r2, [r7, #100]	; 0x64
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	f04f 0300 	mov.w	r3, #0
 800719a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800719e:	4649      	mov	r1, r9
 80071a0:	008b      	lsls	r3, r1, #2
 80071a2:	4641      	mov	r1, r8
 80071a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071a8:	4641      	mov	r1, r8
 80071aa:	008a      	lsls	r2, r1, #2
 80071ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071b0:	f7f9 fdd2 	bl	8000d58 <__aeabi_uldivmod>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <UART_SetConfig+0x4e4>)
 80071ba:	fba3 1302 	umull	r1, r3, r3, r2
 80071be:	095b      	lsrs	r3, r3, #5
 80071c0:	2164      	movs	r1, #100	; 0x64
 80071c2:	fb01 f303 	mul.w	r3, r1, r3
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	3332      	adds	r3, #50	; 0x32
 80071cc:	4a08      	ldr	r2, [pc, #32]	; (80071f0 <UART_SetConfig+0x4e4>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	f003 020f 	and.w	r2, r3, #15
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4422      	add	r2, r4
 80071e0:	609a      	str	r2, [r3, #8]
}
 80071e2:	bf00      	nop
 80071e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80071e8:	46bd      	mov	sp, r7
 80071ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071ee:	bf00      	nop
 80071f0:	51eb851f 	.word	0x51eb851f
 80071f4:	00000000 	.word	0x00000000

080071f8 <cos>:
 80071f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071fa:	ec53 2b10 	vmov	r2, r3, d0
 80071fe:	4826      	ldr	r0, [pc, #152]	; (8007298 <cos+0xa0>)
 8007200:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007204:	4281      	cmp	r1, r0
 8007206:	dc06      	bgt.n	8007216 <cos+0x1e>
 8007208:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007290 <cos+0x98>
 800720c:	b005      	add	sp, #20
 800720e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007212:	f000 bdd1 	b.w	8007db8 <__kernel_cos>
 8007216:	4821      	ldr	r0, [pc, #132]	; (800729c <cos+0xa4>)
 8007218:	4281      	cmp	r1, r0
 800721a:	dd09      	ble.n	8007230 <cos+0x38>
 800721c:	ee10 0a10 	vmov	r0, s0
 8007220:	4619      	mov	r1, r3
 8007222:	f7f9 f849 	bl	80002b8 <__aeabi_dsub>
 8007226:	ec41 0b10 	vmov	d0, r0, r1
 800722a:	b005      	add	sp, #20
 800722c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007230:	4668      	mov	r0, sp
 8007232:	f000 fb01 	bl	8007838 <__ieee754_rem_pio2>
 8007236:	f000 0003 	and.w	r0, r0, #3
 800723a:	2801      	cmp	r0, #1
 800723c:	d00b      	beq.n	8007256 <cos+0x5e>
 800723e:	2802      	cmp	r0, #2
 8007240:	d016      	beq.n	8007270 <cos+0x78>
 8007242:	b9e0      	cbnz	r0, 800727e <cos+0x86>
 8007244:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007248:	ed9d 0b00 	vldr	d0, [sp]
 800724c:	f000 fdb4 	bl	8007db8 <__kernel_cos>
 8007250:	ec51 0b10 	vmov	r0, r1, d0
 8007254:	e7e7      	b.n	8007226 <cos+0x2e>
 8007256:	ed9d 1b02 	vldr	d1, [sp, #8]
 800725a:	ed9d 0b00 	vldr	d0, [sp]
 800725e:	f001 f9c3 	bl	80085e8 <__kernel_sin>
 8007262:	ec53 2b10 	vmov	r2, r3, d0
 8007266:	ee10 0a10 	vmov	r0, s0
 800726a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800726e:	e7da      	b.n	8007226 <cos+0x2e>
 8007270:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007274:	ed9d 0b00 	vldr	d0, [sp]
 8007278:	f000 fd9e 	bl	8007db8 <__kernel_cos>
 800727c:	e7f1      	b.n	8007262 <cos+0x6a>
 800727e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007282:	ed9d 0b00 	vldr	d0, [sp]
 8007286:	2001      	movs	r0, #1
 8007288:	f001 f9ae 	bl	80085e8 <__kernel_sin>
 800728c:	e7e0      	b.n	8007250 <cos+0x58>
 800728e:	bf00      	nop
	...
 8007298:	3fe921fb 	.word	0x3fe921fb
 800729c:	7fefffff 	.word	0x7fefffff

080072a0 <sin>:
 80072a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072a2:	ec53 2b10 	vmov	r2, r3, d0
 80072a6:	4828      	ldr	r0, [pc, #160]	; (8007348 <sin+0xa8>)
 80072a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80072ac:	4281      	cmp	r1, r0
 80072ae:	dc07      	bgt.n	80072c0 <sin+0x20>
 80072b0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007340 <sin+0xa0>
 80072b4:	2000      	movs	r0, #0
 80072b6:	b005      	add	sp, #20
 80072b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072bc:	f001 b994 	b.w	80085e8 <__kernel_sin>
 80072c0:	4822      	ldr	r0, [pc, #136]	; (800734c <sin+0xac>)
 80072c2:	4281      	cmp	r1, r0
 80072c4:	dd09      	ble.n	80072da <sin+0x3a>
 80072c6:	ee10 0a10 	vmov	r0, s0
 80072ca:	4619      	mov	r1, r3
 80072cc:	f7f8 fff4 	bl	80002b8 <__aeabi_dsub>
 80072d0:	ec41 0b10 	vmov	d0, r0, r1
 80072d4:	b005      	add	sp, #20
 80072d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80072da:	4668      	mov	r0, sp
 80072dc:	f000 faac 	bl	8007838 <__ieee754_rem_pio2>
 80072e0:	f000 0003 	and.w	r0, r0, #3
 80072e4:	2801      	cmp	r0, #1
 80072e6:	d00c      	beq.n	8007302 <sin+0x62>
 80072e8:	2802      	cmp	r0, #2
 80072ea:	d011      	beq.n	8007310 <sin+0x70>
 80072ec:	b9f0      	cbnz	r0, 800732c <sin+0x8c>
 80072ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072f2:	ed9d 0b00 	vldr	d0, [sp]
 80072f6:	2001      	movs	r0, #1
 80072f8:	f001 f976 	bl	80085e8 <__kernel_sin>
 80072fc:	ec51 0b10 	vmov	r0, r1, d0
 8007300:	e7e6      	b.n	80072d0 <sin+0x30>
 8007302:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007306:	ed9d 0b00 	vldr	d0, [sp]
 800730a:	f000 fd55 	bl	8007db8 <__kernel_cos>
 800730e:	e7f5      	b.n	80072fc <sin+0x5c>
 8007310:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007314:	ed9d 0b00 	vldr	d0, [sp]
 8007318:	2001      	movs	r0, #1
 800731a:	f001 f965 	bl	80085e8 <__kernel_sin>
 800731e:	ec53 2b10 	vmov	r2, r3, d0
 8007322:	ee10 0a10 	vmov	r0, s0
 8007326:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800732a:	e7d1      	b.n	80072d0 <sin+0x30>
 800732c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007330:	ed9d 0b00 	vldr	d0, [sp]
 8007334:	f000 fd40 	bl	8007db8 <__kernel_cos>
 8007338:	e7f1      	b.n	800731e <sin+0x7e>
 800733a:	bf00      	nop
 800733c:	f3af 8000 	nop.w
	...
 8007348:	3fe921fb 	.word	0x3fe921fb
 800734c:	7fefffff 	.word	0x7fefffff

08007350 <asin>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	ed2d 8b02 	vpush	{d8}
 8007356:	ec55 4b10 	vmov	r4, r5, d0
 800735a:	f000 f859 	bl	8007410 <__ieee754_asin>
 800735e:	4622      	mov	r2, r4
 8007360:	462b      	mov	r3, r5
 8007362:	4620      	mov	r0, r4
 8007364:	4629      	mov	r1, r5
 8007366:	eeb0 8a40 	vmov.f32	s16, s0
 800736a:	eef0 8a60 	vmov.f32	s17, s1
 800736e:	f7f9 fbf5 	bl	8000b5c <__aeabi_dcmpun>
 8007372:	b9a8      	cbnz	r0, 80073a0 <asin+0x50>
 8007374:	ec45 4b10 	vmov	d0, r4, r5
 8007378:	f001 f9f4 	bl	8008764 <fabs>
 800737c:	4b0c      	ldr	r3, [pc, #48]	; (80073b0 <asin+0x60>)
 800737e:	ec51 0b10 	vmov	r0, r1, d0
 8007382:	2200      	movs	r2, #0
 8007384:	f7f9 fbe0 	bl	8000b48 <__aeabi_dcmpgt>
 8007388:	b150      	cbz	r0, 80073a0 <asin+0x50>
 800738a:	f001 fb07 	bl	800899c <__errno>
 800738e:	ecbd 8b02 	vpop	{d8}
 8007392:	2321      	movs	r3, #33	; 0x21
 8007394:	6003      	str	r3, [r0, #0]
 8007396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800739a:	4806      	ldr	r0, [pc, #24]	; (80073b4 <asin+0x64>)
 800739c:	f001 ba6c 	b.w	8008878 <nan>
 80073a0:	eeb0 0a48 	vmov.f32	s0, s16
 80073a4:	eef0 0a68 	vmov.f32	s1, s17
 80073a8:	ecbd 8b02 	vpop	{d8}
 80073ac:	bd38      	pop	{r3, r4, r5, pc}
 80073ae:	bf00      	nop
 80073b0:	3ff00000 	.word	0x3ff00000
 80073b4:	0801008f 	.word	0x0801008f

080073b8 <sqrt>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	ed2d 8b02 	vpush	{d8}
 80073be:	ec55 4b10 	vmov	r4, r5, d0
 80073c2:	f000 fc45 	bl	8007c50 <__ieee754_sqrt>
 80073c6:	4622      	mov	r2, r4
 80073c8:	462b      	mov	r3, r5
 80073ca:	4620      	mov	r0, r4
 80073cc:	4629      	mov	r1, r5
 80073ce:	eeb0 8a40 	vmov.f32	s16, s0
 80073d2:	eef0 8a60 	vmov.f32	s17, s1
 80073d6:	f7f9 fbc1 	bl	8000b5c <__aeabi_dcmpun>
 80073da:	b990      	cbnz	r0, 8007402 <sqrt+0x4a>
 80073dc:	2200      	movs	r2, #0
 80073de:	2300      	movs	r3, #0
 80073e0:	4620      	mov	r0, r4
 80073e2:	4629      	mov	r1, r5
 80073e4:	f7f9 fb92 	bl	8000b0c <__aeabi_dcmplt>
 80073e8:	b158      	cbz	r0, 8007402 <sqrt+0x4a>
 80073ea:	f001 fad7 	bl	800899c <__errno>
 80073ee:	2321      	movs	r3, #33	; 0x21
 80073f0:	6003      	str	r3, [r0, #0]
 80073f2:	2200      	movs	r2, #0
 80073f4:	2300      	movs	r3, #0
 80073f6:	4610      	mov	r0, r2
 80073f8:	4619      	mov	r1, r3
 80073fa:	f7f9 fa3f 	bl	800087c <__aeabi_ddiv>
 80073fe:	ec41 0b18 	vmov	d8, r0, r1
 8007402:	eeb0 0a48 	vmov.f32	s0, s16
 8007406:	eef0 0a68 	vmov.f32	s1, s17
 800740a:	ecbd 8b02 	vpop	{d8}
 800740e:	bd38      	pop	{r3, r4, r5, pc}

08007410 <__ieee754_asin>:
 8007410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	ed2d 8b04 	vpush	{d8-d9}
 8007418:	ec55 4b10 	vmov	r4, r5, d0
 800741c:	4bcc      	ldr	r3, [pc, #816]	; (8007750 <__ieee754_asin+0x340>)
 800741e:	b083      	sub	sp, #12
 8007420:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007424:	4598      	cmp	r8, r3
 8007426:	9501      	str	r5, [sp, #4]
 8007428:	dd35      	ble.n	8007496 <__ieee754_asin+0x86>
 800742a:	ee10 3a10 	vmov	r3, s0
 800742e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007432:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007436:	ea58 0303 	orrs.w	r3, r8, r3
 800743a:	d117      	bne.n	800746c <__ieee754_asin+0x5c>
 800743c:	a3aa      	add	r3, pc, #680	; (adr r3, 80076e8 <__ieee754_asin+0x2d8>)
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	ee10 0a10 	vmov	r0, s0
 8007446:	4629      	mov	r1, r5
 8007448:	f7f9 f8ee 	bl	8000628 <__aeabi_dmul>
 800744c:	a3a8      	add	r3, pc, #672	; (adr r3, 80076f0 <__ieee754_asin+0x2e0>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	4606      	mov	r6, r0
 8007454:	460f      	mov	r7, r1
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f7f9 f8e5 	bl	8000628 <__aeabi_dmul>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4630      	mov	r0, r6
 8007464:	4639      	mov	r1, r7
 8007466:	f7f8 ff29 	bl	80002bc <__adddf3>
 800746a:	e00b      	b.n	8007484 <__ieee754_asin+0x74>
 800746c:	ee10 2a10 	vmov	r2, s0
 8007470:	462b      	mov	r3, r5
 8007472:	ee10 0a10 	vmov	r0, s0
 8007476:	4629      	mov	r1, r5
 8007478:	f7f8 ff1e 	bl	80002b8 <__aeabi_dsub>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	f7f9 f9fc 	bl	800087c <__aeabi_ddiv>
 8007484:	4604      	mov	r4, r0
 8007486:	460d      	mov	r5, r1
 8007488:	ec45 4b10 	vmov	d0, r4, r5
 800748c:	b003      	add	sp, #12
 800748e:	ecbd 8b04 	vpop	{d8-d9}
 8007492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007496:	4baf      	ldr	r3, [pc, #700]	; (8007754 <__ieee754_asin+0x344>)
 8007498:	4598      	cmp	r8, r3
 800749a:	dc11      	bgt.n	80074c0 <__ieee754_asin+0xb0>
 800749c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80074a0:	f280 80ae 	bge.w	8007600 <__ieee754_asin+0x1f0>
 80074a4:	a394      	add	r3, pc, #592	; (adr r3, 80076f8 <__ieee754_asin+0x2e8>)
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	ee10 0a10 	vmov	r0, s0
 80074ae:	4629      	mov	r1, r5
 80074b0:	f7f8 ff04 	bl	80002bc <__adddf3>
 80074b4:	4ba8      	ldr	r3, [pc, #672]	; (8007758 <__ieee754_asin+0x348>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	f7f9 fb46 	bl	8000b48 <__aeabi_dcmpgt>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d1e3      	bne.n	8007488 <__ieee754_asin+0x78>
 80074c0:	ec45 4b10 	vmov	d0, r4, r5
 80074c4:	f001 f94e 	bl	8008764 <fabs>
 80074c8:	49a3      	ldr	r1, [pc, #652]	; (8007758 <__ieee754_asin+0x348>)
 80074ca:	ec53 2b10 	vmov	r2, r3, d0
 80074ce:	2000      	movs	r0, #0
 80074d0:	f7f8 fef2 	bl	80002b8 <__aeabi_dsub>
 80074d4:	4ba1      	ldr	r3, [pc, #644]	; (800775c <__ieee754_asin+0x34c>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	f7f9 f8a6 	bl	8000628 <__aeabi_dmul>
 80074dc:	a388      	add	r3, pc, #544	; (adr r3, 8007700 <__ieee754_asin+0x2f0>)
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	4604      	mov	r4, r0
 80074e4:	460d      	mov	r5, r1
 80074e6:	f7f9 f89f 	bl	8000628 <__aeabi_dmul>
 80074ea:	a387      	add	r3, pc, #540	; (adr r3, 8007708 <__ieee754_asin+0x2f8>)
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	f7f8 fee4 	bl	80002bc <__adddf3>
 80074f4:	4622      	mov	r2, r4
 80074f6:	462b      	mov	r3, r5
 80074f8:	f7f9 f896 	bl	8000628 <__aeabi_dmul>
 80074fc:	a384      	add	r3, pc, #528	; (adr r3, 8007710 <__ieee754_asin+0x300>)
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f7f8 fed9 	bl	80002b8 <__aeabi_dsub>
 8007506:	4622      	mov	r2, r4
 8007508:	462b      	mov	r3, r5
 800750a:	f7f9 f88d 	bl	8000628 <__aeabi_dmul>
 800750e:	a382      	add	r3, pc, #520	; (adr r3, 8007718 <__ieee754_asin+0x308>)
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	f7f8 fed2 	bl	80002bc <__adddf3>
 8007518:	4622      	mov	r2, r4
 800751a:	462b      	mov	r3, r5
 800751c:	f7f9 f884 	bl	8000628 <__aeabi_dmul>
 8007520:	a37f      	add	r3, pc, #508	; (adr r3, 8007720 <__ieee754_asin+0x310>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	f7f8 fec7 	bl	80002b8 <__aeabi_dsub>
 800752a:	4622      	mov	r2, r4
 800752c:	462b      	mov	r3, r5
 800752e:	f7f9 f87b 	bl	8000628 <__aeabi_dmul>
 8007532:	a37d      	add	r3, pc, #500	; (adr r3, 8007728 <__ieee754_asin+0x318>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	f7f8 fec0 	bl	80002bc <__adddf3>
 800753c:	4622      	mov	r2, r4
 800753e:	462b      	mov	r3, r5
 8007540:	f7f9 f872 	bl	8000628 <__aeabi_dmul>
 8007544:	a37a      	add	r3, pc, #488	; (adr r3, 8007730 <__ieee754_asin+0x320>)
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	ec41 0b18 	vmov	d8, r0, r1
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f9 f869 	bl	8000628 <__aeabi_dmul>
 8007556:	a378      	add	r3, pc, #480	; (adr r3, 8007738 <__ieee754_asin+0x328>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	f7f8 feac 	bl	80002b8 <__aeabi_dsub>
 8007560:	4622      	mov	r2, r4
 8007562:	462b      	mov	r3, r5
 8007564:	f7f9 f860 	bl	8000628 <__aeabi_dmul>
 8007568:	a375      	add	r3, pc, #468	; (adr r3, 8007740 <__ieee754_asin+0x330>)
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	f7f8 fea5 	bl	80002bc <__adddf3>
 8007572:	4622      	mov	r2, r4
 8007574:	462b      	mov	r3, r5
 8007576:	f7f9 f857 	bl	8000628 <__aeabi_dmul>
 800757a:	a373      	add	r3, pc, #460	; (adr r3, 8007748 <__ieee754_asin+0x338>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f7f8 fe9a 	bl	80002b8 <__aeabi_dsub>
 8007584:	4622      	mov	r2, r4
 8007586:	462b      	mov	r3, r5
 8007588:	f7f9 f84e 	bl	8000628 <__aeabi_dmul>
 800758c:	4b72      	ldr	r3, [pc, #456]	; (8007758 <__ieee754_asin+0x348>)
 800758e:	2200      	movs	r2, #0
 8007590:	f7f8 fe94 	bl	80002bc <__adddf3>
 8007594:	ec45 4b10 	vmov	d0, r4, r5
 8007598:	4606      	mov	r6, r0
 800759a:	460f      	mov	r7, r1
 800759c:	f000 fb58 	bl	8007c50 <__ieee754_sqrt>
 80075a0:	4b6f      	ldr	r3, [pc, #444]	; (8007760 <__ieee754_asin+0x350>)
 80075a2:	4598      	cmp	r8, r3
 80075a4:	ec5b ab10 	vmov	sl, fp, d0
 80075a8:	f340 80dc 	ble.w	8007764 <__ieee754_asin+0x354>
 80075ac:	4632      	mov	r2, r6
 80075ae:	463b      	mov	r3, r7
 80075b0:	ec51 0b18 	vmov	r0, r1, d8
 80075b4:	f7f9 f962 	bl	800087c <__aeabi_ddiv>
 80075b8:	4652      	mov	r2, sl
 80075ba:	465b      	mov	r3, fp
 80075bc:	f7f9 f834 	bl	8000628 <__aeabi_dmul>
 80075c0:	4652      	mov	r2, sl
 80075c2:	465b      	mov	r3, fp
 80075c4:	f7f8 fe7a 	bl	80002bc <__adddf3>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	f7f8 fe76 	bl	80002bc <__adddf3>
 80075d0:	a347      	add	r3, pc, #284	; (adr r3, 80076f0 <__ieee754_asin+0x2e0>)
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f7f8 fe6f 	bl	80002b8 <__aeabi_dsub>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	a142      	add	r1, pc, #264	; (adr r1, 80076e8 <__ieee754_asin+0x2d8>)
 80075e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075e4:	f7f8 fe68 	bl	80002b8 <__aeabi_dsub>
 80075e8:	9b01      	ldr	r3, [sp, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bfdc      	itt	le
 80075ee:	4602      	movle	r2, r0
 80075f0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80075f4:	4604      	mov	r4, r0
 80075f6:	460d      	mov	r5, r1
 80075f8:	bfdc      	itt	le
 80075fa:	4614      	movle	r4, r2
 80075fc:	461d      	movle	r5, r3
 80075fe:	e743      	b.n	8007488 <__ieee754_asin+0x78>
 8007600:	ee10 2a10 	vmov	r2, s0
 8007604:	ee10 0a10 	vmov	r0, s0
 8007608:	462b      	mov	r3, r5
 800760a:	4629      	mov	r1, r5
 800760c:	f7f9 f80c 	bl	8000628 <__aeabi_dmul>
 8007610:	a33b      	add	r3, pc, #236	; (adr r3, 8007700 <__ieee754_asin+0x2f0>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	4606      	mov	r6, r0
 8007618:	460f      	mov	r7, r1
 800761a:	f7f9 f805 	bl	8000628 <__aeabi_dmul>
 800761e:	a33a      	add	r3, pc, #232	; (adr r3, 8007708 <__ieee754_asin+0x2f8>)
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	f7f8 fe4a 	bl	80002bc <__adddf3>
 8007628:	4632      	mov	r2, r6
 800762a:	463b      	mov	r3, r7
 800762c:	f7f8 fffc 	bl	8000628 <__aeabi_dmul>
 8007630:	a337      	add	r3, pc, #220	; (adr r3, 8007710 <__ieee754_asin+0x300>)
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	f7f8 fe3f 	bl	80002b8 <__aeabi_dsub>
 800763a:	4632      	mov	r2, r6
 800763c:	463b      	mov	r3, r7
 800763e:	f7f8 fff3 	bl	8000628 <__aeabi_dmul>
 8007642:	a335      	add	r3, pc, #212	; (adr r3, 8007718 <__ieee754_asin+0x308>)
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f7f8 fe38 	bl	80002bc <__adddf3>
 800764c:	4632      	mov	r2, r6
 800764e:	463b      	mov	r3, r7
 8007650:	f7f8 ffea 	bl	8000628 <__aeabi_dmul>
 8007654:	a332      	add	r3, pc, #200	; (adr r3, 8007720 <__ieee754_asin+0x310>)
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	f7f8 fe2d 	bl	80002b8 <__aeabi_dsub>
 800765e:	4632      	mov	r2, r6
 8007660:	463b      	mov	r3, r7
 8007662:	f7f8 ffe1 	bl	8000628 <__aeabi_dmul>
 8007666:	a330      	add	r3, pc, #192	; (adr r3, 8007728 <__ieee754_asin+0x318>)
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f7f8 fe26 	bl	80002bc <__adddf3>
 8007670:	4632      	mov	r2, r6
 8007672:	463b      	mov	r3, r7
 8007674:	f7f8 ffd8 	bl	8000628 <__aeabi_dmul>
 8007678:	a32d      	add	r3, pc, #180	; (adr r3, 8007730 <__ieee754_asin+0x320>)
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	4680      	mov	r8, r0
 8007680:	4689      	mov	r9, r1
 8007682:	4630      	mov	r0, r6
 8007684:	4639      	mov	r1, r7
 8007686:	f7f8 ffcf 	bl	8000628 <__aeabi_dmul>
 800768a:	a32b      	add	r3, pc, #172	; (adr r3, 8007738 <__ieee754_asin+0x328>)
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f7f8 fe12 	bl	80002b8 <__aeabi_dsub>
 8007694:	4632      	mov	r2, r6
 8007696:	463b      	mov	r3, r7
 8007698:	f7f8 ffc6 	bl	8000628 <__aeabi_dmul>
 800769c:	a328      	add	r3, pc, #160	; (adr r3, 8007740 <__ieee754_asin+0x330>)
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f7f8 fe0b 	bl	80002bc <__adddf3>
 80076a6:	4632      	mov	r2, r6
 80076a8:	463b      	mov	r3, r7
 80076aa:	f7f8 ffbd 	bl	8000628 <__aeabi_dmul>
 80076ae:	a326      	add	r3, pc, #152	; (adr r3, 8007748 <__ieee754_asin+0x338>)
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	f7f8 fe00 	bl	80002b8 <__aeabi_dsub>
 80076b8:	4632      	mov	r2, r6
 80076ba:	463b      	mov	r3, r7
 80076bc:	f7f8 ffb4 	bl	8000628 <__aeabi_dmul>
 80076c0:	4b25      	ldr	r3, [pc, #148]	; (8007758 <__ieee754_asin+0x348>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	f7f8 fdfa 	bl	80002bc <__adddf3>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4640      	mov	r0, r8
 80076ce:	4649      	mov	r1, r9
 80076d0:	f7f9 f8d4 	bl	800087c <__aeabi_ddiv>
 80076d4:	4622      	mov	r2, r4
 80076d6:	462b      	mov	r3, r5
 80076d8:	f7f8 ffa6 	bl	8000628 <__aeabi_dmul>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4620      	mov	r0, r4
 80076e2:	4629      	mov	r1, r5
 80076e4:	e6bf      	b.n	8007466 <__ieee754_asin+0x56>
 80076e6:	bf00      	nop
 80076e8:	54442d18 	.word	0x54442d18
 80076ec:	3ff921fb 	.word	0x3ff921fb
 80076f0:	33145c07 	.word	0x33145c07
 80076f4:	3c91a626 	.word	0x3c91a626
 80076f8:	8800759c 	.word	0x8800759c
 80076fc:	7e37e43c 	.word	0x7e37e43c
 8007700:	0dfdf709 	.word	0x0dfdf709
 8007704:	3f023de1 	.word	0x3f023de1
 8007708:	7501b288 	.word	0x7501b288
 800770c:	3f49efe0 	.word	0x3f49efe0
 8007710:	b5688f3b 	.word	0xb5688f3b
 8007714:	3fa48228 	.word	0x3fa48228
 8007718:	0e884455 	.word	0x0e884455
 800771c:	3fc9c155 	.word	0x3fc9c155
 8007720:	03eb6f7d 	.word	0x03eb6f7d
 8007724:	3fd4d612 	.word	0x3fd4d612
 8007728:	55555555 	.word	0x55555555
 800772c:	3fc55555 	.word	0x3fc55555
 8007730:	b12e9282 	.word	0xb12e9282
 8007734:	3fb3b8c5 	.word	0x3fb3b8c5
 8007738:	1b8d0159 	.word	0x1b8d0159
 800773c:	3fe6066c 	.word	0x3fe6066c
 8007740:	9c598ac8 	.word	0x9c598ac8
 8007744:	40002ae5 	.word	0x40002ae5
 8007748:	1c8a2d4b 	.word	0x1c8a2d4b
 800774c:	40033a27 	.word	0x40033a27
 8007750:	3fefffff 	.word	0x3fefffff
 8007754:	3fdfffff 	.word	0x3fdfffff
 8007758:	3ff00000 	.word	0x3ff00000
 800775c:	3fe00000 	.word	0x3fe00000
 8007760:	3fef3332 	.word	0x3fef3332
 8007764:	ee10 2a10 	vmov	r2, s0
 8007768:	ee10 0a10 	vmov	r0, s0
 800776c:	465b      	mov	r3, fp
 800776e:	4659      	mov	r1, fp
 8007770:	f7f8 fda4 	bl	80002bc <__adddf3>
 8007774:	4632      	mov	r2, r6
 8007776:	463b      	mov	r3, r7
 8007778:	ec41 0b19 	vmov	d9, r0, r1
 800777c:	ec51 0b18 	vmov	r0, r1, d8
 8007780:	f7f9 f87c 	bl	800087c <__aeabi_ddiv>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	ec51 0b19 	vmov	r0, r1, d9
 800778c:	f7f8 ff4c 	bl	8000628 <__aeabi_dmul>
 8007790:	f04f 0800 	mov.w	r8, #0
 8007794:	4606      	mov	r6, r0
 8007796:	460f      	mov	r7, r1
 8007798:	4642      	mov	r2, r8
 800779a:	465b      	mov	r3, fp
 800779c:	4640      	mov	r0, r8
 800779e:	4659      	mov	r1, fp
 80077a0:	f7f8 ff42 	bl	8000628 <__aeabi_dmul>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4620      	mov	r0, r4
 80077aa:	4629      	mov	r1, r5
 80077ac:	f7f8 fd84 	bl	80002b8 <__aeabi_dsub>
 80077b0:	4642      	mov	r2, r8
 80077b2:	4604      	mov	r4, r0
 80077b4:	460d      	mov	r5, r1
 80077b6:	465b      	mov	r3, fp
 80077b8:	4650      	mov	r0, sl
 80077ba:	4659      	mov	r1, fp
 80077bc:	f7f8 fd7e 	bl	80002bc <__adddf3>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4620      	mov	r0, r4
 80077c6:	4629      	mov	r1, r5
 80077c8:	f7f9 f858 	bl	800087c <__aeabi_ddiv>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	f7f8 fd74 	bl	80002bc <__adddf3>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	a113      	add	r1, pc, #76	; (adr r1, 8007828 <__ieee754_asin+0x418>)
 80077da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077de:	f7f8 fd6b 	bl	80002b8 <__aeabi_dsub>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4630      	mov	r0, r6
 80077e8:	4639      	mov	r1, r7
 80077ea:	f7f8 fd65 	bl	80002b8 <__aeabi_dsub>
 80077ee:	4642      	mov	r2, r8
 80077f0:	4604      	mov	r4, r0
 80077f2:	460d      	mov	r5, r1
 80077f4:	465b      	mov	r3, fp
 80077f6:	4640      	mov	r0, r8
 80077f8:	4659      	mov	r1, fp
 80077fa:	f7f8 fd5f 	bl	80002bc <__adddf3>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	a10b      	add	r1, pc, #44	; (adr r1, 8007830 <__ieee754_asin+0x420>)
 8007804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007808:	f7f8 fd56 	bl	80002b8 <__aeabi_dsub>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4620      	mov	r0, r4
 8007812:	4629      	mov	r1, r5
 8007814:	f7f8 fd50 	bl	80002b8 <__aeabi_dsub>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	a104      	add	r1, pc, #16	; (adr r1, 8007830 <__ieee754_asin+0x420>)
 800781e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007822:	e6df      	b.n	80075e4 <__ieee754_asin+0x1d4>
 8007824:	f3af 8000 	nop.w
 8007828:	33145c07 	.word	0x33145c07
 800782c:	3c91a626 	.word	0x3c91a626
 8007830:	54442d18 	.word	0x54442d18
 8007834:	3fe921fb 	.word	0x3fe921fb

08007838 <__ieee754_rem_pio2>:
 8007838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783c:	ed2d 8b02 	vpush	{d8}
 8007840:	ec55 4b10 	vmov	r4, r5, d0
 8007844:	4bca      	ldr	r3, [pc, #808]	; (8007b70 <__ieee754_rem_pio2+0x338>)
 8007846:	b08b      	sub	sp, #44	; 0x2c
 8007848:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800784c:	4598      	cmp	r8, r3
 800784e:	4682      	mov	sl, r0
 8007850:	9502      	str	r5, [sp, #8]
 8007852:	dc08      	bgt.n	8007866 <__ieee754_rem_pio2+0x2e>
 8007854:	2200      	movs	r2, #0
 8007856:	2300      	movs	r3, #0
 8007858:	ed80 0b00 	vstr	d0, [r0]
 800785c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007860:	f04f 0b00 	mov.w	fp, #0
 8007864:	e028      	b.n	80078b8 <__ieee754_rem_pio2+0x80>
 8007866:	4bc3      	ldr	r3, [pc, #780]	; (8007b74 <__ieee754_rem_pio2+0x33c>)
 8007868:	4598      	cmp	r8, r3
 800786a:	dc78      	bgt.n	800795e <__ieee754_rem_pio2+0x126>
 800786c:	9b02      	ldr	r3, [sp, #8]
 800786e:	4ec2      	ldr	r6, [pc, #776]	; (8007b78 <__ieee754_rem_pio2+0x340>)
 8007870:	2b00      	cmp	r3, #0
 8007872:	ee10 0a10 	vmov	r0, s0
 8007876:	a3b0      	add	r3, pc, #704	; (adr r3, 8007b38 <__ieee754_rem_pio2+0x300>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	4629      	mov	r1, r5
 800787e:	dd39      	ble.n	80078f4 <__ieee754_rem_pio2+0xbc>
 8007880:	f7f8 fd1a 	bl	80002b8 <__aeabi_dsub>
 8007884:	45b0      	cmp	r8, r6
 8007886:	4604      	mov	r4, r0
 8007888:	460d      	mov	r5, r1
 800788a:	d01b      	beq.n	80078c4 <__ieee754_rem_pio2+0x8c>
 800788c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x308>)
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f7f8 fd11 	bl	80002b8 <__aeabi_dsub>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	e9ca 2300 	strd	r2, r3, [sl]
 800789e:	4620      	mov	r0, r4
 80078a0:	4629      	mov	r1, r5
 80078a2:	f7f8 fd09 	bl	80002b8 <__aeabi_dsub>
 80078a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x308>)
 80078a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ac:	f7f8 fd04 	bl	80002b8 <__aeabi_dsub>
 80078b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80078b4:	f04f 0b01 	mov.w	fp, #1
 80078b8:	4658      	mov	r0, fp
 80078ba:	b00b      	add	sp, #44	; 0x2c
 80078bc:	ecbd 8b02 	vpop	{d8}
 80078c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8007b48 <__ieee754_rem_pio2+0x310>)
 80078c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ca:	f7f8 fcf5 	bl	80002b8 <__aeabi_dsub>
 80078ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x318>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	4604      	mov	r4, r0
 80078d6:	460d      	mov	r5, r1
 80078d8:	f7f8 fcee 	bl	80002b8 <__aeabi_dsub>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	e9ca 2300 	strd	r2, r3, [sl]
 80078e4:	4620      	mov	r0, r4
 80078e6:	4629      	mov	r1, r5
 80078e8:	f7f8 fce6 	bl	80002b8 <__aeabi_dsub>
 80078ec:	a398      	add	r3, pc, #608	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x318>)
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	e7db      	b.n	80078ac <__ieee754_rem_pio2+0x74>
 80078f4:	f7f8 fce2 	bl	80002bc <__adddf3>
 80078f8:	45b0      	cmp	r8, r6
 80078fa:	4604      	mov	r4, r0
 80078fc:	460d      	mov	r5, r1
 80078fe:	d016      	beq.n	800792e <__ieee754_rem_pio2+0xf6>
 8007900:	a38f      	add	r3, pc, #572	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x308>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f7f8 fcd9 	bl	80002bc <__adddf3>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	e9ca 2300 	strd	r2, r3, [sl]
 8007912:	4620      	mov	r0, r4
 8007914:	4629      	mov	r1, r5
 8007916:	f7f8 fccf 	bl	80002b8 <__aeabi_dsub>
 800791a:	a389      	add	r3, pc, #548	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x308>)
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	f7f8 fccc 	bl	80002bc <__adddf3>
 8007924:	f04f 3bff 	mov.w	fp, #4294967295
 8007928:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800792c:	e7c4      	b.n	80078b8 <__ieee754_rem_pio2+0x80>
 800792e:	a386      	add	r3, pc, #536	; (adr r3, 8007b48 <__ieee754_rem_pio2+0x310>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f7f8 fcc2 	bl	80002bc <__adddf3>
 8007938:	a385      	add	r3, pc, #532	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x318>)
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	4604      	mov	r4, r0
 8007940:	460d      	mov	r5, r1
 8007942:	f7f8 fcbb 	bl	80002bc <__adddf3>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	e9ca 2300 	strd	r2, r3, [sl]
 800794e:	4620      	mov	r0, r4
 8007950:	4629      	mov	r1, r5
 8007952:	f7f8 fcb1 	bl	80002b8 <__aeabi_dsub>
 8007956:	a37e      	add	r3, pc, #504	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x318>)
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	e7e0      	b.n	8007920 <__ieee754_rem_pio2+0xe8>
 800795e:	4b87      	ldr	r3, [pc, #540]	; (8007b7c <__ieee754_rem_pio2+0x344>)
 8007960:	4598      	cmp	r8, r3
 8007962:	f300 80d9 	bgt.w	8007b18 <__ieee754_rem_pio2+0x2e0>
 8007966:	f000 fefd 	bl	8008764 <fabs>
 800796a:	ec55 4b10 	vmov	r4, r5, d0
 800796e:	ee10 0a10 	vmov	r0, s0
 8007972:	a379      	add	r3, pc, #484	; (adr r3, 8007b58 <__ieee754_rem_pio2+0x320>)
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	4629      	mov	r1, r5
 800797a:	f7f8 fe55 	bl	8000628 <__aeabi_dmul>
 800797e:	4b80      	ldr	r3, [pc, #512]	; (8007b80 <__ieee754_rem_pio2+0x348>)
 8007980:	2200      	movs	r2, #0
 8007982:	f7f8 fc9b 	bl	80002bc <__adddf3>
 8007986:	f7f9 f8ff 	bl	8000b88 <__aeabi_d2iz>
 800798a:	4683      	mov	fp, r0
 800798c:	f7f8 fde2 	bl	8000554 <__aeabi_i2d>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	ec43 2b18 	vmov	d8, r2, r3
 8007998:	a367      	add	r3, pc, #412	; (adr r3, 8007b38 <__ieee754_rem_pio2+0x300>)
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f7f8 fe43 	bl	8000628 <__aeabi_dmul>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4620      	mov	r0, r4
 80079a8:	4629      	mov	r1, r5
 80079aa:	f7f8 fc85 	bl	80002b8 <__aeabi_dsub>
 80079ae:	a364      	add	r3, pc, #400	; (adr r3, 8007b40 <__ieee754_rem_pio2+0x308>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	4606      	mov	r6, r0
 80079b6:	460f      	mov	r7, r1
 80079b8:	ec51 0b18 	vmov	r0, r1, d8
 80079bc:	f7f8 fe34 	bl	8000628 <__aeabi_dmul>
 80079c0:	f1bb 0f1f 	cmp.w	fp, #31
 80079c4:	4604      	mov	r4, r0
 80079c6:	460d      	mov	r5, r1
 80079c8:	dc0d      	bgt.n	80079e6 <__ieee754_rem_pio2+0x1ae>
 80079ca:	4b6e      	ldr	r3, [pc, #440]	; (8007b84 <__ieee754_rem_pio2+0x34c>)
 80079cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80079d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d4:	4543      	cmp	r3, r8
 80079d6:	d006      	beq.n	80079e6 <__ieee754_rem_pio2+0x1ae>
 80079d8:	4622      	mov	r2, r4
 80079da:	462b      	mov	r3, r5
 80079dc:	4630      	mov	r0, r6
 80079de:	4639      	mov	r1, r7
 80079e0:	f7f8 fc6a 	bl	80002b8 <__aeabi_dsub>
 80079e4:	e00f      	b.n	8007a06 <__ieee754_rem_pio2+0x1ce>
 80079e6:	462b      	mov	r3, r5
 80079e8:	4622      	mov	r2, r4
 80079ea:	4630      	mov	r0, r6
 80079ec:	4639      	mov	r1, r7
 80079ee:	f7f8 fc63 	bl	80002b8 <__aeabi_dsub>
 80079f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80079f6:	9303      	str	r3, [sp, #12]
 80079f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80079fc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007a00:	f1b8 0f10 	cmp.w	r8, #16
 8007a04:	dc02      	bgt.n	8007a0c <__ieee754_rem_pio2+0x1d4>
 8007a06:	e9ca 0100 	strd	r0, r1, [sl]
 8007a0a:	e039      	b.n	8007a80 <__ieee754_rem_pio2+0x248>
 8007a0c:	a34e      	add	r3, pc, #312	; (adr r3, 8007b48 <__ieee754_rem_pio2+0x310>)
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	ec51 0b18 	vmov	r0, r1, d8
 8007a16:	f7f8 fe07 	bl	8000628 <__aeabi_dmul>
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4630      	mov	r0, r6
 8007a24:	4639      	mov	r1, r7
 8007a26:	f7f8 fc47 	bl	80002b8 <__aeabi_dsub>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4680      	mov	r8, r0
 8007a30:	4689      	mov	r9, r1
 8007a32:	4630      	mov	r0, r6
 8007a34:	4639      	mov	r1, r7
 8007a36:	f7f8 fc3f 	bl	80002b8 <__aeabi_dsub>
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	462b      	mov	r3, r5
 8007a3e:	f7f8 fc3b 	bl	80002b8 <__aeabi_dsub>
 8007a42:	a343      	add	r3, pc, #268	; (adr r3, 8007b50 <__ieee754_rem_pio2+0x318>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	4604      	mov	r4, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	ec51 0b18 	vmov	r0, r1, d8
 8007a50:	f7f8 fdea 	bl	8000628 <__aeabi_dmul>
 8007a54:	4622      	mov	r2, r4
 8007a56:	462b      	mov	r3, r5
 8007a58:	f7f8 fc2e 	bl	80002b8 <__aeabi_dsub>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4604      	mov	r4, r0
 8007a62:	460d      	mov	r5, r1
 8007a64:	4640      	mov	r0, r8
 8007a66:	4649      	mov	r1, r9
 8007a68:	f7f8 fc26 	bl	80002b8 <__aeabi_dsub>
 8007a6c:	9a03      	ldr	r2, [sp, #12]
 8007a6e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b31      	cmp	r3, #49	; 0x31
 8007a76:	dc24      	bgt.n	8007ac2 <__ieee754_rem_pio2+0x28a>
 8007a78:	e9ca 0100 	strd	r0, r1, [sl]
 8007a7c:	4646      	mov	r6, r8
 8007a7e:	464f      	mov	r7, r9
 8007a80:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a84:	4630      	mov	r0, r6
 8007a86:	4642      	mov	r2, r8
 8007a88:	464b      	mov	r3, r9
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f8 fc14 	bl	80002b8 <__aeabi_dsub>
 8007a90:	462b      	mov	r3, r5
 8007a92:	4622      	mov	r2, r4
 8007a94:	f7f8 fc10 	bl	80002b8 <__aeabi_dsub>
 8007a98:	9b02      	ldr	r3, [sp, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007aa0:	f6bf af0a 	bge.w	80078b8 <__ieee754_rem_pio2+0x80>
 8007aa4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007aa8:	f8ca 3004 	str.w	r3, [sl, #4]
 8007aac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ab0:	f8ca 8000 	str.w	r8, [sl]
 8007ab4:	f8ca 0008 	str.w	r0, [sl, #8]
 8007ab8:	f8ca 300c 	str.w	r3, [sl, #12]
 8007abc:	f1cb 0b00 	rsb	fp, fp, #0
 8007ac0:	e6fa      	b.n	80078b8 <__ieee754_rem_pio2+0x80>
 8007ac2:	a327      	add	r3, pc, #156	; (adr r3, 8007b60 <__ieee754_rem_pio2+0x328>)
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	ec51 0b18 	vmov	r0, r1, d8
 8007acc:	f7f8 fdac 	bl	8000628 <__aeabi_dmul>
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4640      	mov	r0, r8
 8007ada:	4649      	mov	r1, r9
 8007adc:	f7f8 fbec 	bl	80002b8 <__aeabi_dsub>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	460f      	mov	r7, r1
 8007ae8:	4640      	mov	r0, r8
 8007aea:	4649      	mov	r1, r9
 8007aec:	f7f8 fbe4 	bl	80002b8 <__aeabi_dsub>
 8007af0:	4622      	mov	r2, r4
 8007af2:	462b      	mov	r3, r5
 8007af4:	f7f8 fbe0 	bl	80002b8 <__aeabi_dsub>
 8007af8:	a31b      	add	r3, pc, #108	; (adr r3, 8007b68 <__ieee754_rem_pio2+0x330>)
 8007afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afe:	4604      	mov	r4, r0
 8007b00:	460d      	mov	r5, r1
 8007b02:	ec51 0b18 	vmov	r0, r1, d8
 8007b06:	f7f8 fd8f 	bl	8000628 <__aeabi_dmul>
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	f7f8 fbd3 	bl	80002b8 <__aeabi_dsub>
 8007b12:	4604      	mov	r4, r0
 8007b14:	460d      	mov	r5, r1
 8007b16:	e75f      	b.n	80079d8 <__ieee754_rem_pio2+0x1a0>
 8007b18:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <__ieee754_rem_pio2+0x350>)
 8007b1a:	4598      	cmp	r8, r3
 8007b1c:	dd36      	ble.n	8007b8c <__ieee754_rem_pio2+0x354>
 8007b1e:	ee10 2a10 	vmov	r2, s0
 8007b22:	462b      	mov	r3, r5
 8007b24:	4620      	mov	r0, r4
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7f8 fbc6 	bl	80002b8 <__aeabi_dsub>
 8007b2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b30:	e9ca 0100 	strd	r0, r1, [sl]
 8007b34:	e694      	b.n	8007860 <__ieee754_rem_pio2+0x28>
 8007b36:	bf00      	nop
 8007b38:	54400000 	.word	0x54400000
 8007b3c:	3ff921fb 	.word	0x3ff921fb
 8007b40:	1a626331 	.word	0x1a626331
 8007b44:	3dd0b461 	.word	0x3dd0b461
 8007b48:	1a600000 	.word	0x1a600000
 8007b4c:	3dd0b461 	.word	0x3dd0b461
 8007b50:	2e037073 	.word	0x2e037073
 8007b54:	3ba3198a 	.word	0x3ba3198a
 8007b58:	6dc9c883 	.word	0x6dc9c883
 8007b5c:	3fe45f30 	.word	0x3fe45f30
 8007b60:	2e000000 	.word	0x2e000000
 8007b64:	3ba3198a 	.word	0x3ba3198a
 8007b68:	252049c1 	.word	0x252049c1
 8007b6c:	397b839a 	.word	0x397b839a
 8007b70:	3fe921fb 	.word	0x3fe921fb
 8007b74:	4002d97b 	.word	0x4002d97b
 8007b78:	3ff921fb 	.word	0x3ff921fb
 8007b7c:	413921fb 	.word	0x413921fb
 8007b80:	3fe00000 	.word	0x3fe00000
 8007b84:	0800f9fc 	.word	0x0800f9fc
 8007b88:	7fefffff 	.word	0x7fefffff
 8007b8c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007b90:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007b94:	ee10 0a10 	vmov	r0, s0
 8007b98:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007b9c:	ee10 6a10 	vmov	r6, s0
 8007ba0:	460f      	mov	r7, r1
 8007ba2:	f7f8 fff1 	bl	8000b88 <__aeabi_d2iz>
 8007ba6:	f7f8 fcd5 	bl	8000554 <__aeabi_i2d>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bb6:	f7f8 fb7f 	bl	80002b8 <__aeabi_dsub>
 8007bba:	4b23      	ldr	r3, [pc, #140]	; (8007c48 <__ieee754_rem_pio2+0x410>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f7f8 fd33 	bl	8000628 <__aeabi_dmul>
 8007bc2:	460f      	mov	r7, r1
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	f7f8 ffdf 	bl	8000b88 <__aeabi_d2iz>
 8007bca:	f7f8 fcc3 	bl	8000554 <__aeabi_i2d>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007bda:	f7f8 fb6d 	bl	80002b8 <__aeabi_dsub>
 8007bde:	4b1a      	ldr	r3, [pc, #104]	; (8007c48 <__ieee754_rem_pio2+0x410>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	f7f8 fd21 	bl	8000628 <__aeabi_dmul>
 8007be6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007bea:	ad04      	add	r5, sp, #16
 8007bec:	f04f 0803 	mov.w	r8, #3
 8007bf0:	46a9      	mov	r9, r5
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	2700      	movs	r7, #0
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007bfe:	46c3      	mov	fp, r8
 8007c00:	3d08      	subs	r5, #8
 8007c02:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c06:	f7f8 ff77 	bl	8000af8 <__aeabi_dcmpeq>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d1f3      	bne.n	8007bf6 <__ieee754_rem_pio2+0x3be>
 8007c0e:	4b0f      	ldr	r3, [pc, #60]	; (8007c4c <__ieee754_rem_pio2+0x414>)
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	2302      	movs	r3, #2
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	4622      	mov	r2, r4
 8007c18:	465b      	mov	r3, fp
 8007c1a:	4651      	mov	r1, sl
 8007c1c:	4648      	mov	r0, r9
 8007c1e:	f000 f993 	bl	8007f48 <__kernel_rem_pio2>
 8007c22:	9b02      	ldr	r3, [sp, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	4683      	mov	fp, r0
 8007c28:	f6bf ae46 	bge.w	80078b8 <__ieee754_rem_pio2+0x80>
 8007c2c:	e9da 2100 	ldrd	r2, r1, [sl]
 8007c30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c34:	e9ca 2300 	strd	r2, r3, [sl]
 8007c38:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007c3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c40:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007c44:	e73a      	b.n	8007abc <__ieee754_rem_pio2+0x284>
 8007c46:	bf00      	nop
 8007c48:	41700000 	.word	0x41700000
 8007c4c:	0800fa7c 	.word	0x0800fa7c

08007c50 <__ieee754_sqrt>:
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	ec55 4b10 	vmov	r4, r5, d0
 8007c58:	4e55      	ldr	r6, [pc, #340]	; (8007db0 <__ieee754_sqrt+0x160>)
 8007c5a:	43ae      	bics	r6, r5
 8007c5c:	ee10 0a10 	vmov	r0, s0
 8007c60:	ee10 3a10 	vmov	r3, s0
 8007c64:	462a      	mov	r2, r5
 8007c66:	4629      	mov	r1, r5
 8007c68:	d110      	bne.n	8007c8c <__ieee754_sqrt+0x3c>
 8007c6a:	ee10 2a10 	vmov	r2, s0
 8007c6e:	462b      	mov	r3, r5
 8007c70:	f7f8 fcda 	bl	8000628 <__aeabi_dmul>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4620      	mov	r0, r4
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	f7f8 fb1e 	bl	80002bc <__adddf3>
 8007c80:	4604      	mov	r4, r0
 8007c82:	460d      	mov	r5, r1
 8007c84:	ec45 4b10 	vmov	d0, r4, r5
 8007c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c8c:	2d00      	cmp	r5, #0
 8007c8e:	dc10      	bgt.n	8007cb2 <__ieee754_sqrt+0x62>
 8007c90:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007c94:	4330      	orrs	r0, r6
 8007c96:	d0f5      	beq.n	8007c84 <__ieee754_sqrt+0x34>
 8007c98:	b15d      	cbz	r5, 8007cb2 <__ieee754_sqrt+0x62>
 8007c9a:	ee10 2a10 	vmov	r2, s0
 8007c9e:	462b      	mov	r3, r5
 8007ca0:	ee10 0a10 	vmov	r0, s0
 8007ca4:	f7f8 fb08 	bl	80002b8 <__aeabi_dsub>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	f7f8 fde6 	bl	800087c <__aeabi_ddiv>
 8007cb0:	e7e6      	b.n	8007c80 <__ieee754_sqrt+0x30>
 8007cb2:	1512      	asrs	r2, r2, #20
 8007cb4:	d074      	beq.n	8007da0 <__ieee754_sqrt+0x150>
 8007cb6:	07d4      	lsls	r4, r2, #31
 8007cb8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007cbc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007cc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007cc4:	bf5e      	ittt	pl
 8007cc6:	0fda      	lsrpl	r2, r3, #31
 8007cc8:	005b      	lslpl	r3, r3, #1
 8007cca:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007cce:	2400      	movs	r4, #0
 8007cd0:	0fda      	lsrs	r2, r3, #31
 8007cd2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007cd6:	107f      	asrs	r7, r7, #1
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	2516      	movs	r5, #22
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007ce2:	1886      	adds	r6, r0, r2
 8007ce4:	428e      	cmp	r6, r1
 8007ce6:	bfde      	ittt	le
 8007ce8:	1b89      	suble	r1, r1, r6
 8007cea:	18b0      	addle	r0, r6, r2
 8007cec:	18a4      	addle	r4, r4, r2
 8007cee:	0049      	lsls	r1, r1, #1
 8007cf0:	3d01      	subs	r5, #1
 8007cf2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007cf6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007cfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007cfe:	d1f0      	bne.n	8007ce2 <__ieee754_sqrt+0x92>
 8007d00:	462a      	mov	r2, r5
 8007d02:	f04f 0e20 	mov.w	lr, #32
 8007d06:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007d0a:	4281      	cmp	r1, r0
 8007d0c:	eb06 0c05 	add.w	ip, r6, r5
 8007d10:	dc02      	bgt.n	8007d18 <__ieee754_sqrt+0xc8>
 8007d12:	d113      	bne.n	8007d3c <__ieee754_sqrt+0xec>
 8007d14:	459c      	cmp	ip, r3
 8007d16:	d811      	bhi.n	8007d3c <__ieee754_sqrt+0xec>
 8007d18:	f1bc 0f00 	cmp.w	ip, #0
 8007d1c:	eb0c 0506 	add.w	r5, ip, r6
 8007d20:	da43      	bge.n	8007daa <__ieee754_sqrt+0x15a>
 8007d22:	2d00      	cmp	r5, #0
 8007d24:	db41      	blt.n	8007daa <__ieee754_sqrt+0x15a>
 8007d26:	f100 0801 	add.w	r8, r0, #1
 8007d2a:	1a09      	subs	r1, r1, r0
 8007d2c:	459c      	cmp	ip, r3
 8007d2e:	bf88      	it	hi
 8007d30:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007d34:	eba3 030c 	sub.w	r3, r3, ip
 8007d38:	4432      	add	r2, r6
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007d40:	f1be 0e01 	subs.w	lr, lr, #1
 8007d44:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007d48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d4c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007d50:	d1db      	bne.n	8007d0a <__ieee754_sqrt+0xba>
 8007d52:	430b      	orrs	r3, r1
 8007d54:	d006      	beq.n	8007d64 <__ieee754_sqrt+0x114>
 8007d56:	1c50      	adds	r0, r2, #1
 8007d58:	bf13      	iteet	ne
 8007d5a:	3201      	addne	r2, #1
 8007d5c:	3401      	addeq	r4, #1
 8007d5e:	4672      	moveq	r2, lr
 8007d60:	f022 0201 	bicne.w	r2, r2, #1
 8007d64:	1063      	asrs	r3, r4, #1
 8007d66:	0852      	lsrs	r2, r2, #1
 8007d68:	07e1      	lsls	r1, r4, #31
 8007d6a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007d6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007d72:	bf48      	it	mi
 8007d74:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007d78:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007d7c:	4614      	mov	r4, r2
 8007d7e:	e781      	b.n	8007c84 <__ieee754_sqrt+0x34>
 8007d80:	0ad9      	lsrs	r1, r3, #11
 8007d82:	3815      	subs	r0, #21
 8007d84:	055b      	lsls	r3, r3, #21
 8007d86:	2900      	cmp	r1, #0
 8007d88:	d0fa      	beq.n	8007d80 <__ieee754_sqrt+0x130>
 8007d8a:	02cd      	lsls	r5, r1, #11
 8007d8c:	d50a      	bpl.n	8007da4 <__ieee754_sqrt+0x154>
 8007d8e:	f1c2 0420 	rsb	r4, r2, #32
 8007d92:	fa23 f404 	lsr.w	r4, r3, r4
 8007d96:	1e55      	subs	r5, r2, #1
 8007d98:	4093      	lsls	r3, r2
 8007d9a:	4321      	orrs	r1, r4
 8007d9c:	1b42      	subs	r2, r0, r5
 8007d9e:	e78a      	b.n	8007cb6 <__ieee754_sqrt+0x66>
 8007da0:	4610      	mov	r0, r2
 8007da2:	e7f0      	b.n	8007d86 <__ieee754_sqrt+0x136>
 8007da4:	0049      	lsls	r1, r1, #1
 8007da6:	3201      	adds	r2, #1
 8007da8:	e7ef      	b.n	8007d8a <__ieee754_sqrt+0x13a>
 8007daa:	4680      	mov	r8, r0
 8007dac:	e7bd      	b.n	8007d2a <__ieee754_sqrt+0xda>
 8007dae:	bf00      	nop
 8007db0:	7ff00000 	.word	0x7ff00000
 8007db4:	00000000 	.word	0x00000000

08007db8 <__kernel_cos>:
 8007db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbc:	ec57 6b10 	vmov	r6, r7, d0
 8007dc0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007dc4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007dc8:	ed8d 1b00 	vstr	d1, [sp]
 8007dcc:	da07      	bge.n	8007dde <__kernel_cos+0x26>
 8007dce:	ee10 0a10 	vmov	r0, s0
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	f7f8 fed8 	bl	8000b88 <__aeabi_d2iz>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	f000 8088 	beq.w	8007eee <__kernel_cos+0x136>
 8007dde:	4632      	mov	r2, r6
 8007de0:	463b      	mov	r3, r7
 8007de2:	4630      	mov	r0, r6
 8007de4:	4639      	mov	r1, r7
 8007de6:	f7f8 fc1f 	bl	8000628 <__aeabi_dmul>
 8007dea:	4b51      	ldr	r3, [pc, #324]	; (8007f30 <__kernel_cos+0x178>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	460d      	mov	r5, r1
 8007df2:	f7f8 fc19 	bl	8000628 <__aeabi_dmul>
 8007df6:	a340      	add	r3, pc, #256	; (adr r3, 8007ef8 <__kernel_cos+0x140>)
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	4682      	mov	sl, r0
 8007dfe:	468b      	mov	fp, r1
 8007e00:	4620      	mov	r0, r4
 8007e02:	4629      	mov	r1, r5
 8007e04:	f7f8 fc10 	bl	8000628 <__aeabi_dmul>
 8007e08:	a33d      	add	r3, pc, #244	; (adr r3, 8007f00 <__kernel_cos+0x148>)
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	f7f8 fa55 	bl	80002bc <__adddf3>
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	f7f8 fc07 	bl	8000628 <__aeabi_dmul>
 8007e1a:	a33b      	add	r3, pc, #236	; (adr r3, 8007f08 <__kernel_cos+0x150>)
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	f7f8 fa4a 	bl	80002b8 <__aeabi_dsub>
 8007e24:	4622      	mov	r2, r4
 8007e26:	462b      	mov	r3, r5
 8007e28:	f7f8 fbfe 	bl	8000628 <__aeabi_dmul>
 8007e2c:	a338      	add	r3, pc, #224	; (adr r3, 8007f10 <__kernel_cos+0x158>)
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f7f8 fa43 	bl	80002bc <__adddf3>
 8007e36:	4622      	mov	r2, r4
 8007e38:	462b      	mov	r3, r5
 8007e3a:	f7f8 fbf5 	bl	8000628 <__aeabi_dmul>
 8007e3e:	a336      	add	r3, pc, #216	; (adr r3, 8007f18 <__kernel_cos+0x160>)
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f7f8 fa38 	bl	80002b8 <__aeabi_dsub>
 8007e48:	4622      	mov	r2, r4
 8007e4a:	462b      	mov	r3, r5
 8007e4c:	f7f8 fbec 	bl	8000628 <__aeabi_dmul>
 8007e50:	a333      	add	r3, pc, #204	; (adr r3, 8007f20 <__kernel_cos+0x168>)
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f7f8 fa31 	bl	80002bc <__adddf3>
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	f7f8 fbe3 	bl	8000628 <__aeabi_dmul>
 8007e62:	4622      	mov	r2, r4
 8007e64:	462b      	mov	r3, r5
 8007e66:	f7f8 fbdf 	bl	8000628 <__aeabi_dmul>
 8007e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e6e:	4604      	mov	r4, r0
 8007e70:	460d      	mov	r5, r1
 8007e72:	4630      	mov	r0, r6
 8007e74:	4639      	mov	r1, r7
 8007e76:	f7f8 fbd7 	bl	8000628 <__aeabi_dmul>
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4620      	mov	r0, r4
 8007e82:	f7f8 fa19 	bl	80002b8 <__aeabi_dsub>
 8007e86:	4b2b      	ldr	r3, [pc, #172]	; (8007f34 <__kernel_cos+0x17c>)
 8007e88:	4598      	cmp	r8, r3
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	dc10      	bgt.n	8007eb2 <__kernel_cos+0xfa>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4650      	mov	r0, sl
 8007e96:	4659      	mov	r1, fp
 8007e98:	f7f8 fa0e 	bl	80002b8 <__aeabi_dsub>
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4926      	ldr	r1, [pc, #152]	; (8007f38 <__kernel_cos+0x180>)
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	f7f8 fa08 	bl	80002b8 <__aeabi_dsub>
 8007ea8:	ec41 0b10 	vmov	d0, r0, r1
 8007eac:	b003      	add	sp, #12
 8007eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb2:	4b22      	ldr	r3, [pc, #136]	; (8007f3c <__kernel_cos+0x184>)
 8007eb4:	4920      	ldr	r1, [pc, #128]	; (8007f38 <__kernel_cos+0x180>)
 8007eb6:	4598      	cmp	r8, r3
 8007eb8:	bfcc      	ite	gt
 8007eba:	4d21      	ldrgt	r5, [pc, #132]	; (8007f40 <__kernel_cos+0x188>)
 8007ebc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007ec0:	2400      	movs	r4, #0
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	f7f8 f9f6 	bl	80002b8 <__aeabi_dsub>
 8007ecc:	4622      	mov	r2, r4
 8007ece:	4680      	mov	r8, r0
 8007ed0:	4689      	mov	r9, r1
 8007ed2:	462b      	mov	r3, r5
 8007ed4:	4650      	mov	r0, sl
 8007ed6:	4659      	mov	r1, fp
 8007ed8:	f7f8 f9ee 	bl	80002b8 <__aeabi_dsub>
 8007edc:	4632      	mov	r2, r6
 8007ede:	463b      	mov	r3, r7
 8007ee0:	f7f8 f9ea 	bl	80002b8 <__aeabi_dsub>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4640      	mov	r0, r8
 8007eea:	4649      	mov	r1, r9
 8007eec:	e7da      	b.n	8007ea4 <__kernel_cos+0xec>
 8007eee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007f28 <__kernel_cos+0x170>
 8007ef2:	e7db      	b.n	8007eac <__kernel_cos+0xf4>
 8007ef4:	f3af 8000 	nop.w
 8007ef8:	be8838d4 	.word	0xbe8838d4
 8007efc:	bda8fae9 	.word	0xbda8fae9
 8007f00:	bdb4b1c4 	.word	0xbdb4b1c4
 8007f04:	3e21ee9e 	.word	0x3e21ee9e
 8007f08:	809c52ad 	.word	0x809c52ad
 8007f0c:	3e927e4f 	.word	0x3e927e4f
 8007f10:	19cb1590 	.word	0x19cb1590
 8007f14:	3efa01a0 	.word	0x3efa01a0
 8007f18:	16c15177 	.word	0x16c15177
 8007f1c:	3f56c16c 	.word	0x3f56c16c
 8007f20:	5555554c 	.word	0x5555554c
 8007f24:	3fa55555 	.word	0x3fa55555
 8007f28:	00000000 	.word	0x00000000
 8007f2c:	3ff00000 	.word	0x3ff00000
 8007f30:	3fe00000 	.word	0x3fe00000
 8007f34:	3fd33332 	.word	0x3fd33332
 8007f38:	3ff00000 	.word	0x3ff00000
 8007f3c:	3fe90000 	.word	0x3fe90000
 8007f40:	3fd20000 	.word	0x3fd20000
 8007f44:	00000000 	.word	0x00000000

08007f48 <__kernel_rem_pio2>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	ed2d 8b02 	vpush	{d8}
 8007f50:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007f54:	f112 0f14 	cmn.w	r2, #20
 8007f58:	9308      	str	r3, [sp, #32]
 8007f5a:	9101      	str	r1, [sp, #4]
 8007f5c:	4bc4      	ldr	r3, [pc, #784]	; (8008270 <__kernel_rem_pio2+0x328>)
 8007f5e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007f60:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f66:	9302      	str	r3, [sp, #8]
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f6e:	bfa8      	it	ge
 8007f70:	1ed4      	subge	r4, r2, #3
 8007f72:	9306      	str	r3, [sp, #24]
 8007f74:	bfb2      	itee	lt
 8007f76:	2400      	movlt	r4, #0
 8007f78:	2318      	movge	r3, #24
 8007f7a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007f7e:	f06f 0317 	mvn.w	r3, #23
 8007f82:	fb04 3303 	mla	r3, r4, r3, r3
 8007f86:	eb03 0a02 	add.w	sl, r3, r2
 8007f8a:	9b02      	ldr	r3, [sp, #8]
 8007f8c:	9a06      	ldr	r2, [sp, #24]
 8007f8e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008260 <__kernel_rem_pio2+0x318>
 8007f92:	eb03 0802 	add.w	r8, r3, r2
 8007f96:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007f98:	1aa7      	subs	r7, r4, r2
 8007f9a:	ae22      	add	r6, sp, #136	; 0x88
 8007f9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007fa0:	2500      	movs	r5, #0
 8007fa2:	4545      	cmp	r5, r8
 8007fa4:	dd13      	ble.n	8007fce <__kernel_rem_pio2+0x86>
 8007fa6:	9b08      	ldr	r3, [sp, #32]
 8007fa8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008260 <__kernel_rem_pio2+0x318>
 8007fac:	aa22      	add	r2, sp, #136	; 0x88
 8007fae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007fb2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007fb6:	f04f 0800 	mov.w	r8, #0
 8007fba:	9b02      	ldr	r3, [sp, #8]
 8007fbc:	4598      	cmp	r8, r3
 8007fbe:	dc2f      	bgt.n	8008020 <__kernel_rem_pio2+0xd8>
 8007fc0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007fc4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007fc8:	462f      	mov	r7, r5
 8007fca:	2600      	movs	r6, #0
 8007fcc:	e01b      	b.n	8008006 <__kernel_rem_pio2+0xbe>
 8007fce:	42ef      	cmn	r7, r5
 8007fd0:	d407      	bmi.n	8007fe2 <__kernel_rem_pio2+0x9a>
 8007fd2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007fd6:	f7f8 fabd 	bl	8000554 <__aeabi_i2d>
 8007fda:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007fde:	3501      	adds	r5, #1
 8007fe0:	e7df      	b.n	8007fa2 <__kernel_rem_pio2+0x5a>
 8007fe2:	ec51 0b18 	vmov	r0, r1, d8
 8007fe6:	e7f8      	b.n	8007fda <__kernel_rem_pio2+0x92>
 8007fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007ff0:	f7f8 fb1a 	bl	8000628 <__aeabi_dmul>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ffc:	f7f8 f95e 	bl	80002bc <__adddf3>
 8008000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008004:	3601      	adds	r6, #1
 8008006:	9b06      	ldr	r3, [sp, #24]
 8008008:	429e      	cmp	r6, r3
 800800a:	f1a7 0708 	sub.w	r7, r7, #8
 800800e:	ddeb      	ble.n	8007fe8 <__kernel_rem_pio2+0xa0>
 8008010:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008014:	f108 0801 	add.w	r8, r8, #1
 8008018:	ecab 7b02 	vstmia	fp!, {d7}
 800801c:	3508      	adds	r5, #8
 800801e:	e7cc      	b.n	8007fba <__kernel_rem_pio2+0x72>
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	aa0e      	add	r2, sp, #56	; 0x38
 8008024:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008028:	930d      	str	r3, [sp, #52]	; 0x34
 800802a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800802c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008030:	9c02      	ldr	r4, [sp, #8]
 8008032:	930c      	str	r3, [sp, #48]	; 0x30
 8008034:	00e3      	lsls	r3, r4, #3
 8008036:	930a      	str	r3, [sp, #40]	; 0x28
 8008038:	ab9a      	add	r3, sp, #616	; 0x268
 800803a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800803e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008042:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008046:	ab72      	add	r3, sp, #456	; 0x1c8
 8008048:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800804c:	46c3      	mov	fp, r8
 800804e:	46a1      	mov	r9, r4
 8008050:	f1b9 0f00 	cmp.w	r9, #0
 8008054:	f1a5 0508 	sub.w	r5, r5, #8
 8008058:	dc77      	bgt.n	800814a <__kernel_rem_pio2+0x202>
 800805a:	ec47 6b10 	vmov	d0, r6, r7
 800805e:	4650      	mov	r0, sl
 8008060:	f000 fc12 	bl	8008888 <scalbn>
 8008064:	ec57 6b10 	vmov	r6, r7, d0
 8008068:	2200      	movs	r2, #0
 800806a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800806e:	ee10 0a10 	vmov	r0, s0
 8008072:	4639      	mov	r1, r7
 8008074:	f7f8 fad8 	bl	8000628 <__aeabi_dmul>
 8008078:	ec41 0b10 	vmov	d0, r0, r1
 800807c:	f000 fb7c 	bl	8008778 <floor>
 8008080:	4b7c      	ldr	r3, [pc, #496]	; (8008274 <__kernel_rem_pio2+0x32c>)
 8008082:	ec51 0b10 	vmov	r0, r1, d0
 8008086:	2200      	movs	r2, #0
 8008088:	f7f8 face 	bl	8000628 <__aeabi_dmul>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4630      	mov	r0, r6
 8008092:	4639      	mov	r1, r7
 8008094:	f7f8 f910 	bl	80002b8 <__aeabi_dsub>
 8008098:	460f      	mov	r7, r1
 800809a:	4606      	mov	r6, r0
 800809c:	f7f8 fd74 	bl	8000b88 <__aeabi_d2iz>
 80080a0:	9004      	str	r0, [sp, #16]
 80080a2:	f7f8 fa57 	bl	8000554 <__aeabi_i2d>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4630      	mov	r0, r6
 80080ac:	4639      	mov	r1, r7
 80080ae:	f7f8 f903 	bl	80002b8 <__aeabi_dsub>
 80080b2:	f1ba 0f00 	cmp.w	sl, #0
 80080b6:	4606      	mov	r6, r0
 80080b8:	460f      	mov	r7, r1
 80080ba:	dd6d      	ble.n	8008198 <__kernel_rem_pio2+0x250>
 80080bc:	1e62      	subs	r2, r4, #1
 80080be:	ab0e      	add	r3, sp, #56	; 0x38
 80080c0:	9d04      	ldr	r5, [sp, #16]
 80080c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80080c6:	f1ca 0118 	rsb	r1, sl, #24
 80080ca:	fa40 f301 	asr.w	r3, r0, r1
 80080ce:	441d      	add	r5, r3
 80080d0:	408b      	lsls	r3, r1
 80080d2:	1ac0      	subs	r0, r0, r3
 80080d4:	ab0e      	add	r3, sp, #56	; 0x38
 80080d6:	9504      	str	r5, [sp, #16]
 80080d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80080dc:	f1ca 0317 	rsb	r3, sl, #23
 80080e0:	fa40 fb03 	asr.w	fp, r0, r3
 80080e4:	f1bb 0f00 	cmp.w	fp, #0
 80080e8:	dd65      	ble.n	80081b6 <__kernel_rem_pio2+0x26e>
 80080ea:	9b04      	ldr	r3, [sp, #16]
 80080ec:	2200      	movs	r2, #0
 80080ee:	3301      	adds	r3, #1
 80080f0:	9304      	str	r3, [sp, #16]
 80080f2:	4615      	mov	r5, r2
 80080f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80080f8:	4294      	cmp	r4, r2
 80080fa:	f300 809c 	bgt.w	8008236 <__kernel_rem_pio2+0x2ee>
 80080fe:	f1ba 0f00 	cmp.w	sl, #0
 8008102:	dd07      	ble.n	8008114 <__kernel_rem_pio2+0x1cc>
 8008104:	f1ba 0f01 	cmp.w	sl, #1
 8008108:	f000 80c0 	beq.w	800828c <__kernel_rem_pio2+0x344>
 800810c:	f1ba 0f02 	cmp.w	sl, #2
 8008110:	f000 80c6 	beq.w	80082a0 <__kernel_rem_pio2+0x358>
 8008114:	f1bb 0f02 	cmp.w	fp, #2
 8008118:	d14d      	bne.n	80081b6 <__kernel_rem_pio2+0x26e>
 800811a:	4632      	mov	r2, r6
 800811c:	463b      	mov	r3, r7
 800811e:	4956      	ldr	r1, [pc, #344]	; (8008278 <__kernel_rem_pio2+0x330>)
 8008120:	2000      	movs	r0, #0
 8008122:	f7f8 f8c9 	bl	80002b8 <__aeabi_dsub>
 8008126:	4606      	mov	r6, r0
 8008128:	460f      	mov	r7, r1
 800812a:	2d00      	cmp	r5, #0
 800812c:	d043      	beq.n	80081b6 <__kernel_rem_pio2+0x26e>
 800812e:	4650      	mov	r0, sl
 8008130:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008268 <__kernel_rem_pio2+0x320>
 8008134:	f000 fba8 	bl	8008888 <scalbn>
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	ec53 2b10 	vmov	r2, r3, d0
 8008140:	f7f8 f8ba 	bl	80002b8 <__aeabi_dsub>
 8008144:	4606      	mov	r6, r0
 8008146:	460f      	mov	r7, r1
 8008148:	e035      	b.n	80081b6 <__kernel_rem_pio2+0x26e>
 800814a:	4b4c      	ldr	r3, [pc, #304]	; (800827c <__kernel_rem_pio2+0x334>)
 800814c:	2200      	movs	r2, #0
 800814e:	4630      	mov	r0, r6
 8008150:	4639      	mov	r1, r7
 8008152:	f7f8 fa69 	bl	8000628 <__aeabi_dmul>
 8008156:	f7f8 fd17 	bl	8000b88 <__aeabi_d2iz>
 800815a:	f7f8 f9fb 	bl	8000554 <__aeabi_i2d>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	ec43 2b18 	vmov	d8, r2, r3
 8008166:	4b46      	ldr	r3, [pc, #280]	; (8008280 <__kernel_rem_pio2+0x338>)
 8008168:	2200      	movs	r2, #0
 800816a:	f7f8 fa5d 	bl	8000628 <__aeabi_dmul>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4630      	mov	r0, r6
 8008174:	4639      	mov	r1, r7
 8008176:	f7f8 f89f 	bl	80002b8 <__aeabi_dsub>
 800817a:	f7f8 fd05 	bl	8000b88 <__aeabi_d2iz>
 800817e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008182:	f84b 0b04 	str.w	r0, [fp], #4
 8008186:	ec51 0b18 	vmov	r0, r1, d8
 800818a:	f7f8 f897 	bl	80002bc <__adddf3>
 800818e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008192:	4606      	mov	r6, r0
 8008194:	460f      	mov	r7, r1
 8008196:	e75b      	b.n	8008050 <__kernel_rem_pio2+0x108>
 8008198:	d106      	bne.n	80081a8 <__kernel_rem_pio2+0x260>
 800819a:	1e63      	subs	r3, r4, #1
 800819c:	aa0e      	add	r2, sp, #56	; 0x38
 800819e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80081a2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80081a6:	e79d      	b.n	80080e4 <__kernel_rem_pio2+0x19c>
 80081a8:	4b36      	ldr	r3, [pc, #216]	; (8008284 <__kernel_rem_pio2+0x33c>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	f7f8 fcc2 	bl	8000b34 <__aeabi_dcmpge>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d13d      	bne.n	8008230 <__kernel_rem_pio2+0x2e8>
 80081b4:	4683      	mov	fp, r0
 80081b6:	2200      	movs	r2, #0
 80081b8:	2300      	movs	r3, #0
 80081ba:	4630      	mov	r0, r6
 80081bc:	4639      	mov	r1, r7
 80081be:	f7f8 fc9b 	bl	8000af8 <__aeabi_dcmpeq>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	f000 80c0 	beq.w	8008348 <__kernel_rem_pio2+0x400>
 80081c8:	1e65      	subs	r5, r4, #1
 80081ca:	462b      	mov	r3, r5
 80081cc:	2200      	movs	r2, #0
 80081ce:	9902      	ldr	r1, [sp, #8]
 80081d0:	428b      	cmp	r3, r1
 80081d2:	da6c      	bge.n	80082ae <__kernel_rem_pio2+0x366>
 80081d4:	2a00      	cmp	r2, #0
 80081d6:	f000 8089 	beq.w	80082ec <__kernel_rem_pio2+0x3a4>
 80081da:	ab0e      	add	r3, sp, #56	; 0x38
 80081dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80081e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80ad 	beq.w	8008344 <__kernel_rem_pio2+0x3fc>
 80081ea:	4650      	mov	r0, sl
 80081ec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008268 <__kernel_rem_pio2+0x320>
 80081f0:	f000 fb4a 	bl	8008888 <scalbn>
 80081f4:	ab9a      	add	r3, sp, #616	; 0x268
 80081f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80081fa:	ec57 6b10 	vmov	r6, r7, d0
 80081fe:	00ec      	lsls	r4, r5, #3
 8008200:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008204:	46aa      	mov	sl, r5
 8008206:	f1ba 0f00 	cmp.w	sl, #0
 800820a:	f280 80d6 	bge.w	80083ba <__kernel_rem_pio2+0x472>
 800820e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008260 <__kernel_rem_pio2+0x318>
 8008212:	462e      	mov	r6, r5
 8008214:	2e00      	cmp	r6, #0
 8008216:	f2c0 8104 	blt.w	8008422 <__kernel_rem_pio2+0x4da>
 800821a:	ab72      	add	r3, sp, #456	; 0x1c8
 800821c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008220:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008288 <__kernel_rem_pio2+0x340>
 8008224:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008228:	f04f 0800 	mov.w	r8, #0
 800822c:	1baf      	subs	r7, r5, r6
 800822e:	e0ea      	b.n	8008406 <__kernel_rem_pio2+0x4be>
 8008230:	f04f 0b02 	mov.w	fp, #2
 8008234:	e759      	b.n	80080ea <__kernel_rem_pio2+0x1a2>
 8008236:	f8d8 3000 	ldr.w	r3, [r8]
 800823a:	b955      	cbnz	r5, 8008252 <__kernel_rem_pio2+0x30a>
 800823c:	b123      	cbz	r3, 8008248 <__kernel_rem_pio2+0x300>
 800823e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008242:	f8c8 3000 	str.w	r3, [r8]
 8008246:	2301      	movs	r3, #1
 8008248:	3201      	adds	r2, #1
 800824a:	f108 0804 	add.w	r8, r8, #4
 800824e:	461d      	mov	r5, r3
 8008250:	e752      	b.n	80080f8 <__kernel_rem_pio2+0x1b0>
 8008252:	1acb      	subs	r3, r1, r3
 8008254:	f8c8 3000 	str.w	r3, [r8]
 8008258:	462b      	mov	r3, r5
 800825a:	e7f5      	b.n	8008248 <__kernel_rem_pio2+0x300>
 800825c:	f3af 8000 	nop.w
	...
 800826c:	3ff00000 	.word	0x3ff00000
 8008270:	0800fbc8 	.word	0x0800fbc8
 8008274:	40200000 	.word	0x40200000
 8008278:	3ff00000 	.word	0x3ff00000
 800827c:	3e700000 	.word	0x3e700000
 8008280:	41700000 	.word	0x41700000
 8008284:	3fe00000 	.word	0x3fe00000
 8008288:	0800fb88 	.word	0x0800fb88
 800828c:	1e62      	subs	r2, r4, #1
 800828e:	ab0e      	add	r3, sp, #56	; 0x38
 8008290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008294:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008298:	a90e      	add	r1, sp, #56	; 0x38
 800829a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800829e:	e739      	b.n	8008114 <__kernel_rem_pio2+0x1cc>
 80082a0:	1e62      	subs	r2, r4, #1
 80082a2:	ab0e      	add	r3, sp, #56	; 0x38
 80082a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80082ac:	e7f4      	b.n	8008298 <__kernel_rem_pio2+0x350>
 80082ae:	a90e      	add	r1, sp, #56	; 0x38
 80082b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	430a      	orrs	r2, r1
 80082b8:	e789      	b.n	80081ce <__kernel_rem_pio2+0x286>
 80082ba:	3301      	adds	r3, #1
 80082bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80082c0:	2900      	cmp	r1, #0
 80082c2:	d0fa      	beq.n	80082ba <__kernel_rem_pio2+0x372>
 80082c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082c6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80082ca:	446a      	add	r2, sp
 80082cc:	3a98      	subs	r2, #152	; 0x98
 80082ce:	920a      	str	r2, [sp, #40]	; 0x28
 80082d0:	9a08      	ldr	r2, [sp, #32]
 80082d2:	18e3      	adds	r3, r4, r3
 80082d4:	18a5      	adds	r5, r4, r2
 80082d6:	aa22      	add	r2, sp, #136	; 0x88
 80082d8:	f104 0801 	add.w	r8, r4, #1
 80082dc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80082e0:	9304      	str	r3, [sp, #16]
 80082e2:	9b04      	ldr	r3, [sp, #16]
 80082e4:	4543      	cmp	r3, r8
 80082e6:	da04      	bge.n	80082f2 <__kernel_rem_pio2+0x3aa>
 80082e8:	461c      	mov	r4, r3
 80082ea:	e6a3      	b.n	8008034 <__kernel_rem_pio2+0xec>
 80082ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082ee:	2301      	movs	r3, #1
 80082f0:	e7e4      	b.n	80082bc <__kernel_rem_pio2+0x374>
 80082f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082f4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80082f8:	f7f8 f92c 	bl	8000554 <__aeabi_i2d>
 80082fc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008302:	46ab      	mov	fp, r5
 8008304:	461c      	mov	r4, r3
 8008306:	f04f 0900 	mov.w	r9, #0
 800830a:	2600      	movs	r6, #0
 800830c:	2700      	movs	r7, #0
 800830e:	9b06      	ldr	r3, [sp, #24]
 8008310:	4599      	cmp	r9, r3
 8008312:	dd06      	ble.n	8008322 <__kernel_rem_pio2+0x3da>
 8008314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008316:	e8e3 6702 	strd	r6, r7, [r3], #8
 800831a:	f108 0801 	add.w	r8, r8, #1
 800831e:	930a      	str	r3, [sp, #40]	; 0x28
 8008320:	e7df      	b.n	80082e2 <__kernel_rem_pio2+0x39a>
 8008322:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008326:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800832a:	f7f8 f97d 	bl	8000628 <__aeabi_dmul>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4630      	mov	r0, r6
 8008334:	4639      	mov	r1, r7
 8008336:	f7f7 ffc1 	bl	80002bc <__adddf3>
 800833a:	f109 0901 	add.w	r9, r9, #1
 800833e:	4606      	mov	r6, r0
 8008340:	460f      	mov	r7, r1
 8008342:	e7e4      	b.n	800830e <__kernel_rem_pio2+0x3c6>
 8008344:	3d01      	subs	r5, #1
 8008346:	e748      	b.n	80081da <__kernel_rem_pio2+0x292>
 8008348:	ec47 6b10 	vmov	d0, r6, r7
 800834c:	f1ca 0000 	rsb	r0, sl, #0
 8008350:	f000 fa9a 	bl	8008888 <scalbn>
 8008354:	ec57 6b10 	vmov	r6, r7, d0
 8008358:	4ba0      	ldr	r3, [pc, #640]	; (80085dc <__kernel_rem_pio2+0x694>)
 800835a:	ee10 0a10 	vmov	r0, s0
 800835e:	2200      	movs	r2, #0
 8008360:	4639      	mov	r1, r7
 8008362:	f7f8 fbe7 	bl	8000b34 <__aeabi_dcmpge>
 8008366:	b1f8      	cbz	r0, 80083a8 <__kernel_rem_pio2+0x460>
 8008368:	4b9d      	ldr	r3, [pc, #628]	; (80085e0 <__kernel_rem_pio2+0x698>)
 800836a:	2200      	movs	r2, #0
 800836c:	4630      	mov	r0, r6
 800836e:	4639      	mov	r1, r7
 8008370:	f7f8 f95a 	bl	8000628 <__aeabi_dmul>
 8008374:	f7f8 fc08 	bl	8000b88 <__aeabi_d2iz>
 8008378:	4680      	mov	r8, r0
 800837a:	f7f8 f8eb 	bl	8000554 <__aeabi_i2d>
 800837e:	4b97      	ldr	r3, [pc, #604]	; (80085dc <__kernel_rem_pio2+0x694>)
 8008380:	2200      	movs	r2, #0
 8008382:	f7f8 f951 	bl	8000628 <__aeabi_dmul>
 8008386:	460b      	mov	r3, r1
 8008388:	4602      	mov	r2, r0
 800838a:	4639      	mov	r1, r7
 800838c:	4630      	mov	r0, r6
 800838e:	f7f7 ff93 	bl	80002b8 <__aeabi_dsub>
 8008392:	f7f8 fbf9 	bl	8000b88 <__aeabi_d2iz>
 8008396:	1c65      	adds	r5, r4, #1
 8008398:	ab0e      	add	r3, sp, #56	; 0x38
 800839a:	f10a 0a18 	add.w	sl, sl, #24
 800839e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80083a2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80083a6:	e720      	b.n	80081ea <__kernel_rem_pio2+0x2a2>
 80083a8:	4630      	mov	r0, r6
 80083aa:	4639      	mov	r1, r7
 80083ac:	f7f8 fbec 	bl	8000b88 <__aeabi_d2iz>
 80083b0:	ab0e      	add	r3, sp, #56	; 0x38
 80083b2:	4625      	mov	r5, r4
 80083b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80083b8:	e717      	b.n	80081ea <__kernel_rem_pio2+0x2a2>
 80083ba:	ab0e      	add	r3, sp, #56	; 0x38
 80083bc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80083c0:	f7f8 f8c8 	bl	8000554 <__aeabi_i2d>
 80083c4:	4632      	mov	r2, r6
 80083c6:	463b      	mov	r3, r7
 80083c8:	f7f8 f92e 	bl	8000628 <__aeabi_dmul>
 80083cc:	4b84      	ldr	r3, [pc, #528]	; (80085e0 <__kernel_rem_pio2+0x698>)
 80083ce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80083d2:	2200      	movs	r2, #0
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	f7f8 f926 	bl	8000628 <__aeabi_dmul>
 80083dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083e0:	4606      	mov	r6, r0
 80083e2:	460f      	mov	r7, r1
 80083e4:	e70f      	b.n	8008206 <__kernel_rem_pio2+0x2be>
 80083e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80083ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80083ee:	f7f8 f91b 	bl	8000628 <__aeabi_dmul>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083fa:	f7f7 ff5f 	bl	80002bc <__adddf3>
 80083fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008402:	f108 0801 	add.w	r8, r8, #1
 8008406:	9b02      	ldr	r3, [sp, #8]
 8008408:	4598      	cmp	r8, r3
 800840a:	dc01      	bgt.n	8008410 <__kernel_rem_pio2+0x4c8>
 800840c:	45b8      	cmp	r8, r7
 800840e:	ddea      	ble.n	80083e6 <__kernel_rem_pio2+0x49e>
 8008410:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008414:	ab4a      	add	r3, sp, #296	; 0x128
 8008416:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800841a:	ed87 7b00 	vstr	d7, [r7]
 800841e:	3e01      	subs	r6, #1
 8008420:	e6f8      	b.n	8008214 <__kernel_rem_pio2+0x2cc>
 8008422:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008424:	2b02      	cmp	r3, #2
 8008426:	dc0b      	bgt.n	8008440 <__kernel_rem_pio2+0x4f8>
 8008428:	2b00      	cmp	r3, #0
 800842a:	dc35      	bgt.n	8008498 <__kernel_rem_pio2+0x550>
 800842c:	d059      	beq.n	80084e2 <__kernel_rem_pio2+0x59a>
 800842e:	9b04      	ldr	r3, [sp, #16]
 8008430:	f003 0007 	and.w	r0, r3, #7
 8008434:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008438:	ecbd 8b02 	vpop	{d8}
 800843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008442:	2b03      	cmp	r3, #3
 8008444:	d1f3      	bne.n	800842e <__kernel_rem_pio2+0x4e6>
 8008446:	ab4a      	add	r3, sp, #296	; 0x128
 8008448:	4423      	add	r3, r4
 800844a:	9306      	str	r3, [sp, #24]
 800844c:	461c      	mov	r4, r3
 800844e:	469a      	mov	sl, r3
 8008450:	9502      	str	r5, [sp, #8]
 8008452:	9b02      	ldr	r3, [sp, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	f1aa 0a08 	sub.w	sl, sl, #8
 800845a:	dc6b      	bgt.n	8008534 <__kernel_rem_pio2+0x5ec>
 800845c:	46aa      	mov	sl, r5
 800845e:	f1ba 0f01 	cmp.w	sl, #1
 8008462:	f1a4 0408 	sub.w	r4, r4, #8
 8008466:	f300 8085 	bgt.w	8008574 <__kernel_rem_pio2+0x62c>
 800846a:	9c06      	ldr	r4, [sp, #24]
 800846c:	2000      	movs	r0, #0
 800846e:	3408      	adds	r4, #8
 8008470:	2100      	movs	r1, #0
 8008472:	2d01      	cmp	r5, #1
 8008474:	f300 809d 	bgt.w	80085b2 <__kernel_rem_pio2+0x66a>
 8008478:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800847c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008480:	f1bb 0f00 	cmp.w	fp, #0
 8008484:	f040 809b 	bne.w	80085be <__kernel_rem_pio2+0x676>
 8008488:	9b01      	ldr	r3, [sp, #4]
 800848a:	e9c3 5600 	strd	r5, r6, [r3]
 800848e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008492:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008496:	e7ca      	b.n	800842e <__kernel_rem_pio2+0x4e6>
 8008498:	3408      	adds	r4, #8
 800849a:	ab4a      	add	r3, sp, #296	; 0x128
 800849c:	441c      	add	r4, r3
 800849e:	462e      	mov	r6, r5
 80084a0:	2000      	movs	r0, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	2e00      	cmp	r6, #0
 80084a6:	da36      	bge.n	8008516 <__kernel_rem_pio2+0x5ce>
 80084a8:	f1bb 0f00 	cmp.w	fp, #0
 80084ac:	d039      	beq.n	8008522 <__kernel_rem_pio2+0x5da>
 80084ae:	4602      	mov	r2, r0
 80084b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084b4:	9c01      	ldr	r4, [sp, #4]
 80084b6:	e9c4 2300 	strd	r2, r3, [r4]
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80084c2:	f7f7 fef9 	bl	80002b8 <__aeabi_dsub>
 80084c6:	ae4c      	add	r6, sp, #304	; 0x130
 80084c8:	2401      	movs	r4, #1
 80084ca:	42a5      	cmp	r5, r4
 80084cc:	da2c      	bge.n	8008528 <__kernel_rem_pio2+0x5e0>
 80084ce:	f1bb 0f00 	cmp.w	fp, #0
 80084d2:	d002      	beq.n	80084da <__kernel_rem_pio2+0x592>
 80084d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084d8:	4619      	mov	r1, r3
 80084da:	9b01      	ldr	r3, [sp, #4]
 80084dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80084e0:	e7a5      	b.n	800842e <__kernel_rem_pio2+0x4e6>
 80084e2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80084e6:	eb0d 0403 	add.w	r4, sp, r3
 80084ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80084ee:	2000      	movs	r0, #0
 80084f0:	2100      	movs	r1, #0
 80084f2:	2d00      	cmp	r5, #0
 80084f4:	da09      	bge.n	800850a <__kernel_rem_pio2+0x5c2>
 80084f6:	f1bb 0f00 	cmp.w	fp, #0
 80084fa:	d002      	beq.n	8008502 <__kernel_rem_pio2+0x5ba>
 80084fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008500:	4619      	mov	r1, r3
 8008502:	9b01      	ldr	r3, [sp, #4]
 8008504:	e9c3 0100 	strd	r0, r1, [r3]
 8008508:	e791      	b.n	800842e <__kernel_rem_pio2+0x4e6>
 800850a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800850e:	f7f7 fed5 	bl	80002bc <__adddf3>
 8008512:	3d01      	subs	r5, #1
 8008514:	e7ed      	b.n	80084f2 <__kernel_rem_pio2+0x5aa>
 8008516:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800851a:	f7f7 fecf 	bl	80002bc <__adddf3>
 800851e:	3e01      	subs	r6, #1
 8008520:	e7c0      	b.n	80084a4 <__kernel_rem_pio2+0x55c>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	e7c5      	b.n	80084b4 <__kernel_rem_pio2+0x56c>
 8008528:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800852c:	f7f7 fec6 	bl	80002bc <__adddf3>
 8008530:	3401      	adds	r4, #1
 8008532:	e7ca      	b.n	80084ca <__kernel_rem_pio2+0x582>
 8008534:	e9da 8900 	ldrd	r8, r9, [sl]
 8008538:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800853c:	9b02      	ldr	r3, [sp, #8]
 800853e:	3b01      	subs	r3, #1
 8008540:	9302      	str	r3, [sp, #8]
 8008542:	4632      	mov	r2, r6
 8008544:	463b      	mov	r3, r7
 8008546:	4640      	mov	r0, r8
 8008548:	4649      	mov	r1, r9
 800854a:	f7f7 feb7 	bl	80002bc <__adddf3>
 800854e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4640      	mov	r0, r8
 8008558:	4649      	mov	r1, r9
 800855a:	f7f7 fead 	bl	80002b8 <__aeabi_dsub>
 800855e:	4632      	mov	r2, r6
 8008560:	463b      	mov	r3, r7
 8008562:	f7f7 feab 	bl	80002bc <__adddf3>
 8008566:	ed9d 7b08 	vldr	d7, [sp, #32]
 800856a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800856e:	ed8a 7b00 	vstr	d7, [sl]
 8008572:	e76e      	b.n	8008452 <__kernel_rem_pio2+0x50a>
 8008574:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008578:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800857c:	4640      	mov	r0, r8
 800857e:	4632      	mov	r2, r6
 8008580:	463b      	mov	r3, r7
 8008582:	4649      	mov	r1, r9
 8008584:	f7f7 fe9a 	bl	80002bc <__adddf3>
 8008588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4640      	mov	r0, r8
 8008592:	4649      	mov	r1, r9
 8008594:	f7f7 fe90 	bl	80002b8 <__aeabi_dsub>
 8008598:	4632      	mov	r2, r6
 800859a:	463b      	mov	r3, r7
 800859c:	f7f7 fe8e 	bl	80002bc <__adddf3>
 80085a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80085a8:	ed84 7b00 	vstr	d7, [r4]
 80085ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085b0:	e755      	b.n	800845e <__kernel_rem_pio2+0x516>
 80085b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80085b6:	f7f7 fe81 	bl	80002bc <__adddf3>
 80085ba:	3d01      	subs	r5, #1
 80085bc:	e759      	b.n	8008472 <__kernel_rem_pio2+0x52a>
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	9a01      	ldr	r2, [sp, #4]
 80085c2:	601d      	str	r5, [r3, #0]
 80085c4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80085c8:	605c      	str	r4, [r3, #4]
 80085ca:	609f      	str	r7, [r3, #8]
 80085cc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80085d0:	60d3      	str	r3, [r2, #12]
 80085d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085d6:	6110      	str	r0, [r2, #16]
 80085d8:	6153      	str	r3, [r2, #20]
 80085da:	e728      	b.n	800842e <__kernel_rem_pio2+0x4e6>
 80085dc:	41700000 	.word	0x41700000
 80085e0:	3e700000 	.word	0x3e700000
 80085e4:	00000000 	.word	0x00000000

080085e8 <__kernel_sin>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	ed2d 8b04 	vpush	{d8-d9}
 80085f0:	eeb0 8a41 	vmov.f32	s16, s2
 80085f4:	eef0 8a61 	vmov.f32	s17, s3
 80085f8:	ec55 4b10 	vmov	r4, r5, d0
 80085fc:	b083      	sub	sp, #12
 80085fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008602:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008606:	9001      	str	r0, [sp, #4]
 8008608:	da06      	bge.n	8008618 <__kernel_sin+0x30>
 800860a:	ee10 0a10 	vmov	r0, s0
 800860e:	4629      	mov	r1, r5
 8008610:	f7f8 faba 	bl	8000b88 <__aeabi_d2iz>
 8008614:	2800      	cmp	r0, #0
 8008616:	d051      	beq.n	80086bc <__kernel_sin+0xd4>
 8008618:	4622      	mov	r2, r4
 800861a:	462b      	mov	r3, r5
 800861c:	4620      	mov	r0, r4
 800861e:	4629      	mov	r1, r5
 8008620:	f7f8 f802 	bl	8000628 <__aeabi_dmul>
 8008624:	4682      	mov	sl, r0
 8008626:	468b      	mov	fp, r1
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f7f7 fffa 	bl	8000628 <__aeabi_dmul>
 8008634:	a341      	add	r3, pc, #260	; (adr r3, 800873c <__kernel_sin+0x154>)
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	4680      	mov	r8, r0
 800863c:	4689      	mov	r9, r1
 800863e:	4650      	mov	r0, sl
 8008640:	4659      	mov	r1, fp
 8008642:	f7f7 fff1 	bl	8000628 <__aeabi_dmul>
 8008646:	a33f      	add	r3, pc, #252	; (adr r3, 8008744 <__kernel_sin+0x15c>)
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f7f7 fe34 	bl	80002b8 <__aeabi_dsub>
 8008650:	4652      	mov	r2, sl
 8008652:	465b      	mov	r3, fp
 8008654:	f7f7 ffe8 	bl	8000628 <__aeabi_dmul>
 8008658:	a33c      	add	r3, pc, #240	; (adr r3, 800874c <__kernel_sin+0x164>)
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	f7f7 fe2d 	bl	80002bc <__adddf3>
 8008662:	4652      	mov	r2, sl
 8008664:	465b      	mov	r3, fp
 8008666:	f7f7 ffdf 	bl	8000628 <__aeabi_dmul>
 800866a:	a33a      	add	r3, pc, #232	; (adr r3, 8008754 <__kernel_sin+0x16c>)
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	f7f7 fe22 	bl	80002b8 <__aeabi_dsub>
 8008674:	4652      	mov	r2, sl
 8008676:	465b      	mov	r3, fp
 8008678:	f7f7 ffd6 	bl	8000628 <__aeabi_dmul>
 800867c:	a337      	add	r3, pc, #220	; (adr r3, 800875c <__kernel_sin+0x174>)
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	f7f7 fe1b 	bl	80002bc <__adddf3>
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	4606      	mov	r6, r0
 800868a:	460f      	mov	r7, r1
 800868c:	b9eb      	cbnz	r3, 80086ca <__kernel_sin+0xe2>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4650      	mov	r0, sl
 8008694:	4659      	mov	r1, fp
 8008696:	f7f7 ffc7 	bl	8000628 <__aeabi_dmul>
 800869a:	a325      	add	r3, pc, #148	; (adr r3, 8008730 <__kernel_sin+0x148>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	f7f7 fe0a 	bl	80002b8 <__aeabi_dsub>
 80086a4:	4642      	mov	r2, r8
 80086a6:	464b      	mov	r3, r9
 80086a8:	f7f7 ffbe 	bl	8000628 <__aeabi_dmul>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4620      	mov	r0, r4
 80086b2:	4629      	mov	r1, r5
 80086b4:	f7f7 fe02 	bl	80002bc <__adddf3>
 80086b8:	4604      	mov	r4, r0
 80086ba:	460d      	mov	r5, r1
 80086bc:	ec45 4b10 	vmov	d0, r4, r5
 80086c0:	b003      	add	sp, #12
 80086c2:	ecbd 8b04 	vpop	{d8-d9}
 80086c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ca:	4b1b      	ldr	r3, [pc, #108]	; (8008738 <__kernel_sin+0x150>)
 80086cc:	ec51 0b18 	vmov	r0, r1, d8
 80086d0:	2200      	movs	r2, #0
 80086d2:	f7f7 ffa9 	bl	8000628 <__aeabi_dmul>
 80086d6:	4632      	mov	r2, r6
 80086d8:	ec41 0b19 	vmov	d9, r0, r1
 80086dc:	463b      	mov	r3, r7
 80086de:	4640      	mov	r0, r8
 80086e0:	4649      	mov	r1, r9
 80086e2:	f7f7 ffa1 	bl	8000628 <__aeabi_dmul>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	ec51 0b19 	vmov	r0, r1, d9
 80086ee:	f7f7 fde3 	bl	80002b8 <__aeabi_dsub>
 80086f2:	4652      	mov	r2, sl
 80086f4:	465b      	mov	r3, fp
 80086f6:	f7f7 ff97 	bl	8000628 <__aeabi_dmul>
 80086fa:	ec53 2b18 	vmov	r2, r3, d8
 80086fe:	f7f7 fddb 	bl	80002b8 <__aeabi_dsub>
 8008702:	a30b      	add	r3, pc, #44	; (adr r3, 8008730 <__kernel_sin+0x148>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	4606      	mov	r6, r0
 800870a:	460f      	mov	r7, r1
 800870c:	4640      	mov	r0, r8
 800870e:	4649      	mov	r1, r9
 8008710:	f7f7 ff8a 	bl	8000628 <__aeabi_dmul>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4630      	mov	r0, r6
 800871a:	4639      	mov	r1, r7
 800871c:	f7f7 fdce 	bl	80002bc <__adddf3>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4620      	mov	r0, r4
 8008726:	4629      	mov	r1, r5
 8008728:	f7f7 fdc6 	bl	80002b8 <__aeabi_dsub>
 800872c:	e7c4      	b.n	80086b8 <__kernel_sin+0xd0>
 800872e:	bf00      	nop
 8008730:	55555549 	.word	0x55555549
 8008734:	3fc55555 	.word	0x3fc55555
 8008738:	3fe00000 	.word	0x3fe00000
 800873c:	5acfd57c 	.word	0x5acfd57c
 8008740:	3de5d93a 	.word	0x3de5d93a
 8008744:	8a2b9ceb 	.word	0x8a2b9ceb
 8008748:	3e5ae5e6 	.word	0x3e5ae5e6
 800874c:	57b1fe7d 	.word	0x57b1fe7d
 8008750:	3ec71de3 	.word	0x3ec71de3
 8008754:	19c161d5 	.word	0x19c161d5
 8008758:	3f2a01a0 	.word	0x3f2a01a0
 800875c:	1110f8a6 	.word	0x1110f8a6
 8008760:	3f811111 	.word	0x3f811111

08008764 <fabs>:
 8008764:	ec51 0b10 	vmov	r0, r1, d0
 8008768:	ee10 2a10 	vmov	r2, s0
 800876c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008770:	ec43 2b10 	vmov	d0, r2, r3
 8008774:	4770      	bx	lr
	...

08008778 <floor>:
 8008778:	ec51 0b10 	vmov	r0, r1, d0
 800877c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008780:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008784:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008788:	2e13      	cmp	r6, #19
 800878a:	ee10 5a10 	vmov	r5, s0
 800878e:	ee10 8a10 	vmov	r8, s0
 8008792:	460c      	mov	r4, r1
 8008794:	dc32      	bgt.n	80087fc <floor+0x84>
 8008796:	2e00      	cmp	r6, #0
 8008798:	da14      	bge.n	80087c4 <floor+0x4c>
 800879a:	a333      	add	r3, pc, #204	; (adr r3, 8008868 <floor+0xf0>)
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	f7f7 fd8c 	bl	80002bc <__adddf3>
 80087a4:	2200      	movs	r2, #0
 80087a6:	2300      	movs	r3, #0
 80087a8:	f7f8 f9ce 	bl	8000b48 <__aeabi_dcmpgt>
 80087ac:	b138      	cbz	r0, 80087be <floor+0x46>
 80087ae:	2c00      	cmp	r4, #0
 80087b0:	da57      	bge.n	8008862 <floor+0xea>
 80087b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80087b6:	431d      	orrs	r5, r3
 80087b8:	d001      	beq.n	80087be <floor+0x46>
 80087ba:	4c2d      	ldr	r4, [pc, #180]	; (8008870 <floor+0xf8>)
 80087bc:	2500      	movs	r5, #0
 80087be:	4621      	mov	r1, r4
 80087c0:	4628      	mov	r0, r5
 80087c2:	e025      	b.n	8008810 <floor+0x98>
 80087c4:	4f2b      	ldr	r7, [pc, #172]	; (8008874 <floor+0xfc>)
 80087c6:	4137      	asrs	r7, r6
 80087c8:	ea01 0307 	and.w	r3, r1, r7
 80087cc:	4303      	orrs	r3, r0
 80087ce:	d01f      	beq.n	8008810 <floor+0x98>
 80087d0:	a325      	add	r3, pc, #148	; (adr r3, 8008868 <floor+0xf0>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 fd71 	bl	80002bc <__adddf3>
 80087da:	2200      	movs	r2, #0
 80087dc:	2300      	movs	r3, #0
 80087de:	f7f8 f9b3 	bl	8000b48 <__aeabi_dcmpgt>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d0eb      	beq.n	80087be <floor+0x46>
 80087e6:	2c00      	cmp	r4, #0
 80087e8:	bfbe      	ittt	lt
 80087ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80087ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80087f2:	19a4      	addlt	r4, r4, r6
 80087f4:	ea24 0407 	bic.w	r4, r4, r7
 80087f8:	2500      	movs	r5, #0
 80087fa:	e7e0      	b.n	80087be <floor+0x46>
 80087fc:	2e33      	cmp	r6, #51	; 0x33
 80087fe:	dd0b      	ble.n	8008818 <floor+0xa0>
 8008800:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008804:	d104      	bne.n	8008810 <floor+0x98>
 8008806:	ee10 2a10 	vmov	r2, s0
 800880a:	460b      	mov	r3, r1
 800880c:	f7f7 fd56 	bl	80002bc <__adddf3>
 8008810:	ec41 0b10 	vmov	d0, r0, r1
 8008814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008818:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800881c:	f04f 33ff 	mov.w	r3, #4294967295
 8008820:	fa23 f707 	lsr.w	r7, r3, r7
 8008824:	4207      	tst	r7, r0
 8008826:	d0f3      	beq.n	8008810 <floor+0x98>
 8008828:	a30f      	add	r3, pc, #60	; (adr r3, 8008868 <floor+0xf0>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	f7f7 fd45 	bl	80002bc <__adddf3>
 8008832:	2200      	movs	r2, #0
 8008834:	2300      	movs	r3, #0
 8008836:	f7f8 f987 	bl	8000b48 <__aeabi_dcmpgt>
 800883a:	2800      	cmp	r0, #0
 800883c:	d0bf      	beq.n	80087be <floor+0x46>
 800883e:	2c00      	cmp	r4, #0
 8008840:	da02      	bge.n	8008848 <floor+0xd0>
 8008842:	2e14      	cmp	r6, #20
 8008844:	d103      	bne.n	800884e <floor+0xd6>
 8008846:	3401      	adds	r4, #1
 8008848:	ea25 0507 	bic.w	r5, r5, r7
 800884c:	e7b7      	b.n	80087be <floor+0x46>
 800884e:	2301      	movs	r3, #1
 8008850:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008854:	fa03 f606 	lsl.w	r6, r3, r6
 8008858:	4435      	add	r5, r6
 800885a:	4545      	cmp	r5, r8
 800885c:	bf38      	it	cc
 800885e:	18e4      	addcc	r4, r4, r3
 8008860:	e7f2      	b.n	8008848 <floor+0xd0>
 8008862:	2500      	movs	r5, #0
 8008864:	462c      	mov	r4, r5
 8008866:	e7aa      	b.n	80087be <floor+0x46>
 8008868:	8800759c 	.word	0x8800759c
 800886c:	7e37e43c 	.word	0x7e37e43c
 8008870:	bff00000 	.word	0xbff00000
 8008874:	000fffff 	.word	0x000fffff

08008878 <nan>:
 8008878:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008880 <nan+0x8>
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	00000000 	.word	0x00000000
 8008884:	7ff80000 	.word	0x7ff80000

08008888 <scalbn>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	ec55 4b10 	vmov	r4, r5, d0
 800888e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008892:	4606      	mov	r6, r0
 8008894:	462b      	mov	r3, r5
 8008896:	b99a      	cbnz	r2, 80088c0 <scalbn+0x38>
 8008898:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800889c:	4323      	orrs	r3, r4
 800889e:	d036      	beq.n	800890e <scalbn+0x86>
 80088a0:	4b39      	ldr	r3, [pc, #228]	; (8008988 <scalbn+0x100>)
 80088a2:	4629      	mov	r1, r5
 80088a4:	ee10 0a10 	vmov	r0, s0
 80088a8:	2200      	movs	r2, #0
 80088aa:	f7f7 febd 	bl	8000628 <__aeabi_dmul>
 80088ae:	4b37      	ldr	r3, [pc, #220]	; (800898c <scalbn+0x104>)
 80088b0:	429e      	cmp	r6, r3
 80088b2:	4604      	mov	r4, r0
 80088b4:	460d      	mov	r5, r1
 80088b6:	da10      	bge.n	80088da <scalbn+0x52>
 80088b8:	a32b      	add	r3, pc, #172	; (adr r3, 8008968 <scalbn+0xe0>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	e03a      	b.n	8008936 <scalbn+0xae>
 80088c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80088c4:	428a      	cmp	r2, r1
 80088c6:	d10c      	bne.n	80088e2 <scalbn+0x5a>
 80088c8:	ee10 2a10 	vmov	r2, s0
 80088cc:	4620      	mov	r0, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	f7f7 fcf4 	bl	80002bc <__adddf3>
 80088d4:	4604      	mov	r4, r0
 80088d6:	460d      	mov	r5, r1
 80088d8:	e019      	b.n	800890e <scalbn+0x86>
 80088da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80088de:	460b      	mov	r3, r1
 80088e0:	3a36      	subs	r2, #54	; 0x36
 80088e2:	4432      	add	r2, r6
 80088e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80088e8:	428a      	cmp	r2, r1
 80088ea:	dd08      	ble.n	80088fe <scalbn+0x76>
 80088ec:	2d00      	cmp	r5, #0
 80088ee:	a120      	add	r1, pc, #128	; (adr r1, 8008970 <scalbn+0xe8>)
 80088f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f4:	da1c      	bge.n	8008930 <scalbn+0xa8>
 80088f6:	a120      	add	r1, pc, #128	; (adr r1, 8008978 <scalbn+0xf0>)
 80088f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088fc:	e018      	b.n	8008930 <scalbn+0xa8>
 80088fe:	2a00      	cmp	r2, #0
 8008900:	dd08      	ble.n	8008914 <scalbn+0x8c>
 8008902:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008906:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800890a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800890e:	ec45 4b10 	vmov	d0, r4, r5
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008918:	da19      	bge.n	800894e <scalbn+0xc6>
 800891a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800891e:	429e      	cmp	r6, r3
 8008920:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008924:	dd0a      	ble.n	800893c <scalbn+0xb4>
 8008926:	a112      	add	r1, pc, #72	; (adr r1, 8008970 <scalbn+0xe8>)
 8008928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e2      	bne.n	80088f6 <scalbn+0x6e>
 8008930:	a30f      	add	r3, pc, #60	; (adr r3, 8008970 <scalbn+0xe8>)
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f7f7 fe77 	bl	8000628 <__aeabi_dmul>
 800893a:	e7cb      	b.n	80088d4 <scalbn+0x4c>
 800893c:	a10a      	add	r1, pc, #40	; (adr r1, 8008968 <scalbn+0xe0>)
 800893e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0b8      	beq.n	80088b8 <scalbn+0x30>
 8008946:	a10e      	add	r1, pc, #56	; (adr r1, 8008980 <scalbn+0xf8>)
 8008948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800894c:	e7b4      	b.n	80088b8 <scalbn+0x30>
 800894e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008952:	3236      	adds	r2, #54	; 0x36
 8008954:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008958:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800895c:	4620      	mov	r0, r4
 800895e:	4b0c      	ldr	r3, [pc, #48]	; (8008990 <scalbn+0x108>)
 8008960:	2200      	movs	r2, #0
 8008962:	e7e8      	b.n	8008936 <scalbn+0xae>
 8008964:	f3af 8000 	nop.w
 8008968:	c2f8f359 	.word	0xc2f8f359
 800896c:	01a56e1f 	.word	0x01a56e1f
 8008970:	8800759c 	.word	0x8800759c
 8008974:	7e37e43c 	.word	0x7e37e43c
 8008978:	8800759c 	.word	0x8800759c
 800897c:	fe37e43c 	.word	0xfe37e43c
 8008980:	c2f8f359 	.word	0xc2f8f359
 8008984:	81a56e1f 	.word	0x81a56e1f
 8008988:	43500000 	.word	0x43500000
 800898c:	ffff3cb0 	.word	0xffff3cb0
 8008990:	3c900000 	.word	0x3c900000

08008994 <atoi>:
 8008994:	220a      	movs	r2, #10
 8008996:	2100      	movs	r1, #0
 8008998:	f003 b846 	b.w	800ba28 <strtol>

0800899c <__errno>:
 800899c:	4b01      	ldr	r3, [pc, #4]	; (80089a4 <__errno+0x8>)
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	2000000c 	.word	0x2000000c

080089a8 <__libc_init_array>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	4d0d      	ldr	r5, [pc, #52]	; (80089e0 <__libc_init_array+0x38>)
 80089ac:	4c0d      	ldr	r4, [pc, #52]	; (80089e4 <__libc_init_array+0x3c>)
 80089ae:	1b64      	subs	r4, r4, r5
 80089b0:	10a4      	asrs	r4, r4, #2
 80089b2:	2600      	movs	r6, #0
 80089b4:	42a6      	cmp	r6, r4
 80089b6:	d109      	bne.n	80089cc <__libc_init_array+0x24>
 80089b8:	4d0b      	ldr	r5, [pc, #44]	; (80089e8 <__libc_init_array+0x40>)
 80089ba:	4c0c      	ldr	r4, [pc, #48]	; (80089ec <__libc_init_array+0x44>)
 80089bc:	f006 fdb8 	bl	800f530 <_init>
 80089c0:	1b64      	subs	r4, r4, r5
 80089c2:	10a4      	asrs	r4, r4, #2
 80089c4:	2600      	movs	r6, #0
 80089c6:	42a6      	cmp	r6, r4
 80089c8:	d105      	bne.n	80089d6 <__libc_init_array+0x2e>
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d0:	4798      	blx	r3
 80089d2:	3601      	adds	r6, #1
 80089d4:	e7ee      	b.n	80089b4 <__libc_init_array+0xc>
 80089d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089da:	4798      	blx	r3
 80089dc:	3601      	adds	r6, #1
 80089de:	e7f2      	b.n	80089c6 <__libc_init_array+0x1e>
 80089e0:	08010470 	.word	0x08010470
 80089e4:	08010470 	.word	0x08010470
 80089e8:	08010470 	.word	0x08010470
 80089ec:	08010474 	.word	0x08010474

080089f0 <localtime>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <localtime+0x30>)
 80089f4:	681d      	ldr	r5, [r3, #0]
 80089f6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80089f8:	4604      	mov	r4, r0
 80089fa:	b953      	cbnz	r3, 8008a12 <localtime+0x22>
 80089fc:	2024      	movs	r0, #36	; 0x24
 80089fe:	f000 f909 	bl	8008c14 <malloc>
 8008a02:	4602      	mov	r2, r0
 8008a04:	63e8      	str	r0, [r5, #60]	; 0x3c
 8008a06:	b920      	cbnz	r0, 8008a12 <localtime+0x22>
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <localtime+0x34>)
 8008a0a:	4807      	ldr	r0, [pc, #28]	; (8008a28 <localtime+0x38>)
 8008a0c:	2132      	movs	r1, #50	; 0x32
 8008a0e:	f003 fae5 	bl	800bfdc <__assert_func>
 8008a12:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8008a14:	4620      	mov	r0, r4
 8008a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a1a:	f000 b807 	b.w	8008a2c <localtime_r>
 8008a1e:	bf00      	nop
 8008a20:	2000000c 	.word	0x2000000c
 8008a24:	0800fbdc 	.word	0x0800fbdc
 8008a28:	0800fbf3 	.word	0x0800fbf3

08008a2c <localtime_r>:
 8008a2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008a30:	4680      	mov	r8, r0
 8008a32:	9101      	str	r1, [sp, #4]
 8008a34:	f004 fd54 	bl	800d4e0 <__gettzinfo>
 8008a38:	9901      	ldr	r1, [sp, #4]
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	f004 fd53 	bl	800d4e8 <gmtime_r>
 8008a42:	6943      	ldr	r3, [r0, #20]
 8008a44:	0799      	lsls	r1, r3, #30
 8008a46:	4604      	mov	r4, r0
 8008a48:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8008a4c:	d105      	bne.n	8008a5a <localtime_r+0x2e>
 8008a4e:	2264      	movs	r2, #100	; 0x64
 8008a50:	fb97 f3f2 	sdiv	r3, r7, r2
 8008a54:	fb02 7313 	mls	r3, r2, r3, r7
 8008a58:	bb73      	cbnz	r3, 8008ab8 <localtime_r+0x8c>
 8008a5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008a5e:	fb97 f6f3 	sdiv	r6, r7, r3
 8008a62:	fb03 7616 	mls	r6, r3, r6, r7
 8008a66:	fab6 f386 	clz	r3, r6
 8008a6a:	095b      	lsrs	r3, r3, #5
 8008a6c:	4e67      	ldr	r6, [pc, #412]	; (8008c0c <localtime_r+0x1e0>)
 8008a6e:	2230      	movs	r2, #48	; 0x30
 8008a70:	fb02 6603 	mla	r6, r2, r3, r6
 8008a74:	f003 f90a 	bl	800bc8c <__tz_lock>
 8008a78:	f003 f914 	bl	800bca4 <_tzset_unlocked>
 8008a7c:	4b64      	ldr	r3, [pc, #400]	; (8008c10 <localtime_r+0x1e4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	b34b      	cbz	r3, 8008ad6 <localtime_r+0xaa>
 8008a82:	686b      	ldr	r3, [r5, #4]
 8008a84:	42bb      	cmp	r3, r7
 8008a86:	d119      	bne.n	8008abc <localtime_r+0x90>
 8008a88:	682f      	ldr	r7, [r5, #0]
 8008a8a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008a8e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8008a92:	b9df      	cbnz	r7, 8008acc <localtime_r+0xa0>
 8008a94:	4282      	cmp	r2, r0
 8008a96:	eb73 0101 	sbcs.w	r1, r3, r1
 8008a9a:	da23      	bge.n	8008ae4 <localtime_r+0xb8>
 8008a9c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8008aa0:	4282      	cmp	r2, r0
 8008aa2:	eb73 0701 	sbcs.w	r7, r3, r1
 8008aa6:	bfb4      	ite	lt
 8008aa8:	2701      	movlt	r7, #1
 8008aaa:	2700      	movge	r7, #0
 8008aac:	4282      	cmp	r2, r0
 8008aae:	418b      	sbcs	r3, r1
 8008ab0:	6227      	str	r7, [r4, #32]
 8008ab2:	db19      	blt.n	8008ae8 <localtime_r+0xbc>
 8008ab4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008ab6:	e018      	b.n	8008aea <localtime_r+0xbe>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e7d7      	b.n	8008a6c <localtime_r+0x40>
 8008abc:	4638      	mov	r0, r7
 8008abe:	f003 f83b 	bl	800bb38 <__tzcalc_limits>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d1e0      	bne.n	8008a88 <localtime_r+0x5c>
 8008ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aca:	e004      	b.n	8008ad6 <localtime_r+0xaa>
 8008acc:	4282      	cmp	r2, r0
 8008ace:	eb73 0101 	sbcs.w	r1, r3, r1
 8008ad2:	da02      	bge.n	8008ada <localtime_r+0xae>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	6223      	str	r3, [r4, #32]
 8008ad8:	e7ec      	b.n	8008ab4 <localtime_r+0x88>
 8008ada:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8008ade:	4282      	cmp	r2, r0
 8008ae0:	418b      	sbcs	r3, r1
 8008ae2:	daf7      	bge.n	8008ad4 <localtime_r+0xa8>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	6223      	str	r3, [r4, #32]
 8008ae8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008aea:	6861      	ldr	r1, [r4, #4]
 8008aec:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8008af0:	203c      	movs	r0, #60	; 0x3c
 8008af2:	fb93 f5f2 	sdiv	r5, r3, r2
 8008af6:	fb02 3315 	mls	r3, r2, r5, r3
 8008afa:	fb93 f2f0 	sdiv	r2, r3, r0
 8008afe:	fb00 3012 	mls	r0, r0, r2, r3
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	1a89      	subs	r1, r1, r2
 8008b06:	68a2      	ldr	r2, [r4, #8]
 8008b08:	6061      	str	r1, [r4, #4]
 8008b0a:	1a1b      	subs	r3, r3, r0
 8008b0c:	1b52      	subs	r2, r2, r5
 8008b0e:	2b3b      	cmp	r3, #59	; 0x3b
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	60a2      	str	r2, [r4, #8]
 8008b14:	dd35      	ble.n	8008b82 <localtime_r+0x156>
 8008b16:	3101      	adds	r1, #1
 8008b18:	6061      	str	r1, [r4, #4]
 8008b1a:	3b3c      	subs	r3, #60	; 0x3c
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	6863      	ldr	r3, [r4, #4]
 8008b20:	2b3b      	cmp	r3, #59	; 0x3b
 8008b22:	dd34      	ble.n	8008b8e <localtime_r+0x162>
 8008b24:	3201      	adds	r2, #1
 8008b26:	60a2      	str	r2, [r4, #8]
 8008b28:	3b3c      	subs	r3, #60	; 0x3c
 8008b2a:	6063      	str	r3, [r4, #4]
 8008b2c:	68a3      	ldr	r3, [r4, #8]
 8008b2e:	2b17      	cmp	r3, #23
 8008b30:	dd33      	ble.n	8008b9a <localtime_r+0x16e>
 8008b32:	69e2      	ldr	r2, [r4, #28]
 8008b34:	3201      	adds	r2, #1
 8008b36:	61e2      	str	r2, [r4, #28]
 8008b38:	69a2      	ldr	r2, [r4, #24]
 8008b3a:	3201      	adds	r2, #1
 8008b3c:	2a06      	cmp	r2, #6
 8008b3e:	bfc8      	it	gt
 8008b40:	2200      	movgt	r2, #0
 8008b42:	61a2      	str	r2, [r4, #24]
 8008b44:	68e2      	ldr	r2, [r4, #12]
 8008b46:	3b18      	subs	r3, #24
 8008b48:	3201      	adds	r2, #1
 8008b4a:	60a3      	str	r3, [r4, #8]
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	60e2      	str	r2, [r4, #12]
 8008b50:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8008b54:	428a      	cmp	r2, r1
 8008b56:	dd0e      	ble.n	8008b76 <localtime_r+0x14a>
 8008b58:	2b0b      	cmp	r3, #11
 8008b5a:	eba2 0201 	sub.w	r2, r2, r1
 8008b5e:	60e2      	str	r2, [r4, #12]
 8008b60:	f103 0201 	add.w	r2, r3, #1
 8008b64:	bf09      	itett	eq
 8008b66:	6963      	ldreq	r3, [r4, #20]
 8008b68:	6122      	strne	r2, [r4, #16]
 8008b6a:	2200      	moveq	r2, #0
 8008b6c:	3301      	addeq	r3, #1
 8008b6e:	bf02      	ittt	eq
 8008b70:	6122      	streq	r2, [r4, #16]
 8008b72:	6163      	streq	r3, [r4, #20]
 8008b74:	61e2      	streq	r2, [r4, #28]
 8008b76:	f003 f88f 	bl	800bc98 <__tz_unlock>
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	b002      	add	sp, #8
 8008b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	dacb      	bge.n	8008b1e <localtime_r+0xf2>
 8008b86:	3901      	subs	r1, #1
 8008b88:	6061      	str	r1, [r4, #4]
 8008b8a:	333c      	adds	r3, #60	; 0x3c
 8008b8c:	e7c6      	b.n	8008b1c <localtime_r+0xf0>
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dacc      	bge.n	8008b2c <localtime_r+0x100>
 8008b92:	3a01      	subs	r2, #1
 8008b94:	60a2      	str	r2, [r4, #8]
 8008b96:	333c      	adds	r3, #60	; 0x3c
 8008b98:	e7c7      	b.n	8008b2a <localtime_r+0xfe>
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	daeb      	bge.n	8008b76 <localtime_r+0x14a>
 8008b9e:	69e2      	ldr	r2, [r4, #28]
 8008ba0:	3a01      	subs	r2, #1
 8008ba2:	61e2      	str	r2, [r4, #28]
 8008ba4:	69a2      	ldr	r2, [r4, #24]
 8008ba6:	3a01      	subs	r2, #1
 8008ba8:	bf48      	it	mi
 8008baa:	2206      	movmi	r2, #6
 8008bac:	61a2      	str	r2, [r4, #24]
 8008bae:	68e2      	ldr	r2, [r4, #12]
 8008bb0:	3318      	adds	r3, #24
 8008bb2:	3a01      	subs	r2, #1
 8008bb4:	60e2      	str	r2, [r4, #12]
 8008bb6:	60a3      	str	r3, [r4, #8]
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	d1dc      	bne.n	8008b76 <localtime_r+0x14a>
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	d405      	bmi.n	8008bce <localtime_r+0x1a2>
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	6923      	ldr	r3, [r4, #16]
 8008bc6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008bca:	60e3      	str	r3, [r4, #12]
 8008bcc:	e7d3      	b.n	8008b76 <localtime_r+0x14a>
 8008bce:	230b      	movs	r3, #11
 8008bd0:	6123      	str	r3, [r4, #16]
 8008bd2:	6963      	ldr	r3, [r4, #20]
 8008bd4:	1e5a      	subs	r2, r3, #1
 8008bd6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008bda:	6162      	str	r2, [r4, #20]
 8008bdc:	079a      	lsls	r2, r3, #30
 8008bde:	d105      	bne.n	8008bec <localtime_r+0x1c0>
 8008be0:	2164      	movs	r1, #100	; 0x64
 8008be2:	fb93 f2f1 	sdiv	r2, r3, r1
 8008be6:	fb01 3212 	mls	r2, r1, r2, r3
 8008bea:	b962      	cbnz	r2, 8008c06 <localtime_r+0x1da>
 8008bec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008bf0:	fb93 f1f2 	sdiv	r1, r3, r2
 8008bf4:	fb02 3311 	mls	r3, r2, r1, r3
 8008bf8:	fab3 f383 	clz	r3, r3
 8008bfc:	095b      	lsrs	r3, r3, #5
 8008bfe:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008c02:	61e3      	str	r3, [r4, #28]
 8008c04:	e7de      	b.n	8008bc4 <localtime_r+0x198>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e7f9      	b.n	8008bfe <localtime_r+0x1d2>
 8008c0a:	bf00      	nop
 8008c0c:	0800fcb0 	.word	0x0800fcb0
 8008c10:	20000350 	.word	0x20000350

08008c14 <malloc>:
 8008c14:	4b02      	ldr	r3, [pc, #8]	; (8008c20 <malloc+0xc>)
 8008c16:	4601      	mov	r1, r0
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	f000 baff 	b.w	800921c <_malloc_r>
 8008c1e:	bf00      	nop
 8008c20:	2000000c 	.word	0x2000000c

08008c24 <free>:
 8008c24:	4b02      	ldr	r3, [pc, #8]	; (8008c30 <free+0xc>)
 8008c26:	4601      	mov	r1, r0
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	f000 ba8b 	b.w	8009144 <_free_r>
 8008c2e:	bf00      	nop
 8008c30:	2000000c 	.word	0x2000000c

08008c34 <memcpy>:
 8008c34:	440a      	add	r2, r1
 8008c36:	4291      	cmp	r1, r2
 8008c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c3c:	d100      	bne.n	8008c40 <memcpy+0xc>
 8008c3e:	4770      	bx	lr
 8008c40:	b510      	push	{r4, lr}
 8008c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c4a:	4291      	cmp	r1, r2
 8008c4c:	d1f9      	bne.n	8008c42 <memcpy+0xe>
 8008c4e:	bd10      	pop	{r4, pc}

08008c50 <memset>:
 8008c50:	4402      	add	r2, r0
 8008c52:	4603      	mov	r3, r0
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d100      	bne.n	8008c5a <memset+0xa>
 8008c58:	4770      	bx	lr
 8008c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c5e:	e7f9      	b.n	8008c54 <memset+0x4>

08008c60 <validate_structure>:
 8008c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c62:	6801      	ldr	r1, [r0, #0]
 8008c64:	293b      	cmp	r1, #59	; 0x3b
 8008c66:	4604      	mov	r4, r0
 8008c68:	d911      	bls.n	8008c8e <validate_structure+0x2e>
 8008c6a:	223c      	movs	r2, #60	; 0x3c
 8008c6c:	4668      	mov	r0, sp
 8008c6e:	f003 f9e3 	bl	800c038 <div>
 8008c72:	9a01      	ldr	r2, [sp, #4]
 8008c74:	6863      	ldr	r3, [r4, #4]
 8008c76:	9900      	ldr	r1, [sp, #0]
 8008c78:	2a00      	cmp	r2, #0
 8008c7a:	440b      	add	r3, r1
 8008c7c:	6063      	str	r3, [r4, #4]
 8008c7e:	bfbb      	ittet	lt
 8008c80:	323c      	addlt	r2, #60	; 0x3c
 8008c82:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008c86:	6022      	strge	r2, [r4, #0]
 8008c88:	6022      	strlt	r2, [r4, #0]
 8008c8a:	bfb8      	it	lt
 8008c8c:	6063      	strlt	r3, [r4, #4]
 8008c8e:	6861      	ldr	r1, [r4, #4]
 8008c90:	293b      	cmp	r1, #59	; 0x3b
 8008c92:	d911      	bls.n	8008cb8 <validate_structure+0x58>
 8008c94:	223c      	movs	r2, #60	; 0x3c
 8008c96:	4668      	mov	r0, sp
 8008c98:	f003 f9ce 	bl	800c038 <div>
 8008c9c:	9a01      	ldr	r2, [sp, #4]
 8008c9e:	68a3      	ldr	r3, [r4, #8]
 8008ca0:	9900      	ldr	r1, [sp, #0]
 8008ca2:	2a00      	cmp	r2, #0
 8008ca4:	440b      	add	r3, r1
 8008ca6:	60a3      	str	r3, [r4, #8]
 8008ca8:	bfbb      	ittet	lt
 8008caa:	323c      	addlt	r2, #60	; 0x3c
 8008cac:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008cb0:	6062      	strge	r2, [r4, #4]
 8008cb2:	6062      	strlt	r2, [r4, #4]
 8008cb4:	bfb8      	it	lt
 8008cb6:	60a3      	strlt	r3, [r4, #8]
 8008cb8:	68a1      	ldr	r1, [r4, #8]
 8008cba:	2917      	cmp	r1, #23
 8008cbc:	d911      	bls.n	8008ce2 <validate_structure+0x82>
 8008cbe:	2218      	movs	r2, #24
 8008cc0:	4668      	mov	r0, sp
 8008cc2:	f003 f9b9 	bl	800c038 <div>
 8008cc6:	9a01      	ldr	r2, [sp, #4]
 8008cc8:	68e3      	ldr	r3, [r4, #12]
 8008cca:	9900      	ldr	r1, [sp, #0]
 8008ccc:	2a00      	cmp	r2, #0
 8008cce:	440b      	add	r3, r1
 8008cd0:	60e3      	str	r3, [r4, #12]
 8008cd2:	bfbb      	ittet	lt
 8008cd4:	3218      	addlt	r2, #24
 8008cd6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008cda:	60a2      	strge	r2, [r4, #8]
 8008cdc:	60a2      	strlt	r2, [r4, #8]
 8008cde:	bfb8      	it	lt
 8008ce0:	60e3      	strlt	r3, [r4, #12]
 8008ce2:	6921      	ldr	r1, [r4, #16]
 8008ce4:	290b      	cmp	r1, #11
 8008ce6:	d911      	bls.n	8008d0c <validate_structure+0xac>
 8008ce8:	220c      	movs	r2, #12
 8008cea:	4668      	mov	r0, sp
 8008cec:	f003 f9a4 	bl	800c038 <div>
 8008cf0:	9a01      	ldr	r2, [sp, #4]
 8008cf2:	6963      	ldr	r3, [r4, #20]
 8008cf4:	9900      	ldr	r1, [sp, #0]
 8008cf6:	2a00      	cmp	r2, #0
 8008cf8:	440b      	add	r3, r1
 8008cfa:	6163      	str	r3, [r4, #20]
 8008cfc:	bfbb      	ittet	lt
 8008cfe:	320c      	addlt	r2, #12
 8008d00:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008d04:	6122      	strge	r2, [r4, #16]
 8008d06:	6122      	strlt	r2, [r4, #16]
 8008d08:	bfb8      	it	lt
 8008d0a:	6163      	strlt	r3, [r4, #20]
 8008d0c:	6963      	ldr	r3, [r4, #20]
 8008d0e:	0798      	lsls	r0, r3, #30
 8008d10:	d120      	bne.n	8008d54 <validate_structure+0xf4>
 8008d12:	2164      	movs	r1, #100	; 0x64
 8008d14:	fb93 f2f1 	sdiv	r2, r3, r1
 8008d18:	fb01 3212 	mls	r2, r1, r2, r3
 8008d1c:	b9e2      	cbnz	r2, 8008d58 <validate_structure+0xf8>
 8008d1e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8008d22:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008d26:	fb93 f1f2 	sdiv	r1, r3, r2
 8008d2a:	fb02 3311 	mls	r3, r2, r1, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bf14      	ite	ne
 8008d32:	231c      	movne	r3, #28
 8008d34:	231d      	moveq	r3, #29
 8008d36:	68e2      	ldr	r2, [r4, #12]
 8008d38:	2a00      	cmp	r2, #0
 8008d3a:	dc0f      	bgt.n	8008d5c <validate_structure+0xfc>
 8008d3c:	4f33      	ldr	r7, [pc, #204]	; (8008e0c <validate_structure+0x1ac>)
 8008d3e:	260b      	movs	r6, #11
 8008d40:	2064      	movs	r0, #100	; 0x64
 8008d42:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008d46:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008d4a:	f1bc 0f00 	cmp.w	ip, #0
 8008d4e:	dd31      	ble.n	8008db4 <validate_structure+0x154>
 8008d50:	b003      	add	sp, #12
 8008d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d54:	231c      	movs	r3, #28
 8008d56:	e7ee      	b.n	8008d36 <validate_structure+0xd6>
 8008d58:	231d      	movs	r3, #29
 8008d5a:	e7ec      	b.n	8008d36 <validate_structure+0xd6>
 8008d5c:	4e2b      	ldr	r6, [pc, #172]	; (8008e0c <validate_structure+0x1ac>)
 8008d5e:	2700      	movs	r7, #0
 8008d60:	2064      	movs	r0, #100	; 0x64
 8008d62:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8008d66:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8008d6a:	2a01      	cmp	r2, #1
 8008d6c:	bf14      	ite	ne
 8008d6e:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8008d72:	469c      	moveq	ip, r3
 8008d74:	4561      	cmp	r1, ip
 8008d76:	ddeb      	ble.n	8008d50 <validate_structure+0xf0>
 8008d78:	3201      	adds	r2, #1
 8008d7a:	eba1 010c 	sub.w	r1, r1, ip
 8008d7e:	2a0c      	cmp	r2, #12
 8008d80:	60e1      	str	r1, [r4, #12]
 8008d82:	6122      	str	r2, [r4, #16]
 8008d84:	d1ef      	bne.n	8008d66 <validate_structure+0x106>
 8008d86:	6963      	ldr	r3, [r4, #20]
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	0791      	lsls	r1, r2, #30
 8008d8c:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8008d90:	d137      	bne.n	8008e02 <validate_structure+0x1a2>
 8008d92:	fb92 f1f0 	sdiv	r1, r2, r0
 8008d96:	fb00 2211 	mls	r2, r0, r1, r2
 8008d9a:	2a00      	cmp	r2, #0
 8008d9c:	d133      	bne.n	8008e06 <validate_structure+0x1a6>
 8008d9e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8008da2:	fb93 f2f5 	sdiv	r2, r3, r5
 8008da6:	fb05 3312 	mls	r3, r5, r2, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	bf14      	ite	ne
 8008dae:	231c      	movne	r3, #28
 8008db0:	231d      	moveq	r3, #29
 8008db2:	e7d8      	b.n	8008d66 <validate_structure+0x106>
 8008db4:	6921      	ldr	r1, [r4, #16]
 8008db6:	3901      	subs	r1, #1
 8008db8:	6121      	str	r1, [r4, #16]
 8008dba:	3101      	adds	r1, #1
 8008dbc:	d114      	bne.n	8008de8 <validate_structure+0x188>
 8008dbe:	6963      	ldr	r3, [r4, #20]
 8008dc0:	1e5a      	subs	r2, r3, #1
 8008dc2:	0791      	lsls	r1, r2, #30
 8008dc4:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8008dc8:	d117      	bne.n	8008dfa <validate_structure+0x19a>
 8008dca:	fb92 f1f0 	sdiv	r1, r2, r0
 8008dce:	fb00 2211 	mls	r2, r0, r1, r2
 8008dd2:	b9a2      	cbnz	r2, 8008dfe <validate_structure+0x19e>
 8008dd4:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8008dd8:	fb93 f2f5 	sdiv	r2, r3, r5
 8008ddc:	fb05 3312 	mls	r3, r5, r2, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	bf14      	ite	ne
 8008de4:	231c      	movne	r3, #28
 8008de6:	231d      	moveq	r3, #29
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	2a01      	cmp	r2, #1
 8008dec:	bf14      	ite	ne
 8008dee:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8008df2:	461a      	moveq	r2, r3
 8008df4:	4462      	add	r2, ip
 8008df6:	60e2      	str	r2, [r4, #12]
 8008df8:	e7a5      	b.n	8008d46 <validate_structure+0xe6>
 8008dfa:	231c      	movs	r3, #28
 8008dfc:	e7f4      	b.n	8008de8 <validate_structure+0x188>
 8008dfe:	231d      	movs	r3, #29
 8008e00:	e7f2      	b.n	8008de8 <validate_structure+0x188>
 8008e02:	231c      	movs	r3, #28
 8008e04:	e7af      	b.n	8008d66 <validate_structure+0x106>
 8008e06:	231d      	movs	r3, #29
 8008e08:	e7ad      	b.n	8008d66 <validate_structure+0x106>
 8008e0a:	bf00      	nop
 8008e0c:	0800fc50 	.word	0x0800fc50

08008e10 <mktime>:
 8008e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e14:	b085      	sub	sp, #20
 8008e16:	4607      	mov	r7, r0
 8008e18:	f004 fb62 	bl	800d4e0 <__gettzinfo>
 8008e1c:	4681      	mov	r9, r0
 8008e1e:	4638      	mov	r0, r7
 8008e20:	f7ff ff1e 	bl	8008c60 <validate_structure>
 8008e24:	e9d7 4000 	ldrd	r4, r0, [r7]
 8008e28:	233c      	movs	r3, #60	; 0x3c
 8008e2a:	fb03 4400 	mla	r4, r3, r0, r4
 8008e2e:	68b8      	ldr	r0, [r7, #8]
 8008e30:	4abc      	ldr	r2, [pc, #752]	; (8009124 <mktime+0x314>)
 8008e32:	697e      	ldr	r6, [r7, #20]
 8008e34:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008e38:	fb03 4400 	mla	r4, r3, r0, r4
 8008e3c:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8008e40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e44:	3d01      	subs	r5, #1
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	4415      	add	r5, r2
 8008e4a:	dd11      	ble.n	8008e70 <mktime+0x60>
 8008e4c:	07b1      	lsls	r1, r6, #30
 8008e4e:	d10f      	bne.n	8008e70 <mktime+0x60>
 8008e50:	2264      	movs	r2, #100	; 0x64
 8008e52:	fb96 f3f2 	sdiv	r3, r6, r2
 8008e56:	fb02 6313 	mls	r3, r2, r3, r6
 8008e5a:	b943      	cbnz	r3, 8008e6e <mktime+0x5e>
 8008e5c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8008e60:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008e64:	fb93 f1f2 	sdiv	r1, r3, r2
 8008e68:	fb02 3311 	mls	r3, r2, r1, r3
 8008e6c:	b903      	cbnz	r3, 8008e70 <mktime+0x60>
 8008e6e:	3501      	adds	r5, #1
 8008e70:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8008e74:	3310      	adds	r3, #16
 8008e76:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	61fd      	str	r5, [r7, #28]
 8008e7e:	f200 815d 	bhi.w	800913c <mktime+0x32c>
 8008e82:	2e46      	cmp	r6, #70	; 0x46
 8008e84:	dd71      	ble.n	8008f6a <mktime+0x15a>
 8008e86:	2346      	movs	r3, #70	; 0x46
 8008e88:	f240 1c6d 	movw	ip, #365	; 0x16d
 8008e8c:	2164      	movs	r1, #100	; 0x64
 8008e8e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008e92:	079a      	lsls	r2, r3, #30
 8008e94:	d163      	bne.n	8008f5e <mktime+0x14e>
 8008e96:	fb93 f2f1 	sdiv	r2, r3, r1
 8008e9a:	fb01 3212 	mls	r2, r1, r2, r3
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	d160      	bne.n	8008f64 <mktime+0x154>
 8008ea2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8008ea6:	fb92 fef0 	sdiv	lr, r2, r0
 8008eaa:	fb00 221e 	mls	r2, r0, lr, r2
 8008eae:	2a00      	cmp	r2, #0
 8008eb0:	bf14      	ite	ne
 8008eb2:	4662      	movne	r2, ip
 8008eb4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008eb8:	3301      	adds	r3, #1
 8008eba:	429e      	cmp	r6, r3
 8008ebc:	4415      	add	r5, r2
 8008ebe:	d1e8      	bne.n	8008e92 <mktime+0x82>
 8008ec0:	4b99      	ldr	r3, [pc, #612]	; (8009128 <mktime+0x318>)
 8008ec2:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8008ec6:	fbc5 4803 	smlal	r4, r8, r5, r3
 8008eca:	f002 fedf 	bl	800bc8c <__tz_lock>
 8008ece:	f002 fee9 	bl	800bca4 <_tzset_unlocked>
 8008ed2:	4b96      	ldr	r3, [pc, #600]	; (800912c <mktime+0x31c>)
 8008ed4:	f8d3 b000 	ldr.w	fp, [r3]
 8008ed8:	f1bb 0f00 	cmp.w	fp, #0
 8008edc:	d039      	beq.n	8008f52 <mktime+0x142>
 8008ede:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8008ee2:	6978      	ldr	r0, [r7, #20]
 8008ee4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008ee8:	f1bb 0f01 	cmp.w	fp, #1
 8008eec:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008ef0:	46da      	mov	sl, fp
 8008ef2:	bfa8      	it	ge
 8008ef4:	f04f 0a01 	movge.w	sl, #1
 8008ef8:	4283      	cmp	r3, r0
 8008efa:	d178      	bne.n	8008fee <mktime+0x1de>
 8008efc:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8008f00:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8008f04:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8008f08:	1a5b      	subs	r3, r3, r1
 8008f0a:	9302      	str	r3, [sp, #8]
 8008f0c:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8008f10:	9303      	str	r3, [sp, #12]
 8008f12:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8008f16:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	ebb3 0c02 	subs.w	ip, r3, r2
 8008f20:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8008f24:	4564      	cmp	r4, ip
 8008f26:	eb78 0300 	sbcs.w	r3, r8, r0
 8008f2a:	da66      	bge.n	8008ffa <mktime+0x1ea>
 8008f2c:	f8d9 3000 	ldr.w	r3, [r9]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d06f      	beq.n	8009014 <mktime+0x204>
 8008f34:	9b02      	ldr	r3, [sp, #8]
 8008f36:	429c      	cmp	r4, r3
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	eb78 0303 	sbcs.w	r3, r8, r3
 8008f3e:	db03      	blt.n	8008f48 <mktime+0x138>
 8008f40:	4564      	cmp	r4, ip
 8008f42:	eb78 0300 	sbcs.w	r3, r8, r0
 8008f46:	db6b      	blt.n	8009020 <mktime+0x210>
 8008f48:	f1bb 0f00 	cmp.w	fp, #0
 8008f4c:	f04f 0b00 	mov.w	fp, #0
 8008f50:	da6b      	bge.n	800902a <mktime+0x21a>
 8008f52:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8008f56:	190c      	adds	r4, r1, r4
 8008f58:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8008f5c:	e0a9      	b.n	80090b2 <mktime+0x2a2>
 8008f5e:	f240 126d 	movw	r2, #365	; 0x16d
 8008f62:	e7a9      	b.n	8008eb8 <mktime+0xa8>
 8008f64:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008f68:	e7a6      	b.n	8008eb8 <mktime+0xa8>
 8008f6a:	d0a9      	beq.n	8008ec0 <mktime+0xb0>
 8008f6c:	2345      	movs	r3, #69	; 0x45
 8008f6e:	f240 1c6d 	movw	ip, #365	; 0x16d
 8008f72:	2164      	movs	r1, #100	; 0x64
 8008f74:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008f78:	e012      	b.n	8008fa0 <mktime+0x190>
 8008f7a:	bb62      	cbnz	r2, 8008fd6 <mktime+0x1c6>
 8008f7c:	fb93 f2f1 	sdiv	r2, r3, r1
 8008f80:	fb01 3212 	mls	r2, r1, r2, r3
 8008f84:	bb52      	cbnz	r2, 8008fdc <mktime+0x1cc>
 8008f86:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8008f8a:	fb92 fef0 	sdiv	lr, r2, r0
 8008f8e:	fb00 221e 	mls	r2, r0, lr, r2
 8008f92:	2a00      	cmp	r2, #0
 8008f94:	bf14      	ite	ne
 8008f96:	4662      	movne	r2, ip
 8008f98:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008f9c:	1aad      	subs	r5, r5, r2
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	429e      	cmp	r6, r3
 8008fa2:	f003 0203 	and.w	r2, r3, #3
 8008fa6:	dbe8      	blt.n	8008f7a <mktime+0x16a>
 8008fa8:	b9da      	cbnz	r2, 8008fe2 <mktime+0x1d2>
 8008faa:	2264      	movs	r2, #100	; 0x64
 8008fac:	fb96 f3f2 	sdiv	r3, r6, r2
 8008fb0:	fb02 6313 	mls	r3, r2, r3, r6
 8008fb4:	b9c3      	cbnz	r3, 8008fe8 <mktime+0x1d8>
 8008fb6:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8008fba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008fbe:	fb93 f1f2 	sdiv	r1, r3, r2
 8008fc2:	fb02 3311 	mls	r3, r2, r1, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f240 136d 	movw	r3, #365	; 0x16d
 8008fcc:	bf08      	it	eq
 8008fce:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8008fd2:	1aed      	subs	r5, r5, r3
 8008fd4:	e774      	b.n	8008ec0 <mktime+0xb0>
 8008fd6:	f240 126d 	movw	r2, #365	; 0x16d
 8008fda:	e7df      	b.n	8008f9c <mktime+0x18c>
 8008fdc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008fe0:	e7dc      	b.n	8008f9c <mktime+0x18c>
 8008fe2:	f240 136d 	movw	r3, #365	; 0x16d
 8008fe6:	e7f4      	b.n	8008fd2 <mktime+0x1c2>
 8008fe8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8008fec:	e7f1      	b.n	8008fd2 <mktime+0x1c2>
 8008fee:	f002 fda3 	bl	800bb38 <__tzcalc_limits>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d182      	bne.n	8008efc <mktime+0xec>
 8008ff6:	46d3      	mov	fp, sl
 8008ff8:	e050      	b.n	800909c <mktime+0x28c>
 8008ffa:	9b01      	ldr	r3, [sp, #4]
 8008ffc:	1a5b      	subs	r3, r3, r1
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8009004:	eb6e 0e03 	sbc.w	lr, lr, r3
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	429c      	cmp	r4, r3
 800900c:	eb78 030e 	sbcs.w	r3, r8, lr
 8009010:	dbf1      	blt.n	8008ff6 <mktime+0x1e6>
 8009012:	e78b      	b.n	8008f2c <mktime+0x11c>
 8009014:	9b02      	ldr	r3, [sp, #8]
 8009016:	429c      	cmp	r4, r3
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	eb78 0303 	sbcs.w	r3, r8, r3
 800901e:	db8f      	blt.n	8008f40 <mktime+0x130>
 8009020:	f1bb 0f00 	cmp.w	fp, #0
 8009024:	db3e      	blt.n	80090a4 <mktime+0x294>
 8009026:	f04f 0b01 	mov.w	fp, #1
 800902a:	ea8a 0a0b 	eor.w	sl, sl, fp
 800902e:	f1ba 0f01 	cmp.w	sl, #1
 8009032:	d133      	bne.n	800909c <mktime+0x28c>
 8009034:	f1bb 0f00 	cmp.w	fp, #0
 8009038:	d04e      	beq.n	80090d8 <mktime+0x2c8>
 800903a:	1a52      	subs	r2, r2, r1
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8009042:	4413      	add	r3, r2
 8009044:	1914      	adds	r4, r2, r4
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	4638      	mov	r0, r7
 800904a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800904e:	f7ff fe07 	bl	8008c60 <validate_structure>
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	ebb2 020a 	subs.w	r2, r2, sl
 8009058:	d020      	beq.n	800909c <mktime+0x28c>
 800905a:	2a01      	cmp	r2, #1
 800905c:	dc3e      	bgt.n	80090dc <mktime+0x2cc>
 800905e:	1c90      	adds	r0, r2, #2
 8009060:	bfd8      	it	le
 8009062:	2201      	movle	r2, #1
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	18d3      	adds	r3, r2, r3
 8009068:	4415      	add	r5, r2
 800906a:	d540      	bpl.n	80090ee <mktime+0x2de>
 800906c:	1e73      	subs	r3, r6, #1
 800906e:	0799      	lsls	r1, r3, #30
 8009070:	d137      	bne.n	80090e2 <mktime+0x2d2>
 8009072:	2264      	movs	r2, #100	; 0x64
 8009074:	fb93 f1f2 	sdiv	r1, r3, r2
 8009078:	fb02 3311 	mls	r3, r2, r1, r3
 800907c:	bba3      	cbnz	r3, 80090e8 <mktime+0x2d8>
 800907e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009082:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8009086:	fb96 f2f3 	sdiv	r2, r6, r3
 800908a:	fb03 6612 	mls	r6, r3, r2, r6
 800908e:	2e00      	cmp	r6, #0
 8009090:	f240 136d 	movw	r3, #365	; 0x16d
 8009094:	bf18      	it	ne
 8009096:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800909a:	61fb      	str	r3, [r7, #28]
 800909c:	f1bb 0f01 	cmp.w	fp, #1
 80090a0:	f47f af57 	bne.w	8008f52 <mktime+0x142>
 80090a4:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80090a8:	190c      	adds	r4, r1, r4
 80090aa:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80090ae:	f04f 0b01 	mov.w	fp, #1
 80090b2:	f002 fdf1 	bl	800bc98 <__tz_unlock>
 80090b6:	3504      	adds	r5, #4
 80090b8:	2307      	movs	r3, #7
 80090ba:	fb95 f3f3 	sdiv	r3, r5, r3
 80090be:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80090c2:	1aed      	subs	r5, r5, r3
 80090c4:	bf48      	it	mi
 80090c6:	3507      	addmi	r5, #7
 80090c8:	f8c7 b020 	str.w	fp, [r7, #32]
 80090cc:	61bd      	str	r5, [r7, #24]
 80090ce:	4620      	mov	r0, r4
 80090d0:	4641      	mov	r1, r8
 80090d2:	b005      	add	sp, #20
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	1a8a      	subs	r2, r1, r2
 80090da:	e7af      	b.n	800903c <mktime+0x22c>
 80090dc:	f04f 32ff 	mov.w	r2, #4294967295
 80090e0:	e7c0      	b.n	8009064 <mktime+0x254>
 80090e2:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80090e6:	e7d8      	b.n	800909a <mktime+0x28a>
 80090e8:	f240 136d 	movw	r3, #365	; 0x16d
 80090ec:	e7d5      	b.n	800909a <mktime+0x28a>
 80090ee:	07b2      	lsls	r2, r6, #30
 80090f0:	d11e      	bne.n	8009130 <mktime+0x320>
 80090f2:	2164      	movs	r1, #100	; 0x64
 80090f4:	fb96 f2f1 	sdiv	r2, r6, r1
 80090f8:	fb01 6212 	mls	r2, r1, r2, r6
 80090fc:	b9da      	cbnz	r2, 8009136 <mktime+0x326>
 80090fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009102:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8009106:	fb96 f1f2 	sdiv	r1, r6, r2
 800910a:	fb02 6611 	mls	r6, r2, r1, r6
 800910e:	2e00      	cmp	r6, #0
 8009110:	f240 126d 	movw	r2, #365	; 0x16d
 8009114:	bf08      	it	eq
 8009116:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800911a:	4293      	cmp	r3, r2
 800911c:	bfa8      	it	ge
 800911e:	1a9b      	subge	r3, r3, r2
 8009120:	e7bb      	b.n	800909a <mktime+0x28a>
 8009122:	bf00      	nop
 8009124:	0800fc80 	.word	0x0800fc80
 8009128:	00015180 	.word	0x00015180
 800912c:	20000350 	.word	0x20000350
 8009130:	f240 126d 	movw	r2, #365	; 0x16d
 8009134:	e7f1      	b.n	800911a <mktime+0x30a>
 8009136:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800913a:	e7ee      	b.n	800911a <mktime+0x30a>
 800913c:	f04f 34ff 	mov.w	r4, #4294967295
 8009140:	46a0      	mov	r8, r4
 8009142:	e7c4      	b.n	80090ce <mktime+0x2be>

08009144 <_free_r>:
 8009144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009146:	2900      	cmp	r1, #0
 8009148:	d044      	beq.n	80091d4 <_free_r+0x90>
 800914a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800914e:	9001      	str	r0, [sp, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	f1a1 0404 	sub.w	r4, r1, #4
 8009156:	bfb8      	it	lt
 8009158:	18e4      	addlt	r4, r4, r3
 800915a:	f004 faa3 	bl	800d6a4 <__malloc_lock>
 800915e:	4a1e      	ldr	r2, [pc, #120]	; (80091d8 <_free_r+0x94>)
 8009160:	9801      	ldr	r0, [sp, #4]
 8009162:	6813      	ldr	r3, [r2, #0]
 8009164:	b933      	cbnz	r3, 8009174 <_free_r+0x30>
 8009166:	6063      	str	r3, [r4, #4]
 8009168:	6014      	str	r4, [r2, #0]
 800916a:	b003      	add	sp, #12
 800916c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009170:	f004 ba9e 	b.w	800d6b0 <__malloc_unlock>
 8009174:	42a3      	cmp	r3, r4
 8009176:	d908      	bls.n	800918a <_free_r+0x46>
 8009178:	6825      	ldr	r5, [r4, #0]
 800917a:	1961      	adds	r1, r4, r5
 800917c:	428b      	cmp	r3, r1
 800917e:	bf01      	itttt	eq
 8009180:	6819      	ldreq	r1, [r3, #0]
 8009182:	685b      	ldreq	r3, [r3, #4]
 8009184:	1949      	addeq	r1, r1, r5
 8009186:	6021      	streq	r1, [r4, #0]
 8009188:	e7ed      	b.n	8009166 <_free_r+0x22>
 800918a:	461a      	mov	r2, r3
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	b10b      	cbz	r3, 8009194 <_free_r+0x50>
 8009190:	42a3      	cmp	r3, r4
 8009192:	d9fa      	bls.n	800918a <_free_r+0x46>
 8009194:	6811      	ldr	r1, [r2, #0]
 8009196:	1855      	adds	r5, r2, r1
 8009198:	42a5      	cmp	r5, r4
 800919a:	d10b      	bne.n	80091b4 <_free_r+0x70>
 800919c:	6824      	ldr	r4, [r4, #0]
 800919e:	4421      	add	r1, r4
 80091a0:	1854      	adds	r4, r2, r1
 80091a2:	42a3      	cmp	r3, r4
 80091a4:	6011      	str	r1, [r2, #0]
 80091a6:	d1e0      	bne.n	800916a <_free_r+0x26>
 80091a8:	681c      	ldr	r4, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	6053      	str	r3, [r2, #4]
 80091ae:	4421      	add	r1, r4
 80091b0:	6011      	str	r1, [r2, #0]
 80091b2:	e7da      	b.n	800916a <_free_r+0x26>
 80091b4:	d902      	bls.n	80091bc <_free_r+0x78>
 80091b6:	230c      	movs	r3, #12
 80091b8:	6003      	str	r3, [r0, #0]
 80091ba:	e7d6      	b.n	800916a <_free_r+0x26>
 80091bc:	6825      	ldr	r5, [r4, #0]
 80091be:	1961      	adds	r1, r4, r5
 80091c0:	428b      	cmp	r3, r1
 80091c2:	bf04      	itt	eq
 80091c4:	6819      	ldreq	r1, [r3, #0]
 80091c6:	685b      	ldreq	r3, [r3, #4]
 80091c8:	6063      	str	r3, [r4, #4]
 80091ca:	bf04      	itt	eq
 80091cc:	1949      	addeq	r1, r1, r5
 80091ce:	6021      	streq	r1, [r4, #0]
 80091d0:	6054      	str	r4, [r2, #4]
 80091d2:	e7ca      	b.n	800916a <_free_r+0x26>
 80091d4:	b003      	add	sp, #12
 80091d6:	bd30      	pop	{r4, r5, pc}
 80091d8:	2000032c 	.word	0x2000032c

080091dc <sbrk_aligned>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	4e0e      	ldr	r6, [pc, #56]	; (8009218 <sbrk_aligned+0x3c>)
 80091e0:	460c      	mov	r4, r1
 80091e2:	6831      	ldr	r1, [r6, #0]
 80091e4:	4605      	mov	r5, r0
 80091e6:	b911      	cbnz	r1, 80091ee <sbrk_aligned+0x12>
 80091e8:	f000 ff06 	bl	8009ff8 <_sbrk_r>
 80091ec:	6030      	str	r0, [r6, #0]
 80091ee:	4621      	mov	r1, r4
 80091f0:	4628      	mov	r0, r5
 80091f2:	f000 ff01 	bl	8009ff8 <_sbrk_r>
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	d00a      	beq.n	8009210 <sbrk_aligned+0x34>
 80091fa:	1cc4      	adds	r4, r0, #3
 80091fc:	f024 0403 	bic.w	r4, r4, #3
 8009200:	42a0      	cmp	r0, r4
 8009202:	d007      	beq.n	8009214 <sbrk_aligned+0x38>
 8009204:	1a21      	subs	r1, r4, r0
 8009206:	4628      	mov	r0, r5
 8009208:	f000 fef6 	bl	8009ff8 <_sbrk_r>
 800920c:	3001      	adds	r0, #1
 800920e:	d101      	bne.n	8009214 <sbrk_aligned+0x38>
 8009210:	f04f 34ff 	mov.w	r4, #4294967295
 8009214:	4620      	mov	r0, r4
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	20000330 	.word	0x20000330

0800921c <_malloc_r>:
 800921c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009220:	1ccd      	adds	r5, r1, #3
 8009222:	f025 0503 	bic.w	r5, r5, #3
 8009226:	3508      	adds	r5, #8
 8009228:	2d0c      	cmp	r5, #12
 800922a:	bf38      	it	cc
 800922c:	250c      	movcc	r5, #12
 800922e:	2d00      	cmp	r5, #0
 8009230:	4607      	mov	r7, r0
 8009232:	db01      	blt.n	8009238 <_malloc_r+0x1c>
 8009234:	42a9      	cmp	r1, r5
 8009236:	d905      	bls.n	8009244 <_malloc_r+0x28>
 8009238:	230c      	movs	r3, #12
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	2600      	movs	r6, #0
 800923e:	4630      	mov	r0, r6
 8009240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009244:	4e2e      	ldr	r6, [pc, #184]	; (8009300 <_malloc_r+0xe4>)
 8009246:	f004 fa2d 	bl	800d6a4 <__malloc_lock>
 800924a:	6833      	ldr	r3, [r6, #0]
 800924c:	461c      	mov	r4, r3
 800924e:	bb34      	cbnz	r4, 800929e <_malloc_r+0x82>
 8009250:	4629      	mov	r1, r5
 8009252:	4638      	mov	r0, r7
 8009254:	f7ff ffc2 	bl	80091dc <sbrk_aligned>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	4604      	mov	r4, r0
 800925c:	d14d      	bne.n	80092fa <_malloc_r+0xde>
 800925e:	6834      	ldr	r4, [r6, #0]
 8009260:	4626      	mov	r6, r4
 8009262:	2e00      	cmp	r6, #0
 8009264:	d140      	bne.n	80092e8 <_malloc_r+0xcc>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	4631      	mov	r1, r6
 800926a:	4638      	mov	r0, r7
 800926c:	eb04 0803 	add.w	r8, r4, r3
 8009270:	f000 fec2 	bl	8009ff8 <_sbrk_r>
 8009274:	4580      	cmp	r8, r0
 8009276:	d13a      	bne.n	80092ee <_malloc_r+0xd2>
 8009278:	6821      	ldr	r1, [r4, #0]
 800927a:	3503      	adds	r5, #3
 800927c:	1a6d      	subs	r5, r5, r1
 800927e:	f025 0503 	bic.w	r5, r5, #3
 8009282:	3508      	adds	r5, #8
 8009284:	2d0c      	cmp	r5, #12
 8009286:	bf38      	it	cc
 8009288:	250c      	movcc	r5, #12
 800928a:	4629      	mov	r1, r5
 800928c:	4638      	mov	r0, r7
 800928e:	f7ff ffa5 	bl	80091dc <sbrk_aligned>
 8009292:	3001      	adds	r0, #1
 8009294:	d02b      	beq.n	80092ee <_malloc_r+0xd2>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	442b      	add	r3, r5
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	e00e      	b.n	80092bc <_malloc_r+0xa0>
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	1b52      	subs	r2, r2, r5
 80092a2:	d41e      	bmi.n	80092e2 <_malloc_r+0xc6>
 80092a4:	2a0b      	cmp	r2, #11
 80092a6:	d916      	bls.n	80092d6 <_malloc_r+0xba>
 80092a8:	1961      	adds	r1, r4, r5
 80092aa:	42a3      	cmp	r3, r4
 80092ac:	6025      	str	r5, [r4, #0]
 80092ae:	bf18      	it	ne
 80092b0:	6059      	strne	r1, [r3, #4]
 80092b2:	6863      	ldr	r3, [r4, #4]
 80092b4:	bf08      	it	eq
 80092b6:	6031      	streq	r1, [r6, #0]
 80092b8:	5162      	str	r2, [r4, r5]
 80092ba:	604b      	str	r3, [r1, #4]
 80092bc:	4638      	mov	r0, r7
 80092be:	f104 060b 	add.w	r6, r4, #11
 80092c2:	f004 f9f5 	bl	800d6b0 <__malloc_unlock>
 80092c6:	f026 0607 	bic.w	r6, r6, #7
 80092ca:	1d23      	adds	r3, r4, #4
 80092cc:	1af2      	subs	r2, r6, r3
 80092ce:	d0b6      	beq.n	800923e <_malloc_r+0x22>
 80092d0:	1b9b      	subs	r3, r3, r6
 80092d2:	50a3      	str	r3, [r4, r2]
 80092d4:	e7b3      	b.n	800923e <_malloc_r+0x22>
 80092d6:	6862      	ldr	r2, [r4, #4]
 80092d8:	42a3      	cmp	r3, r4
 80092da:	bf0c      	ite	eq
 80092dc:	6032      	streq	r2, [r6, #0]
 80092de:	605a      	strne	r2, [r3, #4]
 80092e0:	e7ec      	b.n	80092bc <_malloc_r+0xa0>
 80092e2:	4623      	mov	r3, r4
 80092e4:	6864      	ldr	r4, [r4, #4]
 80092e6:	e7b2      	b.n	800924e <_malloc_r+0x32>
 80092e8:	4634      	mov	r4, r6
 80092ea:	6876      	ldr	r6, [r6, #4]
 80092ec:	e7b9      	b.n	8009262 <_malloc_r+0x46>
 80092ee:	230c      	movs	r3, #12
 80092f0:	603b      	str	r3, [r7, #0]
 80092f2:	4638      	mov	r0, r7
 80092f4:	f004 f9dc 	bl	800d6b0 <__malloc_unlock>
 80092f8:	e7a1      	b.n	800923e <_malloc_r+0x22>
 80092fa:	6025      	str	r5, [r4, #0]
 80092fc:	e7de      	b.n	80092bc <_malloc_r+0xa0>
 80092fe:	bf00      	nop
 8009300:	2000032c 	.word	0x2000032c

08009304 <__cvt>:
 8009304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009308:	ec55 4b10 	vmov	r4, r5, d0
 800930c:	2d00      	cmp	r5, #0
 800930e:	460e      	mov	r6, r1
 8009310:	4619      	mov	r1, r3
 8009312:	462b      	mov	r3, r5
 8009314:	bfbb      	ittet	lt
 8009316:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800931a:	461d      	movlt	r5, r3
 800931c:	2300      	movge	r3, #0
 800931e:	232d      	movlt	r3, #45	; 0x2d
 8009320:	700b      	strb	r3, [r1, #0]
 8009322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009324:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009328:	4691      	mov	r9, r2
 800932a:	f023 0820 	bic.w	r8, r3, #32
 800932e:	bfbc      	itt	lt
 8009330:	4622      	movlt	r2, r4
 8009332:	4614      	movlt	r4, r2
 8009334:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009338:	d005      	beq.n	8009346 <__cvt+0x42>
 800933a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800933e:	d100      	bne.n	8009342 <__cvt+0x3e>
 8009340:	3601      	adds	r6, #1
 8009342:	2102      	movs	r1, #2
 8009344:	e000      	b.n	8009348 <__cvt+0x44>
 8009346:	2103      	movs	r1, #3
 8009348:	ab03      	add	r3, sp, #12
 800934a:	9301      	str	r3, [sp, #4]
 800934c:	ab02      	add	r3, sp, #8
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	ec45 4b10 	vmov	d0, r4, r5
 8009354:	4653      	mov	r3, sl
 8009356:	4632      	mov	r2, r6
 8009358:	f002 ff0e 	bl	800c178 <_dtoa_r>
 800935c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009360:	4607      	mov	r7, r0
 8009362:	d102      	bne.n	800936a <__cvt+0x66>
 8009364:	f019 0f01 	tst.w	r9, #1
 8009368:	d022      	beq.n	80093b0 <__cvt+0xac>
 800936a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800936e:	eb07 0906 	add.w	r9, r7, r6
 8009372:	d110      	bne.n	8009396 <__cvt+0x92>
 8009374:	783b      	ldrb	r3, [r7, #0]
 8009376:	2b30      	cmp	r3, #48	; 0x30
 8009378:	d10a      	bne.n	8009390 <__cvt+0x8c>
 800937a:	2200      	movs	r2, #0
 800937c:	2300      	movs	r3, #0
 800937e:	4620      	mov	r0, r4
 8009380:	4629      	mov	r1, r5
 8009382:	f7f7 fbb9 	bl	8000af8 <__aeabi_dcmpeq>
 8009386:	b918      	cbnz	r0, 8009390 <__cvt+0x8c>
 8009388:	f1c6 0601 	rsb	r6, r6, #1
 800938c:	f8ca 6000 	str.w	r6, [sl]
 8009390:	f8da 3000 	ldr.w	r3, [sl]
 8009394:	4499      	add	r9, r3
 8009396:	2200      	movs	r2, #0
 8009398:	2300      	movs	r3, #0
 800939a:	4620      	mov	r0, r4
 800939c:	4629      	mov	r1, r5
 800939e:	f7f7 fbab 	bl	8000af8 <__aeabi_dcmpeq>
 80093a2:	b108      	cbz	r0, 80093a8 <__cvt+0xa4>
 80093a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80093a8:	2230      	movs	r2, #48	; 0x30
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	454b      	cmp	r3, r9
 80093ae:	d307      	bcc.n	80093c0 <__cvt+0xbc>
 80093b0:	9b03      	ldr	r3, [sp, #12]
 80093b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093b4:	1bdb      	subs	r3, r3, r7
 80093b6:	4638      	mov	r0, r7
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	b004      	add	sp, #16
 80093bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c0:	1c59      	adds	r1, r3, #1
 80093c2:	9103      	str	r1, [sp, #12]
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	e7f0      	b.n	80093aa <__cvt+0xa6>

080093c8 <__exponent>:
 80093c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ca:	4603      	mov	r3, r0
 80093cc:	2900      	cmp	r1, #0
 80093ce:	bfb8      	it	lt
 80093d0:	4249      	neglt	r1, r1
 80093d2:	f803 2b02 	strb.w	r2, [r3], #2
 80093d6:	bfb4      	ite	lt
 80093d8:	222d      	movlt	r2, #45	; 0x2d
 80093da:	222b      	movge	r2, #43	; 0x2b
 80093dc:	2909      	cmp	r1, #9
 80093de:	7042      	strb	r2, [r0, #1]
 80093e0:	dd2a      	ble.n	8009438 <__exponent+0x70>
 80093e2:	f10d 0407 	add.w	r4, sp, #7
 80093e6:	46a4      	mov	ip, r4
 80093e8:	270a      	movs	r7, #10
 80093ea:	46a6      	mov	lr, r4
 80093ec:	460a      	mov	r2, r1
 80093ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80093f2:	fb07 1516 	mls	r5, r7, r6, r1
 80093f6:	3530      	adds	r5, #48	; 0x30
 80093f8:	2a63      	cmp	r2, #99	; 0x63
 80093fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80093fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009402:	4631      	mov	r1, r6
 8009404:	dcf1      	bgt.n	80093ea <__exponent+0x22>
 8009406:	3130      	adds	r1, #48	; 0x30
 8009408:	f1ae 0502 	sub.w	r5, lr, #2
 800940c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009410:	1c44      	adds	r4, r0, #1
 8009412:	4629      	mov	r1, r5
 8009414:	4561      	cmp	r1, ip
 8009416:	d30a      	bcc.n	800942e <__exponent+0x66>
 8009418:	f10d 0209 	add.w	r2, sp, #9
 800941c:	eba2 020e 	sub.w	r2, r2, lr
 8009420:	4565      	cmp	r5, ip
 8009422:	bf88      	it	hi
 8009424:	2200      	movhi	r2, #0
 8009426:	4413      	add	r3, r2
 8009428:	1a18      	subs	r0, r3, r0
 800942a:	b003      	add	sp, #12
 800942c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800942e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009432:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009436:	e7ed      	b.n	8009414 <__exponent+0x4c>
 8009438:	2330      	movs	r3, #48	; 0x30
 800943a:	3130      	adds	r1, #48	; 0x30
 800943c:	7083      	strb	r3, [r0, #2]
 800943e:	70c1      	strb	r1, [r0, #3]
 8009440:	1d03      	adds	r3, r0, #4
 8009442:	e7f1      	b.n	8009428 <__exponent+0x60>

08009444 <_printf_float>:
 8009444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	ed2d 8b02 	vpush	{d8}
 800944c:	b08d      	sub	sp, #52	; 0x34
 800944e:	460c      	mov	r4, r1
 8009450:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009454:	4616      	mov	r6, r2
 8009456:	461f      	mov	r7, r3
 8009458:	4605      	mov	r5, r0
 800945a:	f004 f8f5 	bl	800d648 <_localeconv_r>
 800945e:	f8d0 a000 	ldr.w	sl, [r0]
 8009462:	4650      	mov	r0, sl
 8009464:	f7f6 fec6 	bl	80001f4 <strlen>
 8009468:	2300      	movs	r3, #0
 800946a:	930a      	str	r3, [sp, #40]	; 0x28
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	9305      	str	r3, [sp, #20]
 8009470:	f8d8 3000 	ldr.w	r3, [r8]
 8009474:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009478:	3307      	adds	r3, #7
 800947a:	f023 0307 	bic.w	r3, r3, #7
 800947e:	f103 0208 	add.w	r2, r3, #8
 8009482:	f8c8 2000 	str.w	r2, [r8]
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800948e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009492:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009496:	9307      	str	r3, [sp, #28]
 8009498:	f8cd 8018 	str.w	r8, [sp, #24]
 800949c:	ee08 0a10 	vmov	s16, r0
 80094a0:	4b9f      	ldr	r3, [pc, #636]	; (8009720 <_printf_float+0x2dc>)
 80094a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094a6:	f04f 32ff 	mov.w	r2, #4294967295
 80094aa:	f7f7 fb57 	bl	8000b5c <__aeabi_dcmpun>
 80094ae:	bb88      	cbnz	r0, 8009514 <_printf_float+0xd0>
 80094b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094b4:	4b9a      	ldr	r3, [pc, #616]	; (8009720 <_printf_float+0x2dc>)
 80094b6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ba:	f7f7 fb31 	bl	8000b20 <__aeabi_dcmple>
 80094be:	bb48      	cbnz	r0, 8009514 <_printf_float+0xd0>
 80094c0:	2200      	movs	r2, #0
 80094c2:	2300      	movs	r3, #0
 80094c4:	4640      	mov	r0, r8
 80094c6:	4649      	mov	r1, r9
 80094c8:	f7f7 fb20 	bl	8000b0c <__aeabi_dcmplt>
 80094cc:	b110      	cbz	r0, 80094d4 <_printf_float+0x90>
 80094ce:	232d      	movs	r3, #45	; 0x2d
 80094d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094d4:	4b93      	ldr	r3, [pc, #588]	; (8009724 <_printf_float+0x2e0>)
 80094d6:	4894      	ldr	r0, [pc, #592]	; (8009728 <_printf_float+0x2e4>)
 80094d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80094dc:	bf94      	ite	ls
 80094de:	4698      	movls	r8, r3
 80094e0:	4680      	movhi	r8, r0
 80094e2:	2303      	movs	r3, #3
 80094e4:	6123      	str	r3, [r4, #16]
 80094e6:	9b05      	ldr	r3, [sp, #20]
 80094e8:	f023 0204 	bic.w	r2, r3, #4
 80094ec:	6022      	str	r2, [r4, #0]
 80094ee:	f04f 0900 	mov.w	r9, #0
 80094f2:	9700      	str	r7, [sp, #0]
 80094f4:	4633      	mov	r3, r6
 80094f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80094f8:	4621      	mov	r1, r4
 80094fa:	4628      	mov	r0, r5
 80094fc:	f000 f9d8 	bl	80098b0 <_printf_common>
 8009500:	3001      	adds	r0, #1
 8009502:	f040 8090 	bne.w	8009626 <_printf_float+0x1e2>
 8009506:	f04f 30ff 	mov.w	r0, #4294967295
 800950a:	b00d      	add	sp, #52	; 0x34
 800950c:	ecbd 8b02 	vpop	{d8}
 8009510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009514:	4642      	mov	r2, r8
 8009516:	464b      	mov	r3, r9
 8009518:	4640      	mov	r0, r8
 800951a:	4649      	mov	r1, r9
 800951c:	f7f7 fb1e 	bl	8000b5c <__aeabi_dcmpun>
 8009520:	b140      	cbz	r0, 8009534 <_printf_float+0xf0>
 8009522:	464b      	mov	r3, r9
 8009524:	2b00      	cmp	r3, #0
 8009526:	bfbc      	itt	lt
 8009528:	232d      	movlt	r3, #45	; 0x2d
 800952a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800952e:	487f      	ldr	r0, [pc, #508]	; (800972c <_printf_float+0x2e8>)
 8009530:	4b7f      	ldr	r3, [pc, #508]	; (8009730 <_printf_float+0x2ec>)
 8009532:	e7d1      	b.n	80094d8 <_printf_float+0x94>
 8009534:	6863      	ldr	r3, [r4, #4]
 8009536:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800953a:	9206      	str	r2, [sp, #24]
 800953c:	1c5a      	adds	r2, r3, #1
 800953e:	d13f      	bne.n	80095c0 <_printf_float+0x17c>
 8009540:	2306      	movs	r3, #6
 8009542:	6063      	str	r3, [r4, #4]
 8009544:	9b05      	ldr	r3, [sp, #20]
 8009546:	6861      	ldr	r1, [r4, #4]
 8009548:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800954c:	2300      	movs	r3, #0
 800954e:	9303      	str	r3, [sp, #12]
 8009550:	ab0a      	add	r3, sp, #40	; 0x28
 8009552:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009556:	ab09      	add	r3, sp, #36	; 0x24
 8009558:	ec49 8b10 	vmov	d0, r8, r9
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	6022      	str	r2, [r4, #0]
 8009560:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009564:	4628      	mov	r0, r5
 8009566:	f7ff fecd 	bl	8009304 <__cvt>
 800956a:	9b06      	ldr	r3, [sp, #24]
 800956c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800956e:	2b47      	cmp	r3, #71	; 0x47
 8009570:	4680      	mov	r8, r0
 8009572:	d108      	bne.n	8009586 <_printf_float+0x142>
 8009574:	1cc8      	adds	r0, r1, #3
 8009576:	db02      	blt.n	800957e <_printf_float+0x13a>
 8009578:	6863      	ldr	r3, [r4, #4]
 800957a:	4299      	cmp	r1, r3
 800957c:	dd41      	ble.n	8009602 <_printf_float+0x1be>
 800957e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009582:	fa5f fb8b 	uxtb.w	fp, fp
 8009586:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800958a:	d820      	bhi.n	80095ce <_printf_float+0x18a>
 800958c:	3901      	subs	r1, #1
 800958e:	465a      	mov	r2, fp
 8009590:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009594:	9109      	str	r1, [sp, #36]	; 0x24
 8009596:	f7ff ff17 	bl	80093c8 <__exponent>
 800959a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800959c:	1813      	adds	r3, r2, r0
 800959e:	2a01      	cmp	r2, #1
 80095a0:	4681      	mov	r9, r0
 80095a2:	6123      	str	r3, [r4, #16]
 80095a4:	dc02      	bgt.n	80095ac <_printf_float+0x168>
 80095a6:	6822      	ldr	r2, [r4, #0]
 80095a8:	07d2      	lsls	r2, r2, #31
 80095aa:	d501      	bpl.n	80095b0 <_printf_float+0x16c>
 80095ac:	3301      	adds	r3, #1
 80095ae:	6123      	str	r3, [r4, #16]
 80095b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d09c      	beq.n	80094f2 <_printf_float+0xae>
 80095b8:	232d      	movs	r3, #45	; 0x2d
 80095ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095be:	e798      	b.n	80094f2 <_printf_float+0xae>
 80095c0:	9a06      	ldr	r2, [sp, #24]
 80095c2:	2a47      	cmp	r2, #71	; 0x47
 80095c4:	d1be      	bne.n	8009544 <_printf_float+0x100>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1bc      	bne.n	8009544 <_printf_float+0x100>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e7b9      	b.n	8009542 <_printf_float+0xfe>
 80095ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80095d2:	d118      	bne.n	8009606 <_printf_float+0x1c2>
 80095d4:	2900      	cmp	r1, #0
 80095d6:	6863      	ldr	r3, [r4, #4]
 80095d8:	dd0b      	ble.n	80095f2 <_printf_float+0x1ae>
 80095da:	6121      	str	r1, [r4, #16]
 80095dc:	b913      	cbnz	r3, 80095e4 <_printf_float+0x1a0>
 80095de:	6822      	ldr	r2, [r4, #0]
 80095e0:	07d0      	lsls	r0, r2, #31
 80095e2:	d502      	bpl.n	80095ea <_printf_float+0x1a6>
 80095e4:	3301      	adds	r3, #1
 80095e6:	440b      	add	r3, r1
 80095e8:	6123      	str	r3, [r4, #16]
 80095ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80095ec:	f04f 0900 	mov.w	r9, #0
 80095f0:	e7de      	b.n	80095b0 <_printf_float+0x16c>
 80095f2:	b913      	cbnz	r3, 80095fa <_printf_float+0x1b6>
 80095f4:	6822      	ldr	r2, [r4, #0]
 80095f6:	07d2      	lsls	r2, r2, #31
 80095f8:	d501      	bpl.n	80095fe <_printf_float+0x1ba>
 80095fa:	3302      	adds	r3, #2
 80095fc:	e7f4      	b.n	80095e8 <_printf_float+0x1a4>
 80095fe:	2301      	movs	r3, #1
 8009600:	e7f2      	b.n	80095e8 <_printf_float+0x1a4>
 8009602:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009608:	4299      	cmp	r1, r3
 800960a:	db05      	blt.n	8009618 <_printf_float+0x1d4>
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	6121      	str	r1, [r4, #16]
 8009610:	07d8      	lsls	r0, r3, #31
 8009612:	d5ea      	bpl.n	80095ea <_printf_float+0x1a6>
 8009614:	1c4b      	adds	r3, r1, #1
 8009616:	e7e7      	b.n	80095e8 <_printf_float+0x1a4>
 8009618:	2900      	cmp	r1, #0
 800961a:	bfd4      	ite	le
 800961c:	f1c1 0202 	rsble	r2, r1, #2
 8009620:	2201      	movgt	r2, #1
 8009622:	4413      	add	r3, r2
 8009624:	e7e0      	b.n	80095e8 <_printf_float+0x1a4>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	055a      	lsls	r2, r3, #21
 800962a:	d407      	bmi.n	800963c <_printf_float+0x1f8>
 800962c:	6923      	ldr	r3, [r4, #16]
 800962e:	4642      	mov	r2, r8
 8009630:	4631      	mov	r1, r6
 8009632:	4628      	mov	r0, r5
 8009634:	47b8      	blx	r7
 8009636:	3001      	adds	r0, #1
 8009638:	d12c      	bne.n	8009694 <_printf_float+0x250>
 800963a:	e764      	b.n	8009506 <_printf_float+0xc2>
 800963c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009640:	f240 80e0 	bls.w	8009804 <_printf_float+0x3c0>
 8009644:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009648:	2200      	movs	r2, #0
 800964a:	2300      	movs	r3, #0
 800964c:	f7f7 fa54 	bl	8000af8 <__aeabi_dcmpeq>
 8009650:	2800      	cmp	r0, #0
 8009652:	d034      	beq.n	80096be <_printf_float+0x27a>
 8009654:	4a37      	ldr	r2, [pc, #220]	; (8009734 <_printf_float+0x2f0>)
 8009656:	2301      	movs	r3, #1
 8009658:	4631      	mov	r1, r6
 800965a:	4628      	mov	r0, r5
 800965c:	47b8      	blx	r7
 800965e:	3001      	adds	r0, #1
 8009660:	f43f af51 	beq.w	8009506 <_printf_float+0xc2>
 8009664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009668:	429a      	cmp	r2, r3
 800966a:	db02      	blt.n	8009672 <_printf_float+0x22e>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	07d8      	lsls	r0, r3, #31
 8009670:	d510      	bpl.n	8009694 <_printf_float+0x250>
 8009672:	ee18 3a10 	vmov	r3, s16
 8009676:	4652      	mov	r2, sl
 8009678:	4631      	mov	r1, r6
 800967a:	4628      	mov	r0, r5
 800967c:	47b8      	blx	r7
 800967e:	3001      	adds	r0, #1
 8009680:	f43f af41 	beq.w	8009506 <_printf_float+0xc2>
 8009684:	f04f 0800 	mov.w	r8, #0
 8009688:	f104 091a 	add.w	r9, r4, #26
 800968c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800968e:	3b01      	subs	r3, #1
 8009690:	4543      	cmp	r3, r8
 8009692:	dc09      	bgt.n	80096a8 <_printf_float+0x264>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	079b      	lsls	r3, r3, #30
 8009698:	f100 8105 	bmi.w	80098a6 <_printf_float+0x462>
 800969c:	68e0      	ldr	r0, [r4, #12]
 800969e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a0:	4298      	cmp	r0, r3
 80096a2:	bfb8      	it	lt
 80096a4:	4618      	movlt	r0, r3
 80096a6:	e730      	b.n	800950a <_printf_float+0xc6>
 80096a8:	2301      	movs	r3, #1
 80096aa:	464a      	mov	r2, r9
 80096ac:	4631      	mov	r1, r6
 80096ae:	4628      	mov	r0, r5
 80096b0:	47b8      	blx	r7
 80096b2:	3001      	adds	r0, #1
 80096b4:	f43f af27 	beq.w	8009506 <_printf_float+0xc2>
 80096b8:	f108 0801 	add.w	r8, r8, #1
 80096bc:	e7e6      	b.n	800968c <_printf_float+0x248>
 80096be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dc39      	bgt.n	8009738 <_printf_float+0x2f4>
 80096c4:	4a1b      	ldr	r2, [pc, #108]	; (8009734 <_printf_float+0x2f0>)
 80096c6:	2301      	movs	r3, #1
 80096c8:	4631      	mov	r1, r6
 80096ca:	4628      	mov	r0, r5
 80096cc:	47b8      	blx	r7
 80096ce:	3001      	adds	r0, #1
 80096d0:	f43f af19 	beq.w	8009506 <_printf_float+0xc2>
 80096d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096d8:	4313      	orrs	r3, r2
 80096da:	d102      	bne.n	80096e2 <_printf_float+0x29e>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	07d9      	lsls	r1, r3, #31
 80096e0:	d5d8      	bpl.n	8009694 <_printf_float+0x250>
 80096e2:	ee18 3a10 	vmov	r3, s16
 80096e6:	4652      	mov	r2, sl
 80096e8:	4631      	mov	r1, r6
 80096ea:	4628      	mov	r0, r5
 80096ec:	47b8      	blx	r7
 80096ee:	3001      	adds	r0, #1
 80096f0:	f43f af09 	beq.w	8009506 <_printf_float+0xc2>
 80096f4:	f04f 0900 	mov.w	r9, #0
 80096f8:	f104 0a1a 	add.w	sl, r4, #26
 80096fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096fe:	425b      	negs	r3, r3
 8009700:	454b      	cmp	r3, r9
 8009702:	dc01      	bgt.n	8009708 <_printf_float+0x2c4>
 8009704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009706:	e792      	b.n	800962e <_printf_float+0x1ea>
 8009708:	2301      	movs	r3, #1
 800970a:	4652      	mov	r2, sl
 800970c:	4631      	mov	r1, r6
 800970e:	4628      	mov	r0, r5
 8009710:	47b8      	blx	r7
 8009712:	3001      	adds	r0, #1
 8009714:	f43f aef7 	beq.w	8009506 <_printf_float+0xc2>
 8009718:	f109 0901 	add.w	r9, r9, #1
 800971c:	e7ee      	b.n	80096fc <_printf_float+0x2b8>
 800971e:	bf00      	nop
 8009720:	7fefffff 	.word	0x7fefffff
 8009724:	0800fd10 	.word	0x0800fd10
 8009728:	0800fd14 	.word	0x0800fd14
 800972c:	0800fd1c 	.word	0x0800fd1c
 8009730:	0800fd18 	.word	0x0800fd18
 8009734:	080103f1 	.word	0x080103f1
 8009738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800973a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800973c:	429a      	cmp	r2, r3
 800973e:	bfa8      	it	ge
 8009740:	461a      	movge	r2, r3
 8009742:	2a00      	cmp	r2, #0
 8009744:	4691      	mov	r9, r2
 8009746:	dc37      	bgt.n	80097b8 <_printf_float+0x374>
 8009748:	f04f 0b00 	mov.w	fp, #0
 800974c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009750:	f104 021a 	add.w	r2, r4, #26
 8009754:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	eba3 0309 	sub.w	r3, r3, r9
 800975c:	455b      	cmp	r3, fp
 800975e:	dc33      	bgt.n	80097c8 <_printf_float+0x384>
 8009760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009764:	429a      	cmp	r2, r3
 8009766:	db3b      	blt.n	80097e0 <_printf_float+0x39c>
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	07da      	lsls	r2, r3, #31
 800976c:	d438      	bmi.n	80097e0 <_printf_float+0x39c>
 800976e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009770:	9a05      	ldr	r2, [sp, #20]
 8009772:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009774:	1a9a      	subs	r2, r3, r2
 8009776:	eba3 0901 	sub.w	r9, r3, r1
 800977a:	4591      	cmp	r9, r2
 800977c:	bfa8      	it	ge
 800977e:	4691      	movge	r9, r2
 8009780:	f1b9 0f00 	cmp.w	r9, #0
 8009784:	dc35      	bgt.n	80097f2 <_printf_float+0x3ae>
 8009786:	f04f 0800 	mov.w	r8, #0
 800978a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800978e:	f104 0a1a 	add.w	sl, r4, #26
 8009792:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009796:	1a9b      	subs	r3, r3, r2
 8009798:	eba3 0309 	sub.w	r3, r3, r9
 800979c:	4543      	cmp	r3, r8
 800979e:	f77f af79 	ble.w	8009694 <_printf_float+0x250>
 80097a2:	2301      	movs	r3, #1
 80097a4:	4652      	mov	r2, sl
 80097a6:	4631      	mov	r1, r6
 80097a8:	4628      	mov	r0, r5
 80097aa:	47b8      	blx	r7
 80097ac:	3001      	adds	r0, #1
 80097ae:	f43f aeaa 	beq.w	8009506 <_printf_float+0xc2>
 80097b2:	f108 0801 	add.w	r8, r8, #1
 80097b6:	e7ec      	b.n	8009792 <_printf_float+0x34e>
 80097b8:	4613      	mov	r3, r2
 80097ba:	4631      	mov	r1, r6
 80097bc:	4642      	mov	r2, r8
 80097be:	4628      	mov	r0, r5
 80097c0:	47b8      	blx	r7
 80097c2:	3001      	adds	r0, #1
 80097c4:	d1c0      	bne.n	8009748 <_printf_float+0x304>
 80097c6:	e69e      	b.n	8009506 <_printf_float+0xc2>
 80097c8:	2301      	movs	r3, #1
 80097ca:	4631      	mov	r1, r6
 80097cc:	4628      	mov	r0, r5
 80097ce:	9205      	str	r2, [sp, #20]
 80097d0:	47b8      	blx	r7
 80097d2:	3001      	adds	r0, #1
 80097d4:	f43f ae97 	beq.w	8009506 <_printf_float+0xc2>
 80097d8:	9a05      	ldr	r2, [sp, #20]
 80097da:	f10b 0b01 	add.w	fp, fp, #1
 80097de:	e7b9      	b.n	8009754 <_printf_float+0x310>
 80097e0:	ee18 3a10 	vmov	r3, s16
 80097e4:	4652      	mov	r2, sl
 80097e6:	4631      	mov	r1, r6
 80097e8:	4628      	mov	r0, r5
 80097ea:	47b8      	blx	r7
 80097ec:	3001      	adds	r0, #1
 80097ee:	d1be      	bne.n	800976e <_printf_float+0x32a>
 80097f0:	e689      	b.n	8009506 <_printf_float+0xc2>
 80097f2:	9a05      	ldr	r2, [sp, #20]
 80097f4:	464b      	mov	r3, r9
 80097f6:	4442      	add	r2, r8
 80097f8:	4631      	mov	r1, r6
 80097fa:	4628      	mov	r0, r5
 80097fc:	47b8      	blx	r7
 80097fe:	3001      	adds	r0, #1
 8009800:	d1c1      	bne.n	8009786 <_printf_float+0x342>
 8009802:	e680      	b.n	8009506 <_printf_float+0xc2>
 8009804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009806:	2a01      	cmp	r2, #1
 8009808:	dc01      	bgt.n	800980e <_printf_float+0x3ca>
 800980a:	07db      	lsls	r3, r3, #31
 800980c:	d538      	bpl.n	8009880 <_printf_float+0x43c>
 800980e:	2301      	movs	r3, #1
 8009810:	4642      	mov	r2, r8
 8009812:	4631      	mov	r1, r6
 8009814:	4628      	mov	r0, r5
 8009816:	47b8      	blx	r7
 8009818:	3001      	adds	r0, #1
 800981a:	f43f ae74 	beq.w	8009506 <_printf_float+0xc2>
 800981e:	ee18 3a10 	vmov	r3, s16
 8009822:	4652      	mov	r2, sl
 8009824:	4631      	mov	r1, r6
 8009826:	4628      	mov	r0, r5
 8009828:	47b8      	blx	r7
 800982a:	3001      	adds	r0, #1
 800982c:	f43f ae6b 	beq.w	8009506 <_printf_float+0xc2>
 8009830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009834:	2200      	movs	r2, #0
 8009836:	2300      	movs	r3, #0
 8009838:	f7f7 f95e 	bl	8000af8 <__aeabi_dcmpeq>
 800983c:	b9d8      	cbnz	r0, 8009876 <_printf_float+0x432>
 800983e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009840:	f108 0201 	add.w	r2, r8, #1
 8009844:	3b01      	subs	r3, #1
 8009846:	4631      	mov	r1, r6
 8009848:	4628      	mov	r0, r5
 800984a:	47b8      	blx	r7
 800984c:	3001      	adds	r0, #1
 800984e:	d10e      	bne.n	800986e <_printf_float+0x42a>
 8009850:	e659      	b.n	8009506 <_printf_float+0xc2>
 8009852:	2301      	movs	r3, #1
 8009854:	4652      	mov	r2, sl
 8009856:	4631      	mov	r1, r6
 8009858:	4628      	mov	r0, r5
 800985a:	47b8      	blx	r7
 800985c:	3001      	adds	r0, #1
 800985e:	f43f ae52 	beq.w	8009506 <_printf_float+0xc2>
 8009862:	f108 0801 	add.w	r8, r8, #1
 8009866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009868:	3b01      	subs	r3, #1
 800986a:	4543      	cmp	r3, r8
 800986c:	dcf1      	bgt.n	8009852 <_printf_float+0x40e>
 800986e:	464b      	mov	r3, r9
 8009870:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009874:	e6dc      	b.n	8009630 <_printf_float+0x1ec>
 8009876:	f04f 0800 	mov.w	r8, #0
 800987a:	f104 0a1a 	add.w	sl, r4, #26
 800987e:	e7f2      	b.n	8009866 <_printf_float+0x422>
 8009880:	2301      	movs	r3, #1
 8009882:	4642      	mov	r2, r8
 8009884:	e7df      	b.n	8009846 <_printf_float+0x402>
 8009886:	2301      	movs	r3, #1
 8009888:	464a      	mov	r2, r9
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f ae38 	beq.w	8009506 <_printf_float+0xc2>
 8009896:	f108 0801 	add.w	r8, r8, #1
 800989a:	68e3      	ldr	r3, [r4, #12]
 800989c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800989e:	1a5b      	subs	r3, r3, r1
 80098a0:	4543      	cmp	r3, r8
 80098a2:	dcf0      	bgt.n	8009886 <_printf_float+0x442>
 80098a4:	e6fa      	b.n	800969c <_printf_float+0x258>
 80098a6:	f04f 0800 	mov.w	r8, #0
 80098aa:	f104 0919 	add.w	r9, r4, #25
 80098ae:	e7f4      	b.n	800989a <_printf_float+0x456>

080098b0 <_printf_common>:
 80098b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b4:	4616      	mov	r6, r2
 80098b6:	4699      	mov	r9, r3
 80098b8:	688a      	ldr	r2, [r1, #8]
 80098ba:	690b      	ldr	r3, [r1, #16]
 80098bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098c0:	4293      	cmp	r3, r2
 80098c2:	bfb8      	it	lt
 80098c4:	4613      	movlt	r3, r2
 80098c6:	6033      	str	r3, [r6, #0]
 80098c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098cc:	4607      	mov	r7, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	b10a      	cbz	r2, 80098d6 <_printf_common+0x26>
 80098d2:	3301      	adds	r3, #1
 80098d4:	6033      	str	r3, [r6, #0]
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	0699      	lsls	r1, r3, #26
 80098da:	bf42      	ittt	mi
 80098dc:	6833      	ldrmi	r3, [r6, #0]
 80098de:	3302      	addmi	r3, #2
 80098e0:	6033      	strmi	r3, [r6, #0]
 80098e2:	6825      	ldr	r5, [r4, #0]
 80098e4:	f015 0506 	ands.w	r5, r5, #6
 80098e8:	d106      	bne.n	80098f8 <_printf_common+0x48>
 80098ea:	f104 0a19 	add.w	sl, r4, #25
 80098ee:	68e3      	ldr	r3, [r4, #12]
 80098f0:	6832      	ldr	r2, [r6, #0]
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	42ab      	cmp	r3, r5
 80098f6:	dc26      	bgt.n	8009946 <_printf_common+0x96>
 80098f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098fc:	1e13      	subs	r3, r2, #0
 80098fe:	6822      	ldr	r2, [r4, #0]
 8009900:	bf18      	it	ne
 8009902:	2301      	movne	r3, #1
 8009904:	0692      	lsls	r2, r2, #26
 8009906:	d42b      	bmi.n	8009960 <_printf_common+0xb0>
 8009908:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800990c:	4649      	mov	r1, r9
 800990e:	4638      	mov	r0, r7
 8009910:	47c0      	blx	r8
 8009912:	3001      	adds	r0, #1
 8009914:	d01e      	beq.n	8009954 <_printf_common+0xa4>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	68e5      	ldr	r5, [r4, #12]
 800991a:	6832      	ldr	r2, [r6, #0]
 800991c:	f003 0306 	and.w	r3, r3, #6
 8009920:	2b04      	cmp	r3, #4
 8009922:	bf08      	it	eq
 8009924:	1aad      	subeq	r5, r5, r2
 8009926:	68a3      	ldr	r3, [r4, #8]
 8009928:	6922      	ldr	r2, [r4, #16]
 800992a:	bf0c      	ite	eq
 800992c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009930:	2500      	movne	r5, #0
 8009932:	4293      	cmp	r3, r2
 8009934:	bfc4      	itt	gt
 8009936:	1a9b      	subgt	r3, r3, r2
 8009938:	18ed      	addgt	r5, r5, r3
 800993a:	2600      	movs	r6, #0
 800993c:	341a      	adds	r4, #26
 800993e:	42b5      	cmp	r5, r6
 8009940:	d11a      	bne.n	8009978 <_printf_common+0xc8>
 8009942:	2000      	movs	r0, #0
 8009944:	e008      	b.n	8009958 <_printf_common+0xa8>
 8009946:	2301      	movs	r3, #1
 8009948:	4652      	mov	r2, sl
 800994a:	4649      	mov	r1, r9
 800994c:	4638      	mov	r0, r7
 800994e:	47c0      	blx	r8
 8009950:	3001      	adds	r0, #1
 8009952:	d103      	bne.n	800995c <_printf_common+0xac>
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800995c:	3501      	adds	r5, #1
 800995e:	e7c6      	b.n	80098ee <_printf_common+0x3e>
 8009960:	18e1      	adds	r1, r4, r3
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	2030      	movs	r0, #48	; 0x30
 8009966:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800996a:	4422      	add	r2, r4
 800996c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009970:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009974:	3302      	adds	r3, #2
 8009976:	e7c7      	b.n	8009908 <_printf_common+0x58>
 8009978:	2301      	movs	r3, #1
 800997a:	4622      	mov	r2, r4
 800997c:	4649      	mov	r1, r9
 800997e:	4638      	mov	r0, r7
 8009980:	47c0      	blx	r8
 8009982:	3001      	adds	r0, #1
 8009984:	d0e6      	beq.n	8009954 <_printf_common+0xa4>
 8009986:	3601      	adds	r6, #1
 8009988:	e7d9      	b.n	800993e <_printf_common+0x8e>
	...

0800998c <_printf_i>:
 800998c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009990:	7e0f      	ldrb	r7, [r1, #24]
 8009992:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009994:	2f78      	cmp	r7, #120	; 0x78
 8009996:	4691      	mov	r9, r2
 8009998:	4680      	mov	r8, r0
 800999a:	460c      	mov	r4, r1
 800999c:	469a      	mov	sl, r3
 800999e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099a2:	d807      	bhi.n	80099b4 <_printf_i+0x28>
 80099a4:	2f62      	cmp	r7, #98	; 0x62
 80099a6:	d80a      	bhi.n	80099be <_printf_i+0x32>
 80099a8:	2f00      	cmp	r7, #0
 80099aa:	f000 80d8 	beq.w	8009b5e <_printf_i+0x1d2>
 80099ae:	2f58      	cmp	r7, #88	; 0x58
 80099b0:	f000 80a3 	beq.w	8009afa <_printf_i+0x16e>
 80099b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099bc:	e03a      	b.n	8009a34 <_printf_i+0xa8>
 80099be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099c2:	2b15      	cmp	r3, #21
 80099c4:	d8f6      	bhi.n	80099b4 <_printf_i+0x28>
 80099c6:	a101      	add	r1, pc, #4	; (adr r1, 80099cc <_printf_i+0x40>)
 80099c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099cc:	08009a25 	.word	0x08009a25
 80099d0:	08009a39 	.word	0x08009a39
 80099d4:	080099b5 	.word	0x080099b5
 80099d8:	080099b5 	.word	0x080099b5
 80099dc:	080099b5 	.word	0x080099b5
 80099e0:	080099b5 	.word	0x080099b5
 80099e4:	08009a39 	.word	0x08009a39
 80099e8:	080099b5 	.word	0x080099b5
 80099ec:	080099b5 	.word	0x080099b5
 80099f0:	080099b5 	.word	0x080099b5
 80099f4:	080099b5 	.word	0x080099b5
 80099f8:	08009b45 	.word	0x08009b45
 80099fc:	08009a69 	.word	0x08009a69
 8009a00:	08009b27 	.word	0x08009b27
 8009a04:	080099b5 	.word	0x080099b5
 8009a08:	080099b5 	.word	0x080099b5
 8009a0c:	08009b67 	.word	0x08009b67
 8009a10:	080099b5 	.word	0x080099b5
 8009a14:	08009a69 	.word	0x08009a69
 8009a18:	080099b5 	.word	0x080099b5
 8009a1c:	080099b5 	.word	0x080099b5
 8009a20:	08009b2f 	.word	0x08009b2f
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	1d1a      	adds	r2, r3, #4
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	602a      	str	r2, [r5, #0]
 8009a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a34:	2301      	movs	r3, #1
 8009a36:	e0a3      	b.n	8009b80 <_printf_i+0x1f4>
 8009a38:	6820      	ldr	r0, [r4, #0]
 8009a3a:	6829      	ldr	r1, [r5, #0]
 8009a3c:	0606      	lsls	r6, r0, #24
 8009a3e:	f101 0304 	add.w	r3, r1, #4
 8009a42:	d50a      	bpl.n	8009a5a <_printf_i+0xce>
 8009a44:	680e      	ldr	r6, [r1, #0]
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	2e00      	cmp	r6, #0
 8009a4a:	da03      	bge.n	8009a54 <_printf_i+0xc8>
 8009a4c:	232d      	movs	r3, #45	; 0x2d
 8009a4e:	4276      	negs	r6, r6
 8009a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a54:	485e      	ldr	r0, [pc, #376]	; (8009bd0 <_printf_i+0x244>)
 8009a56:	230a      	movs	r3, #10
 8009a58:	e019      	b.n	8009a8e <_printf_i+0x102>
 8009a5a:	680e      	ldr	r6, [r1, #0]
 8009a5c:	602b      	str	r3, [r5, #0]
 8009a5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a62:	bf18      	it	ne
 8009a64:	b236      	sxthne	r6, r6
 8009a66:	e7ef      	b.n	8009a48 <_printf_i+0xbc>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	6820      	ldr	r0, [r4, #0]
 8009a6c:	1d19      	adds	r1, r3, #4
 8009a6e:	6029      	str	r1, [r5, #0]
 8009a70:	0601      	lsls	r1, r0, #24
 8009a72:	d501      	bpl.n	8009a78 <_printf_i+0xec>
 8009a74:	681e      	ldr	r6, [r3, #0]
 8009a76:	e002      	b.n	8009a7e <_printf_i+0xf2>
 8009a78:	0646      	lsls	r6, r0, #25
 8009a7a:	d5fb      	bpl.n	8009a74 <_printf_i+0xe8>
 8009a7c:	881e      	ldrh	r6, [r3, #0]
 8009a7e:	4854      	ldr	r0, [pc, #336]	; (8009bd0 <_printf_i+0x244>)
 8009a80:	2f6f      	cmp	r7, #111	; 0x6f
 8009a82:	bf0c      	ite	eq
 8009a84:	2308      	moveq	r3, #8
 8009a86:	230a      	movne	r3, #10
 8009a88:	2100      	movs	r1, #0
 8009a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a8e:	6865      	ldr	r5, [r4, #4]
 8009a90:	60a5      	str	r5, [r4, #8]
 8009a92:	2d00      	cmp	r5, #0
 8009a94:	bfa2      	ittt	ge
 8009a96:	6821      	ldrge	r1, [r4, #0]
 8009a98:	f021 0104 	bicge.w	r1, r1, #4
 8009a9c:	6021      	strge	r1, [r4, #0]
 8009a9e:	b90e      	cbnz	r6, 8009aa4 <_printf_i+0x118>
 8009aa0:	2d00      	cmp	r5, #0
 8009aa2:	d04d      	beq.n	8009b40 <_printf_i+0x1b4>
 8009aa4:	4615      	mov	r5, r2
 8009aa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009aaa:	fb03 6711 	mls	r7, r3, r1, r6
 8009aae:	5dc7      	ldrb	r7, [r0, r7]
 8009ab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ab4:	4637      	mov	r7, r6
 8009ab6:	42bb      	cmp	r3, r7
 8009ab8:	460e      	mov	r6, r1
 8009aba:	d9f4      	bls.n	8009aa6 <_printf_i+0x11a>
 8009abc:	2b08      	cmp	r3, #8
 8009abe:	d10b      	bne.n	8009ad8 <_printf_i+0x14c>
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	07de      	lsls	r6, r3, #31
 8009ac4:	d508      	bpl.n	8009ad8 <_printf_i+0x14c>
 8009ac6:	6923      	ldr	r3, [r4, #16]
 8009ac8:	6861      	ldr	r1, [r4, #4]
 8009aca:	4299      	cmp	r1, r3
 8009acc:	bfde      	ittt	le
 8009ace:	2330      	movle	r3, #48	; 0x30
 8009ad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ad4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ad8:	1b52      	subs	r2, r2, r5
 8009ada:	6122      	str	r2, [r4, #16]
 8009adc:	f8cd a000 	str.w	sl, [sp]
 8009ae0:	464b      	mov	r3, r9
 8009ae2:	aa03      	add	r2, sp, #12
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	f7ff fee2 	bl	80098b0 <_printf_common>
 8009aec:	3001      	adds	r0, #1
 8009aee:	d14c      	bne.n	8009b8a <_printf_i+0x1fe>
 8009af0:	f04f 30ff 	mov.w	r0, #4294967295
 8009af4:	b004      	add	sp, #16
 8009af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afa:	4835      	ldr	r0, [pc, #212]	; (8009bd0 <_printf_i+0x244>)
 8009afc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b00:	6829      	ldr	r1, [r5, #0]
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b08:	6029      	str	r1, [r5, #0]
 8009b0a:	061d      	lsls	r5, r3, #24
 8009b0c:	d514      	bpl.n	8009b38 <_printf_i+0x1ac>
 8009b0e:	07df      	lsls	r7, r3, #31
 8009b10:	bf44      	itt	mi
 8009b12:	f043 0320 	orrmi.w	r3, r3, #32
 8009b16:	6023      	strmi	r3, [r4, #0]
 8009b18:	b91e      	cbnz	r6, 8009b22 <_printf_i+0x196>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	f023 0320 	bic.w	r3, r3, #32
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	2310      	movs	r3, #16
 8009b24:	e7b0      	b.n	8009a88 <_printf_i+0xfc>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	f043 0320 	orr.w	r3, r3, #32
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	2378      	movs	r3, #120	; 0x78
 8009b30:	4828      	ldr	r0, [pc, #160]	; (8009bd4 <_printf_i+0x248>)
 8009b32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b36:	e7e3      	b.n	8009b00 <_printf_i+0x174>
 8009b38:	0659      	lsls	r1, r3, #25
 8009b3a:	bf48      	it	mi
 8009b3c:	b2b6      	uxthmi	r6, r6
 8009b3e:	e7e6      	b.n	8009b0e <_printf_i+0x182>
 8009b40:	4615      	mov	r5, r2
 8009b42:	e7bb      	b.n	8009abc <_printf_i+0x130>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	6826      	ldr	r6, [r4, #0]
 8009b48:	6961      	ldr	r1, [r4, #20]
 8009b4a:	1d18      	adds	r0, r3, #4
 8009b4c:	6028      	str	r0, [r5, #0]
 8009b4e:	0635      	lsls	r5, r6, #24
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	d501      	bpl.n	8009b58 <_printf_i+0x1cc>
 8009b54:	6019      	str	r1, [r3, #0]
 8009b56:	e002      	b.n	8009b5e <_printf_i+0x1d2>
 8009b58:	0670      	lsls	r0, r6, #25
 8009b5a:	d5fb      	bpl.n	8009b54 <_printf_i+0x1c8>
 8009b5c:	8019      	strh	r1, [r3, #0]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	6123      	str	r3, [r4, #16]
 8009b62:	4615      	mov	r5, r2
 8009b64:	e7ba      	b.n	8009adc <_printf_i+0x150>
 8009b66:	682b      	ldr	r3, [r5, #0]
 8009b68:	1d1a      	adds	r2, r3, #4
 8009b6a:	602a      	str	r2, [r5, #0]
 8009b6c:	681d      	ldr	r5, [r3, #0]
 8009b6e:	6862      	ldr	r2, [r4, #4]
 8009b70:	2100      	movs	r1, #0
 8009b72:	4628      	mov	r0, r5
 8009b74:	f7f6 fb4c 	bl	8000210 <memchr>
 8009b78:	b108      	cbz	r0, 8009b7e <_printf_i+0x1f2>
 8009b7a:	1b40      	subs	r0, r0, r5
 8009b7c:	6060      	str	r0, [r4, #4]
 8009b7e:	6863      	ldr	r3, [r4, #4]
 8009b80:	6123      	str	r3, [r4, #16]
 8009b82:	2300      	movs	r3, #0
 8009b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b88:	e7a8      	b.n	8009adc <_printf_i+0x150>
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	462a      	mov	r2, r5
 8009b8e:	4649      	mov	r1, r9
 8009b90:	4640      	mov	r0, r8
 8009b92:	47d0      	blx	sl
 8009b94:	3001      	adds	r0, #1
 8009b96:	d0ab      	beq.n	8009af0 <_printf_i+0x164>
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	079b      	lsls	r3, r3, #30
 8009b9c:	d413      	bmi.n	8009bc6 <_printf_i+0x23a>
 8009b9e:	68e0      	ldr	r0, [r4, #12]
 8009ba0:	9b03      	ldr	r3, [sp, #12]
 8009ba2:	4298      	cmp	r0, r3
 8009ba4:	bfb8      	it	lt
 8009ba6:	4618      	movlt	r0, r3
 8009ba8:	e7a4      	b.n	8009af4 <_printf_i+0x168>
 8009baa:	2301      	movs	r3, #1
 8009bac:	4632      	mov	r2, r6
 8009bae:	4649      	mov	r1, r9
 8009bb0:	4640      	mov	r0, r8
 8009bb2:	47d0      	blx	sl
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	d09b      	beq.n	8009af0 <_printf_i+0x164>
 8009bb8:	3501      	adds	r5, #1
 8009bba:	68e3      	ldr	r3, [r4, #12]
 8009bbc:	9903      	ldr	r1, [sp, #12]
 8009bbe:	1a5b      	subs	r3, r3, r1
 8009bc0:	42ab      	cmp	r3, r5
 8009bc2:	dcf2      	bgt.n	8009baa <_printf_i+0x21e>
 8009bc4:	e7eb      	b.n	8009b9e <_printf_i+0x212>
 8009bc6:	2500      	movs	r5, #0
 8009bc8:	f104 0619 	add.w	r6, r4, #25
 8009bcc:	e7f5      	b.n	8009bba <_printf_i+0x22e>
 8009bce:	bf00      	nop
 8009bd0:	0800fd20 	.word	0x0800fd20
 8009bd4:	0800fd31 	.word	0x0800fd31

08009bd8 <_scanf_float>:
 8009bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	b087      	sub	sp, #28
 8009bde:	4617      	mov	r7, r2
 8009be0:	9303      	str	r3, [sp, #12]
 8009be2:	688b      	ldr	r3, [r1, #8]
 8009be4:	1e5a      	subs	r2, r3, #1
 8009be6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009bea:	bf83      	ittte	hi
 8009bec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009bf0:	195b      	addhi	r3, r3, r5
 8009bf2:	9302      	strhi	r3, [sp, #8]
 8009bf4:	2300      	movls	r3, #0
 8009bf6:	bf86      	itte	hi
 8009bf8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009bfc:	608b      	strhi	r3, [r1, #8]
 8009bfe:	9302      	strls	r3, [sp, #8]
 8009c00:	680b      	ldr	r3, [r1, #0]
 8009c02:	468b      	mov	fp, r1
 8009c04:	2500      	movs	r5, #0
 8009c06:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009c0a:	f84b 3b1c 	str.w	r3, [fp], #28
 8009c0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009c12:	4680      	mov	r8, r0
 8009c14:	460c      	mov	r4, r1
 8009c16:	465e      	mov	r6, fp
 8009c18:	46aa      	mov	sl, r5
 8009c1a:	46a9      	mov	r9, r5
 8009c1c:	9501      	str	r5, [sp, #4]
 8009c1e:	68a2      	ldr	r2, [r4, #8]
 8009c20:	b152      	cbz	r2, 8009c38 <_scanf_float+0x60>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	2b4e      	cmp	r3, #78	; 0x4e
 8009c28:	d864      	bhi.n	8009cf4 <_scanf_float+0x11c>
 8009c2a:	2b40      	cmp	r3, #64	; 0x40
 8009c2c:	d83c      	bhi.n	8009ca8 <_scanf_float+0xd0>
 8009c2e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009c32:	b2c8      	uxtb	r0, r1
 8009c34:	280e      	cmp	r0, #14
 8009c36:	d93a      	bls.n	8009cae <_scanf_float+0xd6>
 8009c38:	f1b9 0f00 	cmp.w	r9, #0
 8009c3c:	d003      	beq.n	8009c46 <_scanf_float+0x6e>
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c4a:	f1ba 0f01 	cmp.w	sl, #1
 8009c4e:	f200 8113 	bhi.w	8009e78 <_scanf_float+0x2a0>
 8009c52:	455e      	cmp	r6, fp
 8009c54:	f200 8105 	bhi.w	8009e62 <_scanf_float+0x28a>
 8009c58:	2501      	movs	r5, #1
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	b007      	add	sp, #28
 8009c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009c66:	2a0d      	cmp	r2, #13
 8009c68:	d8e6      	bhi.n	8009c38 <_scanf_float+0x60>
 8009c6a:	a101      	add	r1, pc, #4	; (adr r1, 8009c70 <_scanf_float+0x98>)
 8009c6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009c70:	08009daf 	.word	0x08009daf
 8009c74:	08009c39 	.word	0x08009c39
 8009c78:	08009c39 	.word	0x08009c39
 8009c7c:	08009c39 	.word	0x08009c39
 8009c80:	08009e0f 	.word	0x08009e0f
 8009c84:	08009de7 	.word	0x08009de7
 8009c88:	08009c39 	.word	0x08009c39
 8009c8c:	08009c39 	.word	0x08009c39
 8009c90:	08009dbd 	.word	0x08009dbd
 8009c94:	08009c39 	.word	0x08009c39
 8009c98:	08009c39 	.word	0x08009c39
 8009c9c:	08009c39 	.word	0x08009c39
 8009ca0:	08009c39 	.word	0x08009c39
 8009ca4:	08009d75 	.word	0x08009d75
 8009ca8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009cac:	e7db      	b.n	8009c66 <_scanf_float+0x8e>
 8009cae:	290e      	cmp	r1, #14
 8009cb0:	d8c2      	bhi.n	8009c38 <_scanf_float+0x60>
 8009cb2:	a001      	add	r0, pc, #4	; (adr r0, 8009cb8 <_scanf_float+0xe0>)
 8009cb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009cb8:	08009d67 	.word	0x08009d67
 8009cbc:	08009c39 	.word	0x08009c39
 8009cc0:	08009d67 	.word	0x08009d67
 8009cc4:	08009dfb 	.word	0x08009dfb
 8009cc8:	08009c39 	.word	0x08009c39
 8009ccc:	08009d15 	.word	0x08009d15
 8009cd0:	08009d51 	.word	0x08009d51
 8009cd4:	08009d51 	.word	0x08009d51
 8009cd8:	08009d51 	.word	0x08009d51
 8009cdc:	08009d51 	.word	0x08009d51
 8009ce0:	08009d51 	.word	0x08009d51
 8009ce4:	08009d51 	.word	0x08009d51
 8009ce8:	08009d51 	.word	0x08009d51
 8009cec:	08009d51 	.word	0x08009d51
 8009cf0:	08009d51 	.word	0x08009d51
 8009cf4:	2b6e      	cmp	r3, #110	; 0x6e
 8009cf6:	d809      	bhi.n	8009d0c <_scanf_float+0x134>
 8009cf8:	2b60      	cmp	r3, #96	; 0x60
 8009cfa:	d8b2      	bhi.n	8009c62 <_scanf_float+0x8a>
 8009cfc:	2b54      	cmp	r3, #84	; 0x54
 8009cfe:	d077      	beq.n	8009df0 <_scanf_float+0x218>
 8009d00:	2b59      	cmp	r3, #89	; 0x59
 8009d02:	d199      	bne.n	8009c38 <_scanf_float+0x60>
 8009d04:	2d07      	cmp	r5, #7
 8009d06:	d197      	bne.n	8009c38 <_scanf_float+0x60>
 8009d08:	2508      	movs	r5, #8
 8009d0a:	e029      	b.n	8009d60 <_scanf_float+0x188>
 8009d0c:	2b74      	cmp	r3, #116	; 0x74
 8009d0e:	d06f      	beq.n	8009df0 <_scanf_float+0x218>
 8009d10:	2b79      	cmp	r3, #121	; 0x79
 8009d12:	e7f6      	b.n	8009d02 <_scanf_float+0x12a>
 8009d14:	6821      	ldr	r1, [r4, #0]
 8009d16:	05c8      	lsls	r0, r1, #23
 8009d18:	d51a      	bpl.n	8009d50 <_scanf_float+0x178>
 8009d1a:	9b02      	ldr	r3, [sp, #8]
 8009d1c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009d20:	6021      	str	r1, [r4, #0]
 8009d22:	f109 0901 	add.w	r9, r9, #1
 8009d26:	b11b      	cbz	r3, 8009d30 <_scanf_float+0x158>
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	3201      	adds	r2, #1
 8009d2c:	9302      	str	r3, [sp, #8]
 8009d2e:	60a2      	str	r2, [r4, #8]
 8009d30:	68a3      	ldr	r3, [r4, #8]
 8009d32:	3b01      	subs	r3, #1
 8009d34:	60a3      	str	r3, [r4, #8]
 8009d36:	6923      	ldr	r3, [r4, #16]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	6123      	str	r3, [r4, #16]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	607b      	str	r3, [r7, #4]
 8009d44:	f340 8084 	ble.w	8009e50 <_scanf_float+0x278>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	603b      	str	r3, [r7, #0]
 8009d4e:	e766      	b.n	8009c1e <_scanf_float+0x46>
 8009d50:	eb1a 0f05 	cmn.w	sl, r5
 8009d54:	f47f af70 	bne.w	8009c38 <_scanf_float+0x60>
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009d5e:	6022      	str	r2, [r4, #0]
 8009d60:	f806 3b01 	strb.w	r3, [r6], #1
 8009d64:	e7e4      	b.n	8009d30 <_scanf_float+0x158>
 8009d66:	6822      	ldr	r2, [r4, #0]
 8009d68:	0610      	lsls	r0, r2, #24
 8009d6a:	f57f af65 	bpl.w	8009c38 <_scanf_float+0x60>
 8009d6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d72:	e7f4      	b.n	8009d5e <_scanf_float+0x186>
 8009d74:	f1ba 0f00 	cmp.w	sl, #0
 8009d78:	d10e      	bne.n	8009d98 <_scanf_float+0x1c0>
 8009d7a:	f1b9 0f00 	cmp.w	r9, #0
 8009d7e:	d10e      	bne.n	8009d9e <_scanf_float+0x1c6>
 8009d80:	6822      	ldr	r2, [r4, #0]
 8009d82:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009d86:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009d8a:	d108      	bne.n	8009d9e <_scanf_float+0x1c6>
 8009d8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d90:	6022      	str	r2, [r4, #0]
 8009d92:	f04f 0a01 	mov.w	sl, #1
 8009d96:	e7e3      	b.n	8009d60 <_scanf_float+0x188>
 8009d98:	f1ba 0f02 	cmp.w	sl, #2
 8009d9c:	d055      	beq.n	8009e4a <_scanf_float+0x272>
 8009d9e:	2d01      	cmp	r5, #1
 8009da0:	d002      	beq.n	8009da8 <_scanf_float+0x1d0>
 8009da2:	2d04      	cmp	r5, #4
 8009da4:	f47f af48 	bne.w	8009c38 <_scanf_float+0x60>
 8009da8:	3501      	adds	r5, #1
 8009daa:	b2ed      	uxtb	r5, r5
 8009dac:	e7d8      	b.n	8009d60 <_scanf_float+0x188>
 8009dae:	f1ba 0f01 	cmp.w	sl, #1
 8009db2:	f47f af41 	bne.w	8009c38 <_scanf_float+0x60>
 8009db6:	f04f 0a02 	mov.w	sl, #2
 8009dba:	e7d1      	b.n	8009d60 <_scanf_float+0x188>
 8009dbc:	b97d      	cbnz	r5, 8009dde <_scanf_float+0x206>
 8009dbe:	f1b9 0f00 	cmp.w	r9, #0
 8009dc2:	f47f af3c 	bne.w	8009c3e <_scanf_float+0x66>
 8009dc6:	6822      	ldr	r2, [r4, #0]
 8009dc8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009dcc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009dd0:	f47f af39 	bne.w	8009c46 <_scanf_float+0x6e>
 8009dd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009dd8:	6022      	str	r2, [r4, #0]
 8009dda:	2501      	movs	r5, #1
 8009ddc:	e7c0      	b.n	8009d60 <_scanf_float+0x188>
 8009dde:	2d03      	cmp	r5, #3
 8009de0:	d0e2      	beq.n	8009da8 <_scanf_float+0x1d0>
 8009de2:	2d05      	cmp	r5, #5
 8009de4:	e7de      	b.n	8009da4 <_scanf_float+0x1cc>
 8009de6:	2d02      	cmp	r5, #2
 8009de8:	f47f af26 	bne.w	8009c38 <_scanf_float+0x60>
 8009dec:	2503      	movs	r5, #3
 8009dee:	e7b7      	b.n	8009d60 <_scanf_float+0x188>
 8009df0:	2d06      	cmp	r5, #6
 8009df2:	f47f af21 	bne.w	8009c38 <_scanf_float+0x60>
 8009df6:	2507      	movs	r5, #7
 8009df8:	e7b2      	b.n	8009d60 <_scanf_float+0x188>
 8009dfa:	6822      	ldr	r2, [r4, #0]
 8009dfc:	0591      	lsls	r1, r2, #22
 8009dfe:	f57f af1b 	bpl.w	8009c38 <_scanf_float+0x60>
 8009e02:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009e06:	6022      	str	r2, [r4, #0]
 8009e08:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e0c:	e7a8      	b.n	8009d60 <_scanf_float+0x188>
 8009e0e:	6822      	ldr	r2, [r4, #0]
 8009e10:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009e14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009e18:	d006      	beq.n	8009e28 <_scanf_float+0x250>
 8009e1a:	0550      	lsls	r0, r2, #21
 8009e1c:	f57f af0c 	bpl.w	8009c38 <_scanf_float+0x60>
 8009e20:	f1b9 0f00 	cmp.w	r9, #0
 8009e24:	f43f af0f 	beq.w	8009c46 <_scanf_float+0x6e>
 8009e28:	0591      	lsls	r1, r2, #22
 8009e2a:	bf58      	it	pl
 8009e2c:	9901      	ldrpl	r1, [sp, #4]
 8009e2e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e32:	bf58      	it	pl
 8009e34:	eba9 0101 	subpl.w	r1, r9, r1
 8009e38:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009e3c:	bf58      	it	pl
 8009e3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009e42:	6022      	str	r2, [r4, #0]
 8009e44:	f04f 0900 	mov.w	r9, #0
 8009e48:	e78a      	b.n	8009d60 <_scanf_float+0x188>
 8009e4a:	f04f 0a03 	mov.w	sl, #3
 8009e4e:	e787      	b.n	8009d60 <_scanf_float+0x188>
 8009e50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e54:	4639      	mov	r1, r7
 8009e56:	4640      	mov	r0, r8
 8009e58:	4798      	blx	r3
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	f43f aedf 	beq.w	8009c1e <_scanf_float+0x46>
 8009e60:	e6ea      	b.n	8009c38 <_scanf_float+0x60>
 8009e62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e6a:	463a      	mov	r2, r7
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	4798      	blx	r3
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	6123      	str	r3, [r4, #16]
 8009e76:	e6ec      	b.n	8009c52 <_scanf_float+0x7a>
 8009e78:	1e6b      	subs	r3, r5, #1
 8009e7a:	2b06      	cmp	r3, #6
 8009e7c:	d825      	bhi.n	8009eca <_scanf_float+0x2f2>
 8009e7e:	2d02      	cmp	r5, #2
 8009e80:	d836      	bhi.n	8009ef0 <_scanf_float+0x318>
 8009e82:	455e      	cmp	r6, fp
 8009e84:	f67f aee8 	bls.w	8009c58 <_scanf_float+0x80>
 8009e88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e8c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e90:	463a      	mov	r2, r7
 8009e92:	4640      	mov	r0, r8
 8009e94:	4798      	blx	r3
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	6123      	str	r3, [r4, #16]
 8009e9c:	e7f1      	b.n	8009e82 <_scanf_float+0x2aa>
 8009e9e:	9802      	ldr	r0, [sp, #8]
 8009ea0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ea4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009ea8:	9002      	str	r0, [sp, #8]
 8009eaa:	463a      	mov	r2, r7
 8009eac:	4640      	mov	r0, r8
 8009eae:	4798      	blx	r3
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	6123      	str	r3, [r4, #16]
 8009eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009eba:	fa5f fa8a 	uxtb.w	sl, sl
 8009ebe:	f1ba 0f02 	cmp.w	sl, #2
 8009ec2:	d1ec      	bne.n	8009e9e <_scanf_float+0x2c6>
 8009ec4:	3d03      	subs	r5, #3
 8009ec6:	b2ed      	uxtb	r5, r5
 8009ec8:	1b76      	subs	r6, r6, r5
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	05da      	lsls	r2, r3, #23
 8009ece:	d52f      	bpl.n	8009f30 <_scanf_float+0x358>
 8009ed0:	055b      	lsls	r3, r3, #21
 8009ed2:	d510      	bpl.n	8009ef6 <_scanf_float+0x31e>
 8009ed4:	455e      	cmp	r6, fp
 8009ed6:	f67f aebf 	bls.w	8009c58 <_scanf_float+0x80>
 8009eda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ede:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ee2:	463a      	mov	r2, r7
 8009ee4:	4640      	mov	r0, r8
 8009ee6:	4798      	blx	r3
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	6123      	str	r3, [r4, #16]
 8009eee:	e7f1      	b.n	8009ed4 <_scanf_float+0x2fc>
 8009ef0:	46aa      	mov	sl, r5
 8009ef2:	9602      	str	r6, [sp, #8]
 8009ef4:	e7df      	b.n	8009eb6 <_scanf_float+0x2de>
 8009ef6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	2965      	cmp	r1, #101	; 0x65
 8009efe:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f02:	f106 35ff 	add.w	r5, r6, #4294967295
 8009f06:	6123      	str	r3, [r4, #16]
 8009f08:	d00c      	beq.n	8009f24 <_scanf_float+0x34c>
 8009f0a:	2945      	cmp	r1, #69	; 0x45
 8009f0c:	d00a      	beq.n	8009f24 <_scanf_float+0x34c>
 8009f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f12:	463a      	mov	r2, r7
 8009f14:	4640      	mov	r0, r8
 8009f16:	4798      	blx	r3
 8009f18:	6923      	ldr	r3, [r4, #16]
 8009f1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	1eb5      	subs	r5, r6, #2
 8009f22:	6123      	str	r3, [r4, #16]
 8009f24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f28:	463a      	mov	r2, r7
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	4798      	blx	r3
 8009f2e:	462e      	mov	r6, r5
 8009f30:	6825      	ldr	r5, [r4, #0]
 8009f32:	f015 0510 	ands.w	r5, r5, #16
 8009f36:	d159      	bne.n	8009fec <_scanf_float+0x414>
 8009f38:	7035      	strb	r5, [r6, #0]
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f44:	d11b      	bne.n	8009f7e <_scanf_float+0x3a6>
 8009f46:	9b01      	ldr	r3, [sp, #4]
 8009f48:	454b      	cmp	r3, r9
 8009f4a:	eba3 0209 	sub.w	r2, r3, r9
 8009f4e:	d123      	bne.n	8009f98 <_scanf_float+0x3c0>
 8009f50:	2200      	movs	r2, #0
 8009f52:	4659      	mov	r1, fp
 8009f54:	4640      	mov	r0, r8
 8009f56:	f001 fcdd 	bl	800b914 <_strtod_r>
 8009f5a:	6822      	ldr	r2, [r4, #0]
 8009f5c:	9b03      	ldr	r3, [sp, #12]
 8009f5e:	f012 0f02 	tst.w	r2, #2
 8009f62:	ec57 6b10 	vmov	r6, r7, d0
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	d021      	beq.n	8009fae <_scanf_float+0x3d6>
 8009f6a:	9903      	ldr	r1, [sp, #12]
 8009f6c:	1d1a      	adds	r2, r3, #4
 8009f6e:	600a      	str	r2, [r1, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	e9c3 6700 	strd	r6, r7, [r3]
 8009f76:	68e3      	ldr	r3, [r4, #12]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	60e3      	str	r3, [r4, #12]
 8009f7c:	e66d      	b.n	8009c5a <_scanf_float+0x82>
 8009f7e:	9b04      	ldr	r3, [sp, #16]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0e5      	beq.n	8009f50 <_scanf_float+0x378>
 8009f84:	9905      	ldr	r1, [sp, #20]
 8009f86:	230a      	movs	r3, #10
 8009f88:	462a      	mov	r2, r5
 8009f8a:	3101      	adds	r1, #1
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	f001 fd49 	bl	800ba24 <_strtol_r>
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	9e05      	ldr	r6, [sp, #20]
 8009f96:	1ac2      	subs	r2, r0, r3
 8009f98:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009f9c:	429e      	cmp	r6, r3
 8009f9e:	bf28      	it	cs
 8009fa0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009fa4:	4912      	ldr	r1, [pc, #72]	; (8009ff0 <_scanf_float+0x418>)
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f000 f870 	bl	800a08c <siprintf>
 8009fac:	e7d0      	b.n	8009f50 <_scanf_float+0x378>
 8009fae:	9903      	ldr	r1, [sp, #12]
 8009fb0:	f012 0f04 	tst.w	r2, #4
 8009fb4:	f103 0204 	add.w	r2, r3, #4
 8009fb8:	600a      	str	r2, [r1, #0]
 8009fba:	d1d9      	bne.n	8009f70 <_scanf_float+0x398>
 8009fbc:	f8d3 8000 	ldr.w	r8, [r3]
 8009fc0:	ee10 2a10 	vmov	r2, s0
 8009fc4:	ee10 0a10 	vmov	r0, s0
 8009fc8:	463b      	mov	r3, r7
 8009fca:	4639      	mov	r1, r7
 8009fcc:	f7f6 fdc6 	bl	8000b5c <__aeabi_dcmpun>
 8009fd0:	b128      	cbz	r0, 8009fde <_scanf_float+0x406>
 8009fd2:	4808      	ldr	r0, [pc, #32]	; (8009ff4 <_scanf_float+0x41c>)
 8009fd4:	f000 f820 	bl	800a018 <nanf>
 8009fd8:	ed88 0a00 	vstr	s0, [r8]
 8009fdc:	e7cb      	b.n	8009f76 <_scanf_float+0x39e>
 8009fde:	4630      	mov	r0, r6
 8009fe0:	4639      	mov	r1, r7
 8009fe2:	f7f6 fe19 	bl	8000c18 <__aeabi_d2f>
 8009fe6:	f8c8 0000 	str.w	r0, [r8]
 8009fea:	e7c4      	b.n	8009f76 <_scanf_float+0x39e>
 8009fec:	2500      	movs	r5, #0
 8009fee:	e634      	b.n	8009c5a <_scanf_float+0x82>
 8009ff0:	0800fd42 	.word	0x0800fd42
 8009ff4:	0801008f 	.word	0x0801008f

08009ff8 <_sbrk_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d06      	ldr	r5, [pc, #24]	; (800a014 <_sbrk_r+0x1c>)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4604      	mov	r4, r0
 800a000:	4608      	mov	r0, r1
 800a002:	602b      	str	r3, [r5, #0]
 800a004:	f005 fa7c 	bl	800f500 <_sbrk>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d102      	bne.n	800a012 <_sbrk_r+0x1a>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	b103      	cbz	r3, 800a012 <_sbrk_r+0x1a>
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	20000360 	.word	0x20000360

0800a018 <nanf>:
 800a018:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a020 <nanf+0x8>
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	7fc00000 	.word	0x7fc00000

0800a024 <sniprintf>:
 800a024:	b40c      	push	{r2, r3}
 800a026:	b530      	push	{r4, r5, lr}
 800a028:	4b17      	ldr	r3, [pc, #92]	; (800a088 <sniprintf+0x64>)
 800a02a:	1e0c      	subs	r4, r1, #0
 800a02c:	681d      	ldr	r5, [r3, #0]
 800a02e:	b09d      	sub	sp, #116	; 0x74
 800a030:	da08      	bge.n	800a044 <sniprintf+0x20>
 800a032:	238b      	movs	r3, #139	; 0x8b
 800a034:	602b      	str	r3, [r5, #0]
 800a036:	f04f 30ff 	mov.w	r0, #4294967295
 800a03a:	b01d      	add	sp, #116	; 0x74
 800a03c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a040:	b002      	add	sp, #8
 800a042:	4770      	bx	lr
 800a044:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a048:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a04c:	bf14      	ite	ne
 800a04e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a052:	4623      	moveq	r3, r4
 800a054:	9304      	str	r3, [sp, #16]
 800a056:	9307      	str	r3, [sp, #28]
 800a058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a05c:	9002      	str	r0, [sp, #8]
 800a05e:	9006      	str	r0, [sp, #24]
 800a060:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a064:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a066:	ab21      	add	r3, sp, #132	; 0x84
 800a068:	a902      	add	r1, sp, #8
 800a06a:	4628      	mov	r0, r5
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	f004 f857 	bl	800e120 <_svfiprintf_r>
 800a072:	1c43      	adds	r3, r0, #1
 800a074:	bfbc      	itt	lt
 800a076:	238b      	movlt	r3, #139	; 0x8b
 800a078:	602b      	strlt	r3, [r5, #0]
 800a07a:	2c00      	cmp	r4, #0
 800a07c:	d0dd      	beq.n	800a03a <sniprintf+0x16>
 800a07e:	9b02      	ldr	r3, [sp, #8]
 800a080:	2200      	movs	r2, #0
 800a082:	701a      	strb	r2, [r3, #0]
 800a084:	e7d9      	b.n	800a03a <sniprintf+0x16>
 800a086:	bf00      	nop
 800a088:	2000000c 	.word	0x2000000c

0800a08c <siprintf>:
 800a08c:	b40e      	push	{r1, r2, r3}
 800a08e:	b500      	push	{lr}
 800a090:	b09c      	sub	sp, #112	; 0x70
 800a092:	ab1d      	add	r3, sp, #116	; 0x74
 800a094:	9002      	str	r0, [sp, #8]
 800a096:	9006      	str	r0, [sp, #24]
 800a098:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a09c:	4809      	ldr	r0, [pc, #36]	; (800a0c4 <siprintf+0x38>)
 800a09e:	9107      	str	r1, [sp, #28]
 800a0a0:	9104      	str	r1, [sp, #16]
 800a0a2:	4909      	ldr	r1, [pc, #36]	; (800a0c8 <siprintf+0x3c>)
 800a0a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0a8:	9105      	str	r1, [sp, #20]
 800a0aa:	6800      	ldr	r0, [r0, #0]
 800a0ac:	9301      	str	r3, [sp, #4]
 800a0ae:	a902      	add	r1, sp, #8
 800a0b0:	f004 f836 	bl	800e120 <_svfiprintf_r>
 800a0b4:	9b02      	ldr	r3, [sp, #8]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	701a      	strb	r2, [r3, #0]
 800a0ba:	b01c      	add	sp, #112	; 0x70
 800a0bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0c0:	b003      	add	sp, #12
 800a0c2:	4770      	bx	lr
 800a0c4:	2000000c 	.word	0x2000000c
 800a0c8:	ffff0208 	.word	0xffff0208

0800a0cc <siscanf>:
 800a0cc:	b40e      	push	{r1, r2, r3}
 800a0ce:	b510      	push	{r4, lr}
 800a0d0:	b09f      	sub	sp, #124	; 0x7c
 800a0d2:	ac21      	add	r4, sp, #132	; 0x84
 800a0d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a0d8:	f854 2b04 	ldr.w	r2, [r4], #4
 800a0dc:	9201      	str	r2, [sp, #4]
 800a0de:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a0e2:	9004      	str	r0, [sp, #16]
 800a0e4:	9008      	str	r0, [sp, #32]
 800a0e6:	f7f6 f885 	bl	80001f4 <strlen>
 800a0ea:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <siscanf+0x50>)
 800a0ec:	9005      	str	r0, [sp, #20]
 800a0ee:	9009      	str	r0, [sp, #36]	; 0x24
 800a0f0:	930d      	str	r3, [sp, #52]	; 0x34
 800a0f2:	480b      	ldr	r0, [pc, #44]	; (800a120 <siscanf+0x54>)
 800a0f4:	9a01      	ldr	r2, [sp, #4]
 800a0f6:	6800      	ldr	r0, [r0, #0]
 800a0f8:	9403      	str	r4, [sp, #12]
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	9311      	str	r3, [sp, #68]	; 0x44
 800a0fe:	9316      	str	r3, [sp, #88]	; 0x58
 800a100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a104:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a108:	a904      	add	r1, sp, #16
 800a10a:	4623      	mov	r3, r4
 800a10c:	f004 f962 	bl	800e3d4 <__ssvfiscanf_r>
 800a110:	b01f      	add	sp, #124	; 0x7c
 800a112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a116:	b003      	add	sp, #12
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	0800a147 	.word	0x0800a147
 800a120:	2000000c 	.word	0x2000000c

0800a124 <__sread>:
 800a124:	b510      	push	{r4, lr}
 800a126:	460c      	mov	r4, r1
 800a128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a12c:	f004 fd76 	bl	800ec1c <_read_r>
 800a130:	2800      	cmp	r0, #0
 800a132:	bfab      	itete	ge
 800a134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a136:	89a3      	ldrhlt	r3, [r4, #12]
 800a138:	181b      	addge	r3, r3, r0
 800a13a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a13e:	bfac      	ite	ge
 800a140:	6563      	strge	r3, [r4, #84]	; 0x54
 800a142:	81a3      	strhlt	r3, [r4, #12]
 800a144:	bd10      	pop	{r4, pc}

0800a146 <__seofread>:
 800a146:	2000      	movs	r0, #0
 800a148:	4770      	bx	lr

0800a14a <__swrite>:
 800a14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a14e:	461f      	mov	r7, r3
 800a150:	898b      	ldrh	r3, [r1, #12]
 800a152:	05db      	lsls	r3, r3, #23
 800a154:	4605      	mov	r5, r0
 800a156:	460c      	mov	r4, r1
 800a158:	4616      	mov	r6, r2
 800a15a:	d505      	bpl.n	800a168 <__swrite+0x1e>
 800a15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a160:	2302      	movs	r3, #2
 800a162:	2200      	movs	r2, #0
 800a164:	f003 fa7a 	bl	800d65c <_lseek_r>
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a16e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a172:	81a3      	strh	r3, [r4, #12]
 800a174:	4632      	mov	r2, r6
 800a176:	463b      	mov	r3, r7
 800a178:	4628      	mov	r0, r5
 800a17a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a17e:	f001 bf17 	b.w	800bfb0 <_write_r>

0800a182 <__sseek>:
 800a182:	b510      	push	{r4, lr}
 800a184:	460c      	mov	r4, r1
 800a186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a18a:	f003 fa67 	bl	800d65c <_lseek_r>
 800a18e:	1c43      	adds	r3, r0, #1
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	bf15      	itete	ne
 800a194:	6560      	strne	r0, [r4, #84]	; 0x54
 800a196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a19a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a19e:	81a3      	strheq	r3, [r4, #12]
 800a1a0:	bf18      	it	ne
 800a1a2:	81a3      	strhne	r3, [r4, #12]
 800a1a4:	bd10      	pop	{r4, pc}

0800a1a6 <__sclose>:
 800a1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1aa:	f001 bf35 	b.w	800c018 <_close_r>

0800a1ae <strcat>:
 800a1ae:	b510      	push	{r4, lr}
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	7814      	ldrb	r4, [r2, #0]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	3201      	adds	r2, #1
 800a1b8:	2c00      	cmp	r4, #0
 800a1ba:	d1fa      	bne.n	800a1b2 <strcat+0x4>
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1c6:	2a00      	cmp	r2, #0
 800a1c8:	d1f9      	bne.n	800a1be <strcat+0x10>
 800a1ca:	bd10      	pop	{r4, pc}

0800a1cc <strcpy>:
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1d2:	f803 2b01 	strb.w	r2, [r3], #1
 800a1d6:	2a00      	cmp	r2, #0
 800a1d8:	d1f9      	bne.n	800a1ce <strcpy+0x2>
 800a1da:	4770      	bx	lr

0800a1dc <iso_year_adjust>:
 800a1dc:	6942      	ldr	r2, [r0, #20]
 800a1de:	2a00      	cmp	r2, #0
 800a1e0:	f240 736c 	movw	r3, #1900	; 0x76c
 800a1e4:	bfa8      	it	ge
 800a1e6:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800a1ea:	4413      	add	r3, r2
 800a1ec:	0792      	lsls	r2, r2, #30
 800a1ee:	d105      	bne.n	800a1fc <iso_year_adjust+0x20>
 800a1f0:	2164      	movs	r1, #100	; 0x64
 800a1f2:	fb93 f2f1 	sdiv	r2, r3, r1
 800a1f6:	fb01 3212 	mls	r2, r1, r2, r3
 800a1fa:	b9da      	cbnz	r2, 800a234 <iso_year_adjust+0x58>
 800a1fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a200:	fb93 f1f2 	sdiv	r1, r3, r2
 800a204:	fb02 3311 	mls	r3, r2, r1, r3
 800a208:	fab3 f383 	clz	r3, r3
 800a20c:	095b      	lsrs	r3, r3, #5
 800a20e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800a212:	0040      	lsls	r0, r0, #1
 800a214:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800a218:	4418      	add	r0, r3
 800a21a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800a21e:	4298      	cmp	r0, r3
 800a220:	d03a      	beq.n	800a298 <iso_year_adjust+0xbc>
 800a222:	dc21      	bgt.n	800a268 <iso_year_adjust+0x8c>
 800a224:	2801      	cmp	r0, #1
 800a226:	dc1a      	bgt.n	800a25e <iso_year_adjust+0x82>
 800a228:	2800      	cmp	r0, #0
 800a22a:	bfb4      	ite	lt
 800a22c:	2000      	movlt	r0, #0
 800a22e:	f04f 30ff 	movge.w	r0, #4294967295
 800a232:	4770      	bx	lr
 800a234:	2301      	movs	r3, #1
 800a236:	e7ea      	b.n	800a20e <iso_year_adjust+0x32>
 800a238:	2817      	cmp	r0, #23
 800a23a:	d813      	bhi.n	800a264 <iso_year_adjust+0x88>
 800a23c:	e8df f000 	tbb	[pc, r0]
 800a240:	0c0c0c0c 	.word	0x0c0c0c0c
 800a244:	0c0c1212 	.word	0x0c0c1212
 800a248:	12121212 	.word	0x12121212
 800a24c:	12121212 	.word	0x12121212
 800a250:	0c0c1212 	.word	0x0c0c1212
 800a254:	0c0c1212 	.word	0x0c0c1212
 800a258:	f04f 30ff 	mov.w	r0, #4294967295
 800a25c:	4770      	bx	lr
 800a25e:	380a      	subs	r0, #10
 800a260:	2817      	cmp	r0, #23
 800a262:	d9e9      	bls.n	800a238 <iso_year_adjust+0x5c>
 800a264:	2000      	movs	r0, #0
 800a266:	4770      	bx	lr
 800a268:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800a26c:	4298      	cmp	r0, r3
 800a26e:	dc06      	bgt.n	800a27e <iso_year_adjust+0xa2>
 800a270:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800a274:	4298      	cmp	r0, r3
 800a276:	bfd4      	ite	le
 800a278:	2000      	movle	r0, #0
 800a27a:	2001      	movgt	r0, #1
 800a27c:	4770      	bx	lr
 800a27e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800a282:	3802      	subs	r0, #2
 800a284:	2815      	cmp	r0, #21
 800a286:	d8ed      	bhi.n	800a264 <iso_year_adjust+0x88>
 800a288:	2301      	movs	r3, #1
 800a28a:	4083      	lsls	r3, r0
 800a28c:	4803      	ldr	r0, [pc, #12]	; (800a29c <iso_year_adjust+0xc0>)
 800a28e:	4018      	ands	r0, r3
 800a290:	3800      	subs	r0, #0
 800a292:	bf18      	it	ne
 800a294:	2001      	movne	r0, #1
 800a296:	4770      	bx	lr
 800a298:	2001      	movs	r0, #1
 800a29a:	4770      	bx	lr
 800a29c:	002a001f 	.word	0x002a001f

0800a2a0 <__strftime.isra.0>:
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	b08f      	sub	sp, #60	; 0x3c
 800a2a6:	461e      	mov	r6, r3
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4607      	mov	r7, r0
 800a2ac:	460d      	mov	r5, r1
 800a2ae:	9302      	str	r3, [sp, #8]
 800a2b0:	461c      	mov	r4, r3
 800a2b2:	7813      	ldrb	r3, [r2, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 84ba 	beq.w	800ac2e <__strftime.isra.0+0x98e>
 800a2ba:	2b25      	cmp	r3, #37	; 0x25
 800a2bc:	d11f      	bne.n	800a2fe <__strftime.isra.0+0x5e>
 800a2be:	f892 b001 	ldrb.w	fp, [r2, #1]
 800a2c2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800a2c6:	d024      	beq.n	800a312 <__strftime.isra.0+0x72>
 800a2c8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800a2cc:	d021      	beq.n	800a312 <__strftime.isra.0+0x72>
 800a2ce:	f102 0801 	add.w	r8, r2, #1
 800a2d2:	f04f 0b00 	mov.w	fp, #0
 800a2d6:	f898 2000 	ldrb.w	r2, [r8]
 800a2da:	3a31      	subs	r2, #49	; 0x31
 800a2dc:	2a08      	cmp	r2, #8
 800a2de:	d81b      	bhi.n	800a318 <__strftime.isra.0+0x78>
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	220a      	movs	r2, #10
 800a2e4:	a906      	add	r1, sp, #24
 800a2e6:	f001 fc1d 	bl	800bb24 <strtoul>
 800a2ea:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a2ee:	4681      	mov	r9, r0
 800a2f0:	f898 2000 	ldrb.w	r2, [r8]
 800a2f4:	2a45      	cmp	r2, #69	; 0x45
 800a2f6:	d112      	bne.n	800a31e <__strftime.isra.0+0x7e>
 800a2f8:	f108 0801 	add.w	r8, r8, #1
 800a2fc:	e011      	b.n	800a322 <__strftime.isra.0+0x82>
 800a2fe:	1e69      	subs	r1, r5, #1
 800a300:	42a1      	cmp	r1, r4
 800a302:	d802      	bhi.n	800a30a <__strftime.isra.0+0x6a>
 800a304:	2400      	movs	r4, #0
 800a306:	f000 bc95 	b.w	800ac34 <__strftime.isra.0+0x994>
 800a30a:	553b      	strb	r3, [r7, r4]
 800a30c:	3201      	adds	r2, #1
 800a30e:	3401      	adds	r4, #1
 800a310:	e7cf      	b.n	800a2b2 <__strftime.isra.0+0x12>
 800a312:	f102 0802 	add.w	r8, r2, #2
 800a316:	e7de      	b.n	800a2d6 <__strftime.isra.0+0x36>
 800a318:	f04f 0900 	mov.w	r9, #0
 800a31c:	e7e8      	b.n	800a2f0 <__strftime.isra.0+0x50>
 800a31e:	2a4f      	cmp	r2, #79	; 0x4f
 800a320:	d0ea      	beq.n	800a2f8 <__strftime.isra.0+0x58>
 800a322:	f898 0000 	ldrb.w	r0, [r8]
 800a326:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800a32a:	2a55      	cmp	r2, #85	; 0x55
 800a32c:	d8ea      	bhi.n	800a304 <__strftime.isra.0+0x64>
 800a32e:	a301      	add	r3, pc, #4	; (adr r3, 800a334 <__strftime.isra.0+0x94>)
 800a330:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800a334:	0800ac23 	.word	0x0800ac23
 800a338:	0800a305 	.word	0x0800a305
 800a33c:	0800a305 	.word	0x0800a305
 800a340:	0800a305 	.word	0x0800a305
 800a344:	0800a305 	.word	0x0800a305
 800a348:	0800a305 	.word	0x0800a305
 800a34c:	0800a305 	.word	0x0800a305
 800a350:	0800a305 	.word	0x0800a305
 800a354:	0800a305 	.word	0x0800a305
 800a358:	0800a305 	.word	0x0800a305
 800a35c:	0800a305 	.word	0x0800a305
 800a360:	0800a305 	.word	0x0800a305
 800a364:	0800a305 	.word	0x0800a305
 800a368:	0800a305 	.word	0x0800a305
 800a36c:	0800a305 	.word	0x0800a305
 800a370:	0800a305 	.word	0x0800a305
 800a374:	0800a305 	.word	0x0800a305
 800a378:	0800a305 	.word	0x0800a305
 800a37c:	0800a305 	.word	0x0800a305
 800a380:	0800a305 	.word	0x0800a305
 800a384:	0800a305 	.word	0x0800a305
 800a388:	0800a305 	.word	0x0800a305
 800a38c:	0800a305 	.word	0x0800a305
 800a390:	0800a305 	.word	0x0800a305
 800a394:	0800a305 	.word	0x0800a305
 800a398:	0800a305 	.word	0x0800a305
 800a39c:	0800a305 	.word	0x0800a305
 800a3a0:	0800a305 	.word	0x0800a305
 800a3a4:	0800a4c9 	.word	0x0800a4c9
 800a3a8:	0800a521 	.word	0x0800a521
 800a3ac:	0800a58f 	.word	0x0800a58f
 800a3b0:	0800a62d 	.word	0x0800a62d
 800a3b4:	0800a305 	.word	0x0800a305
 800a3b8:	0800a679 	.word	0x0800a679
 800a3bc:	0800a765 	.word	0x0800a765
 800a3c0:	0800a83f 	.word	0x0800a83f
 800a3c4:	0800a84d 	.word	0x0800a84d
 800a3c8:	0800a305 	.word	0x0800a305
 800a3cc:	0800a305 	.word	0x0800a305
 800a3d0:	0800a305 	.word	0x0800a305
 800a3d4:	0800a87d 	.word	0x0800a87d
 800a3d8:	0800a305 	.word	0x0800a305
 800a3dc:	0800a305 	.word	0x0800a305
 800a3e0:	0800a891 	.word	0x0800a891
 800a3e4:	0800a305 	.word	0x0800a305
 800a3e8:	0800a8e3 	.word	0x0800a8e3
 800a3ec:	0800a9f7 	.word	0x0800a9f7
 800a3f0:	0800aa07 	.word	0x0800aa07
 800a3f4:	0800aa2f 	.word	0x0800aa2f
 800a3f8:	0800aa69 	.word	0x0800aa69
 800a3fc:	0800aadd 	.word	0x0800aadd
 800a400:	0800a587 	.word	0x0800a587
 800a404:	0800ab09 	.word	0x0800ab09
 800a408:	0800abd1 	.word	0x0800abd1
 800a40c:	0800a305 	.word	0x0800a305
 800a410:	0800a305 	.word	0x0800a305
 800a414:	0800a305 	.word	0x0800a305
 800a418:	0800a305 	.word	0x0800a305
 800a41c:	0800a305 	.word	0x0800a305
 800a420:	0800a305 	.word	0x0800a305
 800a424:	0800a48d 	.word	0x0800a48d
 800a428:	0800a4f7 	.word	0x0800a4f7
 800a42c:	0800a54d 	.word	0x0800a54d
 800a430:	0800a609 	.word	0x0800a609
 800a434:	0800a609 	.word	0x0800a609
 800a438:	0800a305 	.word	0x0800a305
 800a43c:	0800a6cb 	.word	0x0800a6cb
 800a440:	0800a4f7 	.word	0x0800a4f7
 800a444:	0800a305 	.word	0x0800a305
 800a448:	0800a86f 	.word	0x0800a86f
 800a44c:	0800a83f 	.word	0x0800a83f
 800a450:	0800a84d 	.word	0x0800a84d
 800a454:	0800a877 	.word	0x0800a877
 800a458:	0800a881 	.word	0x0800a881
 800a45c:	0800a305 	.word	0x0800a305
 800a460:	0800a891 	.word	0x0800a891
 800a464:	0800a305 	.word	0x0800a305
 800a468:	0800a577 	.word	0x0800a577
 800a46c:	0800a8f5 	.word	0x0800a8f5
 800a470:	0800a9fb 	.word	0x0800a9fb
 800a474:	0800aa15 	.word	0x0800aa15
 800a478:	0800a305 	.word	0x0800a305
 800a47c:	0800aacf 	.word	0x0800aacf
 800a480:	0800a57f 	.word	0x0800a57f
 800a484:	0800aaed 	.word	0x0800aaed
 800a488:	0800ab5b 	.word	0x0800ab5b
 800a48c:	69b3      	ldr	r3, [r6, #24]
 800a48e:	4aa9      	ldr	r2, [pc, #676]	; (800a734 <__strftime.isra.0+0x494>)
 800a490:	3318      	adds	r3, #24
 800a492:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800a496:	4648      	mov	r0, r9
 800a498:	f7f5 feac 	bl	80001f4 <strlen>
 800a49c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a4a0:	4420      	add	r0, r4
 800a4a2:	1e6b      	subs	r3, r5, #1
 800a4a4:	42a0      	cmp	r0, r4
 800a4a6:	d107      	bne.n	800a4b8 <__strftime.isra.0+0x218>
 800a4a8:	f898 3000 	ldrb.w	r3, [r8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 83be 	beq.w	800ac2e <__strftime.isra.0+0x98e>
 800a4b2:	f108 0201 	add.w	r2, r8, #1
 800a4b6:	e6fc      	b.n	800a2b2 <__strftime.isra.0+0x12>
 800a4b8:	42a3      	cmp	r3, r4
 800a4ba:	f67f af23 	bls.w	800a304 <__strftime.isra.0+0x64>
 800a4be:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800a4c2:	553a      	strb	r2, [r7, r4]
 800a4c4:	3401      	adds	r4, #1
 800a4c6:	e7ed      	b.n	800a4a4 <__strftime.isra.0+0x204>
 800a4c8:	69b2      	ldr	r2, [r6, #24]
 800a4ca:	4b9a      	ldr	r3, [pc, #616]	; (800a734 <__strftime.isra.0+0x494>)
 800a4cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a4d0:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800a4d4:	4648      	mov	r0, r9
 800a4d6:	f7f5 fe8d 	bl	80001f4 <strlen>
 800a4da:	f109 39ff 	add.w	r9, r9, #4294967295
 800a4de:	4420      	add	r0, r4
 800a4e0:	1e6b      	subs	r3, r5, #1
 800a4e2:	42a0      	cmp	r0, r4
 800a4e4:	d0e0      	beq.n	800a4a8 <__strftime.isra.0+0x208>
 800a4e6:	42a3      	cmp	r3, r4
 800a4e8:	f67f af0c 	bls.w	800a304 <__strftime.isra.0+0x64>
 800a4ec:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800a4f0:	553a      	strb	r2, [r7, r4]
 800a4f2:	3401      	adds	r4, #1
 800a4f4:	e7f5      	b.n	800a4e2 <__strftime.isra.0+0x242>
 800a4f6:	4b8f      	ldr	r3, [pc, #572]	; (800a734 <__strftime.isra.0+0x494>)
 800a4f8:	6932      	ldr	r2, [r6, #16]
 800a4fa:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800a4fe:	4648      	mov	r0, r9
 800a500:	f7f5 fe78 	bl	80001f4 <strlen>
 800a504:	f109 39ff 	add.w	r9, r9, #4294967295
 800a508:	4420      	add	r0, r4
 800a50a:	1e6b      	subs	r3, r5, #1
 800a50c:	42a0      	cmp	r0, r4
 800a50e:	d0cb      	beq.n	800a4a8 <__strftime.isra.0+0x208>
 800a510:	42a3      	cmp	r3, r4
 800a512:	f67f aef7 	bls.w	800a304 <__strftime.isra.0+0x64>
 800a516:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800a51a:	553a      	strb	r2, [r7, r4]
 800a51c:	3401      	adds	r4, #1
 800a51e:	e7f5      	b.n	800a50c <__strftime.isra.0+0x26c>
 800a520:	6933      	ldr	r3, [r6, #16]
 800a522:	4a84      	ldr	r2, [pc, #528]	; (800a734 <__strftime.isra.0+0x494>)
 800a524:	330c      	adds	r3, #12
 800a526:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800a52a:	4648      	mov	r0, r9
 800a52c:	f7f5 fe62 	bl	80001f4 <strlen>
 800a530:	f109 39ff 	add.w	r9, r9, #4294967295
 800a534:	4420      	add	r0, r4
 800a536:	1e6b      	subs	r3, r5, #1
 800a538:	42a0      	cmp	r0, r4
 800a53a:	d0b5      	beq.n	800a4a8 <__strftime.isra.0+0x208>
 800a53c:	42a3      	cmp	r3, r4
 800a53e:	f67f aee1 	bls.w	800a304 <__strftime.isra.0+0x64>
 800a542:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800a546:	553a      	strb	r2, [r7, r4]
 800a548:	3401      	adds	r4, #1
 800a54a:	e7f5      	b.n	800a538 <__strftime.isra.0+0x298>
 800a54c:	4b79      	ldr	r3, [pc, #484]	; (800a734 <__strftime.isra.0+0x494>)
 800a54e:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800a552:	4648      	mov	r0, r9
 800a554:	f7f5 fe4e 	bl	80001f4 <strlen>
 800a558:	f899 3000 	ldrb.w	r3, [r9]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0a3      	beq.n	800a4a8 <__strftime.isra.0+0x208>
 800a560:	4633      	mov	r3, r6
 800a562:	464a      	mov	r2, r9
 800a564:	1b29      	subs	r1, r5, r4
 800a566:	1938      	adds	r0, r7, r4
 800a568:	f7ff fe9a 	bl	800a2a0 <__strftime.isra.0>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	f77f aec9 	ble.w	800a304 <__strftime.isra.0+0x64>
 800a572:	4404      	add	r4, r0
 800a574:	e798      	b.n	800a4a8 <__strftime.isra.0+0x208>
 800a576:	4b6f      	ldr	r3, [pc, #444]	; (800a734 <__strftime.isra.0+0x494>)
 800a578:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800a57c:	e7e9      	b.n	800a552 <__strftime.isra.0+0x2b2>
 800a57e:	4b6d      	ldr	r3, [pc, #436]	; (800a734 <__strftime.isra.0+0x494>)
 800a580:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800a584:	e7e5      	b.n	800a552 <__strftime.isra.0+0x2b2>
 800a586:	4b6b      	ldr	r3, [pc, #428]	; (800a734 <__strftime.isra.0+0x494>)
 800a588:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800a58c:	e7e1      	b.n	800a552 <__strftime.isra.0+0x2b2>
 800a58e:	496a      	ldr	r1, [pc, #424]	; (800a738 <__strftime.isra.0+0x498>)
 800a590:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800a594:	458a      	cmp	sl, r1
 800a596:	bfac      	ite	ge
 800a598:	2100      	movge	r1, #0
 800a59a:	2101      	movlt	r1, #1
 800a59c:	f1ba 0f00 	cmp.w	sl, #0
 800a5a0:	db11      	blt.n	800a5c6 <__strftime.isra.0+0x326>
 800a5a2:	2064      	movs	r0, #100	; 0x64
 800a5a4:	fb9a f0f0 	sdiv	r0, sl, r0
 800a5a8:	3013      	adds	r0, #19
 800a5aa:	f1bb 0f00 	cmp.w	fp, #0
 800a5ae:	d014      	beq.n	800a5da <__strftime.isra.0+0x33a>
 800a5b0:	2863      	cmp	r0, #99	; 0x63
 800a5b2:	dd27      	ble.n	800a604 <__strftime.isra.0+0x364>
 800a5b4:	4b61      	ldr	r3, [pc, #388]	; (800a73c <__strftime.isra.0+0x49c>)
 800a5b6:	4a62      	ldr	r2, [pc, #392]	; (800a740 <__strftime.isra.0+0x4a0>)
 800a5b8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800a5bc:	bf18      	it	ne
 800a5be:	461a      	movne	r2, r3
 800a5c0:	f8df c198 	ldr.w	ip, [pc, #408]	; 800a75c <__strftime.isra.0+0x4bc>
 800a5c4:	e00c      	b.n	800a5e0 <__strftime.isra.0+0x340>
 800a5c6:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800a5ca:	9103      	str	r1, [sp, #12]
 800a5cc:	f001 fd02 	bl	800bfd4 <abs>
 800a5d0:	2264      	movs	r2, #100	; 0x64
 800a5d2:	9903      	ldr	r1, [sp, #12]
 800a5d4:	fb90 f0f2 	sdiv	r0, r0, r2
 800a5d8:	e7e7      	b.n	800a5aa <__strftime.isra.0+0x30a>
 800a5da:	4a58      	ldr	r2, [pc, #352]	; (800a73c <__strftime.isra.0+0x49c>)
 800a5dc:	f8df c180 	ldr.w	ip, [pc, #384]	; 800a760 <__strftime.isra.0+0x4c0>
 800a5e0:	4b58      	ldr	r3, [pc, #352]	; (800a744 <__strftime.isra.0+0x4a4>)
 800a5e2:	9001      	str	r0, [sp, #4]
 800a5e4:	f1b9 0f02 	cmp.w	r9, #2
 800a5e8:	bf2c      	ite	cs
 800a5ea:	ebc1 0109 	rsbcs	r1, r1, r9
 800a5ee:	f1c1 0102 	rsbcc	r1, r1, #2
 800a5f2:	9100      	str	r1, [sp, #0]
 800a5f4:	4950      	ldr	r1, [pc, #320]	; (800a738 <__strftime.isra.0+0x498>)
 800a5f6:	458a      	cmp	sl, r1
 800a5f8:	bfa8      	it	ge
 800a5fa:	4613      	movge	r3, r2
 800a5fc:	4662      	mov	r2, ip
 800a5fe:	1b29      	subs	r1, r5, r4
 800a600:	1938      	adds	r0, r7, r4
 800a602:	e028      	b.n	800a656 <__strftime.isra.0+0x3b6>
 800a604:	4a4d      	ldr	r2, [pc, #308]	; (800a73c <__strftime.isra.0+0x49c>)
 800a606:	e7db      	b.n	800a5c0 <__strftime.isra.0+0x320>
 800a608:	494f      	ldr	r1, [pc, #316]	; (800a748 <__strftime.isra.0+0x4a8>)
 800a60a:	4a50      	ldr	r2, [pc, #320]	; (800a74c <__strftime.isra.0+0x4ac>)
 800a60c:	68f3      	ldr	r3, [r6, #12]
 800a60e:	2864      	cmp	r0, #100	; 0x64
 800a610:	bf08      	it	eq
 800a612:	460a      	moveq	r2, r1
 800a614:	1b29      	subs	r1, r5, r4
 800a616:	1938      	adds	r0, r7, r4
 800a618:	f7ff fd04 	bl	800a024 <sniprintf>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f6ff ae71 	blt.w	800a304 <__strftime.isra.0+0x64>
 800a622:	4404      	add	r4, r0
 800a624:	42a5      	cmp	r5, r4
 800a626:	f63f af3f 	bhi.w	800a4a8 <__strftime.isra.0+0x208>
 800a62a:	e66b      	b.n	800a304 <__strftime.isra.0+0x64>
 800a62c:	6970      	ldr	r0, [r6, #20]
 800a62e:	6933      	ldr	r3, [r6, #16]
 800a630:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800a634:	2800      	cmp	r0, #0
 800a636:	eb07 0904 	add.w	r9, r7, r4
 800a63a:	eba5 0104 	sub.w	r1, r5, r4
 800a63e:	f103 0301 	add.w	r3, r3, #1
 800a642:	db0b      	blt.n	800a65c <__strftime.isra.0+0x3bc>
 800a644:	2264      	movs	r2, #100	; 0x64
 800a646:	fb90 fcf2 	sdiv	ip, r0, r2
 800a64a:	fb02 001c 	mls	r0, r2, ip, r0
 800a64e:	4a40      	ldr	r2, [pc, #256]	; (800a750 <__strftime.isra.0+0x4b0>)
 800a650:	e9cd a000 	strd	sl, r0, [sp]
 800a654:	4648      	mov	r0, r9
 800a656:	f7ff fce5 	bl	800a024 <sniprintf>
 800a65a:	e7df      	b.n	800a61c <__strftime.isra.0+0x37c>
 800a65c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800a660:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800a664:	f001 fcb6 	bl	800bfd4 <abs>
 800a668:	2264      	movs	r2, #100	; 0x64
 800a66a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 800a66e:	fb90 fcf2 	sdiv	ip, r0, r2
 800a672:	fb0c 0012 	mls	r0, ip, r2, r0
 800a676:	e7ea      	b.n	800a64e <__strftime.isra.0+0x3ae>
 800a678:	2225      	movs	r2, #37	; 0x25
 800a67a:	f88d 2018 	strb.w	r2, [sp, #24]
 800a67e:	f1bb 0f00 	cmp.w	fp, #0
 800a682:	d011      	beq.n	800a6a8 <__strftime.isra.0+0x408>
 800a684:	f1b9 0f06 	cmp.w	r9, #6
 800a688:	bf38      	it	cc
 800a68a:	f04f 0906 	movcc.w	r9, #6
 800a68e:	f1b9 0306 	subs.w	r3, r9, #6
 800a692:	f88d b019 	strb.w	fp, [sp, #25]
 800a696:	d10c      	bne.n	800a6b2 <__strftime.isra.0+0x412>
 800a698:	f10d 001a 	add.w	r0, sp, #26
 800a69c:	492d      	ldr	r1, [pc, #180]	; (800a754 <__strftime.isra.0+0x4b4>)
 800a69e:	f7ff fd95 	bl	800a1cc <strcpy>
 800a6a2:	4633      	mov	r3, r6
 800a6a4:	aa06      	add	r2, sp, #24
 800a6a6:	e75d      	b.n	800a564 <__strftime.isra.0+0x2c4>
 800a6a8:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800a6ac:	f04f 090a 	mov.w	r9, #10
 800a6b0:	e7ed      	b.n	800a68e <__strftime.isra.0+0x3ee>
 800a6b2:	4a29      	ldr	r2, [pc, #164]	; (800a758 <__strftime.isra.0+0x4b8>)
 800a6b4:	211e      	movs	r1, #30
 800a6b6:	f10d 001a 	add.w	r0, sp, #26
 800a6ba:	f7ff fcb3 	bl	800a024 <sniprintf>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	ddea      	ble.n	800a698 <__strftime.isra.0+0x3f8>
 800a6c2:	f10d 031a 	add.w	r3, sp, #26
 800a6c6:	4418      	add	r0, r3
 800a6c8:	e7e8      	b.n	800a69c <__strftime.isra.0+0x3fc>
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7ff fd86 	bl	800a1dc <iso_year_adjust>
 800a6d0:	4681      	mov	r9, r0
 800a6d2:	6970      	ldr	r0, [r6, #20]
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	db11      	blt.n	800a6fc <__strftime.isra.0+0x45c>
 800a6d8:	2364      	movs	r3, #100	; 0x64
 800a6da:	fb90 f2f3 	sdiv	r2, r0, r3
 800a6de:	fb03 0012 	mls	r0, r3, r2, r0
 800a6e2:	2264      	movs	r2, #100	; 0x64
 800a6e4:	4481      	add	r9, r0
 800a6e6:	fb99 f3f2 	sdiv	r3, r9, r2
 800a6ea:	fb02 9913 	mls	r9, r2, r3, r9
 800a6ee:	4491      	add	r9, r2
 800a6f0:	fbb9 f3f2 	udiv	r3, r9, r2
 800a6f4:	fb02 9313 	mls	r3, r2, r3, r9
 800a6f8:	4a13      	ldr	r2, [pc, #76]	; (800a748 <__strftime.isra.0+0x4a8>)
 800a6fa:	e78b      	b.n	800a614 <__strftime.isra.0+0x374>
 800a6fc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800a700:	f001 fc68 	bl	800bfd4 <abs>
 800a704:	2364      	movs	r3, #100	; 0x64
 800a706:	f1b9 0f00 	cmp.w	r9, #0
 800a70a:	fb90 f2f3 	sdiv	r2, r0, r3
 800a70e:	fb02 0013 	mls	r0, r2, r3, r0
 800a712:	da07      	bge.n	800a724 <__strftime.isra.0+0x484>
 800a714:	6972      	ldr	r2, [r6, #20]
 800a716:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800a71a:	429a      	cmp	r2, r3
 800a71c:	bfb8      	it	lt
 800a71e:	f04f 0901 	movlt.w	r9, #1
 800a722:	e7de      	b.n	800a6e2 <__strftime.isra.0+0x442>
 800a724:	d0dd      	beq.n	800a6e2 <__strftime.isra.0+0x442>
 800a726:	6972      	ldr	r2, [r6, #20]
 800a728:	4b03      	ldr	r3, [pc, #12]	; (800a738 <__strftime.isra.0+0x498>)
 800a72a:	429a      	cmp	r2, r3
 800a72c:	bfb8      	it	lt
 800a72e:	f04f 39ff 	movlt.w	r9, #4294967295
 800a732:	e7d6      	b.n	800a6e2 <__strftime.isra.0+0x442>
 800a734:	0800ff1c 	.word	0x0800ff1c
 800a738:	fffff894 	.word	0xfffff894
 800a73c:	0801008f 	.word	0x0801008f
 800a740:	0800fd56 	.word	0x0800fd56
 800a744:	080103ee 	.word	0x080103ee
 800a748:	0800fd66 	.word	0x0800fd66
 800a74c:	0800fd58 	.word	0x0800fd58
 800a750:	0800fd5c 	.word	0x0800fd5c
 800a754:	0800fd6f 	.word	0x0800fd6f
 800a758:	0800fd6b 	.word	0x0800fd6b
 800a75c:	0800fd4e 	.word	0x0800fd4e
 800a760:	0800fd47 	.word	0x0800fd47
 800a764:	6971      	ldr	r1, [r6, #20]
 800a766:	4ab6      	ldr	r2, [pc, #728]	; (800aa40 <__strftime.isra.0+0x7a0>)
 800a768:	4291      	cmp	r1, r2
 800a76a:	bfac      	ite	ge
 800a76c:	2300      	movge	r3, #0
 800a76e:	2301      	movlt	r3, #1
 800a770:	4630      	mov	r0, r6
 800a772:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800a776:	f7ff fd31 	bl	800a1dc <iso_year_adjust>
 800a77a:	9904      	ldr	r1, [sp, #16]
 800a77c:	2900      	cmp	r1, #0
 800a77e:	4682      	mov	sl, r0
 800a780:	db2c      	blt.n	800a7dc <__strftime.isra.0+0x53c>
 800a782:	2264      	movs	r2, #100	; 0x64
 800a784:	fb91 f2f2 	sdiv	r2, r1, r2
 800a788:	3213      	adds	r2, #19
 800a78a:	6970      	ldr	r0, [r6, #20]
 800a78c:	2800      	cmp	r0, #0
 800a78e:	db30      	blt.n	800a7f2 <__strftime.isra.0+0x552>
 800a790:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800a794:	fb90 fefc 	sdiv	lr, r0, ip
 800a798:	fb0c 001e 	mls	r0, ip, lr, r0
 800a79c:	f1ba 0f00 	cmp.w	sl, #0
 800a7a0:	da36      	bge.n	800a810 <__strftime.isra.0+0x570>
 800a7a2:	6971      	ldr	r1, [r6, #20]
 800a7a4:	4ba7      	ldr	r3, [pc, #668]	; (800aa44 <__strftime.isra.0+0x7a4>)
 800a7a6:	4299      	cmp	r1, r3
 800a7a8:	db3d      	blt.n	800a826 <__strftime.isra.0+0x586>
 800a7aa:	4482      	add	sl, r0
 800a7ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a7b0:	d13e      	bne.n	800a830 <__strftime.isra.0+0x590>
 800a7b2:	3a01      	subs	r2, #1
 800a7b4:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	2064      	movs	r0, #100	; 0x64
 800a7bc:	fb00 aa02 	mla	sl, r0, r2, sl
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 81ad 	beq.w	800ab20 <__strftime.isra.0+0x880>
 800a7c6:	222d      	movs	r2, #45	; 0x2d
 800a7c8:	f88d 2018 	strb.w	r2, [sp, #24]
 800a7cc:	f1b9 0f00 	cmp.w	r9, #0
 800a7d0:	d001      	beq.n	800a7d6 <__strftime.isra.0+0x536>
 800a7d2:	f109 39ff 	add.w	r9, r9, #4294967295
 800a7d6:	f10d 0219 	add.w	r2, sp, #25
 800a7da:	e1ac      	b.n	800ab36 <__strftime.isra.0+0x896>
 800a7dc:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800a7e0:	9104      	str	r1, [sp, #16]
 800a7e2:	f001 fbf7 	bl	800bfd4 <abs>
 800a7e6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800a7ea:	9904      	ldr	r1, [sp, #16]
 800a7ec:	fb90 f2fc 	sdiv	r2, r0, ip
 800a7f0:	e7cb      	b.n	800a78a <__strftime.isra.0+0x4ea>
 800a7f2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800a7f6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a7fa:	f001 fbeb 	bl	800bfd4 <abs>
 800a7fe:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800a802:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800a806:	fb90 fefc 	sdiv	lr, r0, ip
 800a80a:	fb0e 001c 	mls	r0, lr, ip, r0
 800a80e:	e7c5      	b.n	800a79c <__strftime.isra.0+0x4fc>
 800a810:	d0cb      	beq.n	800a7aa <__strftime.isra.0+0x50a>
 800a812:	4b8b      	ldr	r3, [pc, #556]	; (800aa40 <__strftime.isra.0+0x7a0>)
 800a814:	4299      	cmp	r1, r3
 800a816:	bfb4      	ite	lt
 800a818:	2301      	movlt	r3, #1
 800a81a:	2300      	movge	r3, #0
 800a81c:	9303      	str	r3, [sp, #12]
 800a81e:	bfb8      	it	lt
 800a820:	f04f 3aff 	movlt.w	sl, #4294967295
 800a824:	e7c1      	b.n	800a7aa <__strftime.isra.0+0x50a>
 800a826:	f04f 0a01 	mov.w	sl, #1
 800a82a:	f8cd a00c 	str.w	sl, [sp, #12]
 800a82e:	e7bc      	b.n	800a7aa <__strftime.isra.0+0x50a>
 800a830:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800a834:	bf04      	itt	eq
 800a836:	3201      	addeq	r2, #1
 800a838:	f04f 0a00 	moveq.w	sl, #0
 800a83c:	e7bc      	b.n	800a7b8 <__strftime.isra.0+0x518>
 800a83e:	4982      	ldr	r1, [pc, #520]	; (800aa48 <__strftime.isra.0+0x7a8>)
 800a840:	4a82      	ldr	r2, [pc, #520]	; (800aa4c <__strftime.isra.0+0x7ac>)
 800a842:	68b3      	ldr	r3, [r6, #8]
 800a844:	286b      	cmp	r0, #107	; 0x6b
 800a846:	bf08      	it	eq
 800a848:	460a      	moveq	r2, r1
 800a84a:	e6e3      	b.n	800a614 <__strftime.isra.0+0x374>
 800a84c:	68b3      	ldr	r3, [r6, #8]
 800a84e:	b163      	cbz	r3, 800a86a <__strftime.isra.0+0x5ca>
 800a850:	2b0c      	cmp	r3, #12
 800a852:	d004      	beq.n	800a85e <__strftime.isra.0+0x5be>
 800a854:	210c      	movs	r1, #12
 800a856:	fb93 f2f1 	sdiv	r2, r3, r1
 800a85a:	fb01 3312 	mls	r3, r1, r2, r3
 800a85e:	497b      	ldr	r1, [pc, #492]	; (800aa4c <__strftime.isra.0+0x7ac>)
 800a860:	4a79      	ldr	r2, [pc, #484]	; (800aa48 <__strftime.isra.0+0x7a8>)
 800a862:	2849      	cmp	r0, #73	; 0x49
 800a864:	bf08      	it	eq
 800a866:	460a      	moveq	r2, r1
 800a868:	e6d4      	b.n	800a614 <__strftime.isra.0+0x374>
 800a86a:	230c      	movs	r3, #12
 800a86c:	e7f7      	b.n	800a85e <__strftime.isra.0+0x5be>
 800a86e:	69f3      	ldr	r3, [r6, #28]
 800a870:	4a77      	ldr	r2, [pc, #476]	; (800aa50 <__strftime.isra.0+0x7b0>)
 800a872:	3301      	adds	r3, #1
 800a874:	e6ce      	b.n	800a614 <__strftime.isra.0+0x374>
 800a876:	6933      	ldr	r3, [r6, #16]
 800a878:	3301      	adds	r3, #1
 800a87a:	e73d      	b.n	800a6f8 <__strftime.isra.0+0x458>
 800a87c:	6873      	ldr	r3, [r6, #4]
 800a87e:	e73b      	b.n	800a6f8 <__strftime.isra.0+0x458>
 800a880:	1e6b      	subs	r3, r5, #1
 800a882:	429c      	cmp	r4, r3
 800a884:	f4bf ad3e 	bcs.w	800a304 <__strftime.isra.0+0x64>
 800a888:	230a      	movs	r3, #10
 800a88a:	553b      	strb	r3, [r7, r4]
 800a88c:	3401      	adds	r4, #1
 800a88e:	e60b      	b.n	800a4a8 <__strftime.isra.0+0x208>
 800a890:	68b3      	ldr	r3, [r6, #8]
 800a892:	2b0b      	cmp	r3, #11
 800a894:	4b6f      	ldr	r3, [pc, #444]	; (800aa54 <__strftime.isra.0+0x7b4>)
 800a896:	bfd4      	ite	le
 800a898:	2200      	movle	r2, #0
 800a89a:	2201      	movgt	r2, #1
 800a89c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a8a0:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800a8a4:	4648      	mov	r0, r9
 800a8a6:	f7f5 fca5 	bl	80001f4 <strlen>
 800a8aa:	f109 32ff 	add.w	r2, r9, #4294967295
 800a8ae:	4420      	add	r0, r4
 800a8b0:	f105 3cff 	add.w	ip, r5, #4294967295
 800a8b4:	42a0      	cmp	r0, r4
 800a8b6:	f43f adf7 	beq.w	800a4a8 <__strftime.isra.0+0x208>
 800a8ba:	45a4      	cmp	ip, r4
 800a8bc:	f67f ad22 	bls.w	800a304 <__strftime.isra.0+0x64>
 800a8c0:	f898 1000 	ldrb.w	r1, [r8]
 800a8c4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a8c8:	2950      	cmp	r1, #80	; 0x50
 800a8ca:	d107      	bne.n	800a8dc <__strftime.isra.0+0x63c>
 800a8cc:	4962      	ldr	r1, [pc, #392]	; (800aa58 <__strftime.isra.0+0x7b8>)
 800a8ce:	5cc9      	ldrb	r1, [r1, r3]
 800a8d0:	f001 0103 	and.w	r1, r1, #3
 800a8d4:	2901      	cmp	r1, #1
 800a8d6:	bf08      	it	eq
 800a8d8:	3320      	addeq	r3, #32
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	553b      	strb	r3, [r7, r4]
 800a8de:	3401      	adds	r4, #1
 800a8e0:	e7e8      	b.n	800a8b4 <__strftime.isra.0+0x614>
 800a8e2:	6873      	ldr	r3, [r6, #4]
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	4a5d      	ldr	r2, [pc, #372]	; (800aa5c <__strftime.isra.0+0x7bc>)
 800a8e8:	68b3      	ldr	r3, [r6, #8]
 800a8ea:	1b29      	subs	r1, r5, r4
 800a8ec:	1938      	adds	r0, r7, r4
 800a8ee:	f7ff fb99 	bl	800a024 <sniprintf>
 800a8f2:	e693      	b.n	800a61c <__strftime.isra.0+0x37c>
 800a8f4:	6a33      	ldr	r3, [r6, #32]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	db7a      	blt.n	800a9f0 <__strftime.isra.0+0x750>
 800a8fa:	f001 f9c7 	bl	800bc8c <__tz_lock>
 800a8fe:	9b02      	ldr	r3, [sp, #8]
 800a900:	b90b      	cbnz	r3, 800a906 <__strftime.isra.0+0x666>
 800a902:	f001 f9cf 	bl	800bca4 <_tzset_unlocked>
 800a906:	f002 fdeb 	bl	800d4e0 <__gettzinfo>
 800a90a:	6a33      	ldr	r3, [r6, #32]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	bfd4      	ite	le
 800a910:	2200      	movle	r2, #0
 800a912:	2201      	movgt	r2, #1
 800a914:	2328      	movs	r3, #40	; 0x28
 800a916:	fb02 3303 	mla	r3, r2, r3, r3
 800a91a:	58c3      	ldr	r3, [r0, r3]
 800a91c:	f1c3 0900 	rsb	r9, r3, #0
 800a920:	f001 f9ba 	bl	800bc98 <__tz_unlock>
 800a924:	2301      	movs	r3, #1
 800a926:	9302      	str	r3, [sp, #8]
 800a928:	6972      	ldr	r2, [r6, #20]
 800a92a:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800a92e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800a932:	f16c 0c00 	sbc.w	ip, ip, #0
 800a936:	f1bc 0f00 	cmp.w	ip, #0
 800a93a:	eba5 0104 	sub.w	r1, r5, r4
 800a93e:	eb07 0004 	add.w	r0, r7, r4
 800a942:	da02      	bge.n	800a94a <__strftime.isra.0+0x6aa>
 800a944:	3303      	adds	r3, #3
 800a946:	f14c 0c00 	adc.w	ip, ip, #0
 800a94a:	089b      	lsrs	r3, r3, #2
 800a94c:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800a950:	f102 3aff 	add.w	sl, r2, #4294967295
 800a954:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800a958:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800a95c:	fb9a fefe 	sdiv	lr, sl, lr
 800a960:	ebb3 030e 	subs.w	r3, r3, lr
 800a964:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800a968:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800a96c:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800a970:	fb9a fefe 	sdiv	lr, sl, lr
 800a974:	eb13 030e 	adds.w	r3, r3, lr
 800a978:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800a97c:	3a46      	subs	r2, #70	; 0x46
 800a97e:	f240 1c6d 	movw	ip, #365	; 0x16d
 800a982:	fb0c f202 	mul.w	r2, ip, r2
 800a986:	189b      	adds	r3, r3, r2
 800a988:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800a98c:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800a990:	f04f 0c18 	mov.w	ip, #24
 800a994:	eb13 030e 	adds.w	r3, r3, lr
 800a998:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800a99c:	fba3 3e0c 	umull	r3, lr, r3, ip
 800a9a0:	fb0c e202 	mla	r2, ip, r2, lr
 800a9a4:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800a9a8:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800a9ac:	eb13 030e 	adds.w	r3, r3, lr
 800a9b0:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800a9b4:	fba3 320c 	umull	r3, r2, r3, ip
 800a9b8:	fb0c 220e 	mla	r2, ip, lr, r2
 800a9bc:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800a9c0:	eb13 030e 	adds.w	r3, r3, lr
 800a9c4:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800a9c8:	fba3 3e0c 	umull	r3, lr, r3, ip
 800a9cc:	fb0c e202 	mla	r2, ip, r2, lr
 800a9d0:	f8d6 e000 	ldr.w	lr, [r6]
 800a9d4:	eb13 030e 	adds.w	r3, r3, lr
 800a9d8:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800a9dc:	ebb3 0309 	subs.w	r3, r3, r9
 800a9e0:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800a9e4:	e9cd 3200 	strd	r3, r2, [sp]
 800a9e8:	4a1d      	ldr	r2, [pc, #116]	; (800aa60 <__strftime.isra.0+0x7c0>)
 800a9ea:	f7ff fb1b 	bl	800a024 <sniprintf>
 800a9ee:	e615      	b.n	800a61c <__strftime.isra.0+0x37c>
 800a9f0:	f04f 0900 	mov.w	r9, #0
 800a9f4:	e798      	b.n	800a928 <__strftime.isra.0+0x688>
 800a9f6:	6833      	ldr	r3, [r6, #0]
 800a9f8:	e67e      	b.n	800a6f8 <__strftime.isra.0+0x458>
 800a9fa:	1e6b      	subs	r3, r5, #1
 800a9fc:	429c      	cmp	r4, r3
 800a9fe:	f4bf ac81 	bcs.w	800a304 <__strftime.isra.0+0x64>
 800aa02:	2309      	movs	r3, #9
 800aa04:	e741      	b.n	800a88a <__strftime.isra.0+0x5ea>
 800aa06:	6833      	ldr	r3, [r6, #0]
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	6873      	ldr	r3, [r6, #4]
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	4a15      	ldr	r2, [pc, #84]	; (800aa64 <__strftime.isra.0+0x7c4>)
 800aa10:	68b3      	ldr	r3, [r6, #8]
 800aa12:	e5f4      	b.n	800a5fe <__strftime.isra.0+0x35e>
 800aa14:	1e6b      	subs	r3, r5, #1
 800aa16:	429c      	cmp	r4, r3
 800aa18:	f4bf ac74 	bcs.w	800a304 <__strftime.isra.0+0x64>
 800aa1c:	69b3      	ldr	r3, [r6, #24]
 800aa1e:	1c62      	adds	r2, r4, #1
 800aa20:	b91b      	cbnz	r3, 800aa2a <__strftime.isra.0+0x78a>
 800aa22:	2337      	movs	r3, #55	; 0x37
 800aa24:	553b      	strb	r3, [r7, r4]
 800aa26:	4614      	mov	r4, r2
 800aa28:	e53e      	b.n	800a4a8 <__strftime.isra.0+0x208>
 800aa2a:	3330      	adds	r3, #48	; 0x30
 800aa2c:	e7fa      	b.n	800aa24 <__strftime.isra.0+0x784>
 800aa2e:	69f3      	ldr	r3, [r6, #28]
 800aa30:	69b2      	ldr	r2, [r6, #24]
 800aa32:	3307      	adds	r3, #7
 800aa34:	1a9b      	subs	r3, r3, r2
 800aa36:	2207      	movs	r2, #7
 800aa38:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa3c:	e65c      	b.n	800a6f8 <__strftime.isra.0+0x458>
 800aa3e:	bf00      	nop
 800aa40:	fffff894 	.word	0xfffff894
 800aa44:	fffff895 	.word	0xfffff895
 800aa48:	0800fd58 	.word	0x0800fd58
 800aa4c:	0800fd66 	.word	0x0800fd66
 800aa50:	0800fd7b 	.word	0x0800fd7b
 800aa54:	0800ff1c 	.word	0x0800ff1c
 800aa58:	08010091 	.word	0x08010091
 800aa5c:	0800fd8a 	.word	0x0800fd8a
 800aa60:	0800fd80 	.word	0x0800fd80
 800aa64:	0800fd85 	.word	0x0800fd85
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f7ff fbb7 	bl	800a1dc <iso_year_adjust>
 800aa6e:	69b2      	ldr	r2, [r6, #24]
 800aa70:	b132      	cbz	r2, 800aa80 <__strftime.isra.0+0x7e0>
 800aa72:	3a01      	subs	r2, #1
 800aa74:	2800      	cmp	r0, #0
 800aa76:	dc28      	bgt.n	800aaca <__strftime.isra.0+0x82a>
 800aa78:	69f3      	ldr	r3, [r6, #28]
 800aa7a:	d103      	bne.n	800aa84 <__strftime.isra.0+0x7e4>
 800aa7c:	330a      	adds	r3, #10
 800aa7e:	e7d9      	b.n	800aa34 <__strftime.isra.0+0x794>
 800aa80:	2206      	movs	r2, #6
 800aa82:	e7f7      	b.n	800aa74 <__strftime.isra.0+0x7d4>
 800aa84:	6971      	ldr	r1, [r6, #20]
 800aa86:	2900      	cmp	r1, #0
 800aa88:	eba2 0203 	sub.w	r2, r2, r3
 800aa8c:	f240 736b 	movw	r3, #1899	; 0x76b
 800aa90:	bfa8      	it	ge
 800aa92:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800aa96:	440b      	add	r3, r1
 800aa98:	0799      	lsls	r1, r3, #30
 800aa9a:	d105      	bne.n	800aaa8 <__strftime.isra.0+0x808>
 800aa9c:	2064      	movs	r0, #100	; 0x64
 800aa9e:	fb93 f1f0 	sdiv	r1, r3, r0
 800aaa2:	fb00 3111 	mls	r1, r0, r1, r3
 800aaa6:	b971      	cbnz	r1, 800aac6 <__strftime.isra.0+0x826>
 800aaa8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800aaac:	fb93 f0f1 	sdiv	r0, r3, r1
 800aab0:	fb01 3310 	mls	r3, r1, r0, r3
 800aab4:	fab3 f383 	clz	r3, r3
 800aab8:	095b      	lsrs	r3, r3, #5
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	2b05      	cmp	r3, #5
 800aabe:	bfb4      	ite	lt
 800aac0:	2335      	movlt	r3, #53	; 0x35
 800aac2:	2334      	movge	r3, #52	; 0x34
 800aac4:	e618      	b.n	800a6f8 <__strftime.isra.0+0x458>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e7f7      	b.n	800aaba <__strftime.isra.0+0x81a>
 800aaca:	2301      	movs	r3, #1
 800aacc:	e614      	b.n	800a6f8 <__strftime.isra.0+0x458>
 800aace:	1e6b      	subs	r3, r5, #1
 800aad0:	429c      	cmp	r4, r3
 800aad2:	f4bf ac17 	bcs.w	800a304 <__strftime.isra.0+0x64>
 800aad6:	69b3      	ldr	r3, [r6, #24]
 800aad8:	3330      	adds	r3, #48	; 0x30
 800aada:	e6d6      	b.n	800a88a <__strftime.isra.0+0x5ea>
 800aadc:	69b2      	ldr	r2, [r6, #24]
 800aade:	b11a      	cbz	r2, 800aae8 <__strftime.isra.0+0x848>
 800aae0:	3a01      	subs	r2, #1
 800aae2:	69f3      	ldr	r3, [r6, #28]
 800aae4:	3307      	adds	r3, #7
 800aae6:	e7a5      	b.n	800aa34 <__strftime.isra.0+0x794>
 800aae8:	2206      	movs	r2, #6
 800aaea:	e7fa      	b.n	800aae2 <__strftime.isra.0+0x842>
 800aaec:	6970      	ldr	r0, [r6, #20]
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	db05      	blt.n	800aafe <__strftime.isra.0+0x85e>
 800aaf2:	2364      	movs	r3, #100	; 0x64
 800aaf4:	fb90 f2f3 	sdiv	r2, r0, r3
 800aaf8:	fb02 0313 	mls	r3, r2, r3, r0
 800aafc:	e5fc      	b.n	800a6f8 <__strftime.isra.0+0x458>
 800aafe:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800ab02:	f001 fa67 	bl	800bfd4 <abs>
 800ab06:	e7f4      	b.n	800aaf2 <__strftime.isra.0+0x852>
 800ab08:	6972      	ldr	r2, [r6, #20]
 800ab0a:	494c      	ldr	r1, [pc, #304]	; (800ac3c <__strftime.isra.0+0x99c>)
 800ab0c:	428a      	cmp	r2, r1
 800ab0e:	da05      	bge.n	800ab1c <__strftime.isra.0+0x87c>
 800ab10:	202d      	movs	r0, #45	; 0x2d
 800ab12:	f88d 0018 	strb.w	r0, [sp, #24]
 800ab16:	eba1 0a02 	sub.w	sl, r1, r2
 800ab1a:	e657      	b.n	800a7cc <__strftime.isra.0+0x52c>
 800ab1c:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800ab20:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800ab24:	d106      	bne.n	800ab34 <__strftime.isra.0+0x894>
 800ab26:	f242 720f 	movw	r2, #9999	; 0x270f
 800ab2a:	4592      	cmp	sl, r2
 800ab2c:	d902      	bls.n	800ab34 <__strftime.isra.0+0x894>
 800ab2e:	f88d b018 	strb.w	fp, [sp, #24]
 800ab32:	e64b      	b.n	800a7cc <__strftime.isra.0+0x52c>
 800ab34:	aa06      	add	r2, sp, #24
 800ab36:	2125      	movs	r1, #37	; 0x25
 800ab38:	7011      	strb	r1, [r2, #0]
 800ab3a:	f1bb 0f00 	cmp.w	fp, #0
 800ab3e:	d108      	bne.n	800ab52 <__strftime.isra.0+0x8b2>
 800ab40:	1c50      	adds	r0, r2, #1
 800ab42:	493f      	ldr	r1, [pc, #252]	; (800ac40 <__strftime.isra.0+0x9a0>)
 800ab44:	f7ff fb42 	bl	800a1cc <strcpy>
 800ab48:	f8cd a000 	str.w	sl, [sp]
 800ab4c:	464b      	mov	r3, r9
 800ab4e:	aa06      	add	r2, sp, #24
 800ab50:	e6cb      	b.n	800a8ea <__strftime.isra.0+0x64a>
 800ab52:	2330      	movs	r3, #48	; 0x30
 800ab54:	1c90      	adds	r0, r2, #2
 800ab56:	7053      	strb	r3, [r2, #1]
 800ab58:	e7f3      	b.n	800ab42 <__strftime.isra.0+0x8a2>
 800ab5a:	6a33      	ldr	r3, [r6, #32]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f6ff aca3 	blt.w	800a4a8 <__strftime.isra.0+0x208>
 800ab62:	f001 f893 	bl	800bc8c <__tz_lock>
 800ab66:	9b02      	ldr	r3, [sp, #8]
 800ab68:	b90b      	cbnz	r3, 800ab6e <__strftime.isra.0+0x8ce>
 800ab6a:	f001 f89b 	bl	800bca4 <_tzset_unlocked>
 800ab6e:	f002 fcb7 	bl	800d4e0 <__gettzinfo>
 800ab72:	6a33      	ldr	r3, [r6, #32]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	bfd4      	ite	le
 800ab78:	2200      	movle	r2, #0
 800ab7a:	2201      	movgt	r2, #1
 800ab7c:	2328      	movs	r3, #40	; 0x28
 800ab7e:	fb02 3303 	mla	r3, r2, r3, r3
 800ab82:	eb07 0a04 	add.w	sl, r7, r4
 800ab86:	58c3      	ldr	r3, [r0, r3]
 800ab88:	f1c3 0900 	rsb	r9, r3, #0
 800ab8c:	f001 f884 	bl	800bc98 <__tz_unlock>
 800ab90:	233c      	movs	r3, #60	; 0x3c
 800ab92:	fb99 f0f3 	sdiv	r0, r9, r3
 800ab96:	f002 fd53 	bl	800d640 <labs>
 800ab9a:	233c      	movs	r3, #60	; 0x3c
 800ab9c:	eba5 0b04 	sub.w	fp, r5, r4
 800aba0:	fb90 f2f3 	sdiv	r2, r0, r3
 800aba4:	fb02 0013 	mls	r0, r2, r3, r0
 800aba8:	9000      	str	r0, [sp, #0]
 800abaa:	4a26      	ldr	r2, [pc, #152]	; (800ac44 <__strftime.isra.0+0x9a4>)
 800abac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800abb0:	4659      	mov	r1, fp
 800abb2:	4650      	mov	r0, sl
 800abb4:	fb99 f3f3 	sdiv	r3, r9, r3
 800abb8:	f7ff fa34 	bl	800a024 <sniprintf>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	f6ff aba1 	blt.w	800a304 <__strftime.isra.0+0x64>
 800abc2:	4404      	add	r4, r0
 800abc4:	42a5      	cmp	r5, r4
 800abc6:	f67f ab9d 	bls.w	800a304 <__strftime.isra.0+0x64>
 800abca:	2301      	movs	r3, #1
 800abcc:	9302      	str	r3, [sp, #8]
 800abce:	e46b      	b.n	800a4a8 <__strftime.isra.0+0x208>
 800abd0:	6a33      	ldr	r3, [r6, #32]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f6ff ac68 	blt.w	800a4a8 <__strftime.isra.0+0x208>
 800abd8:	f001 f858 	bl	800bc8c <__tz_lock>
 800abdc:	9b02      	ldr	r3, [sp, #8]
 800abde:	b90b      	cbnz	r3, 800abe4 <__strftime.isra.0+0x944>
 800abe0:	f001 f860 	bl	800bca4 <_tzset_unlocked>
 800abe4:	6a33      	ldr	r3, [r6, #32]
 800abe6:	4a18      	ldr	r2, [pc, #96]	; (800ac48 <__strftime.isra.0+0x9a8>)
 800abe8:	2b00      	cmp	r3, #0
 800abea:	bfd4      	ite	le
 800abec:	2300      	movle	r3, #0
 800abee:	2301      	movgt	r3, #1
 800abf0:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800abf4:	4648      	mov	r0, r9
 800abf6:	f7f5 fafd 	bl	80001f4 <strlen>
 800abfa:	f109 39ff 	add.w	r9, r9, #4294967295
 800abfe:	4420      	add	r0, r4
 800ac00:	1e6b      	subs	r3, r5, #1
 800ac02:	42a0      	cmp	r0, r4
 800ac04:	d102      	bne.n	800ac0c <__strftime.isra.0+0x96c>
 800ac06:	f001 f847 	bl	800bc98 <__tz_unlock>
 800ac0a:	e7de      	b.n	800abca <__strftime.isra.0+0x92a>
 800ac0c:	42a3      	cmp	r3, r4
 800ac0e:	d904      	bls.n	800ac1a <__strftime.isra.0+0x97a>
 800ac10:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ac14:	553a      	strb	r2, [r7, r4]
 800ac16:	3401      	adds	r4, #1
 800ac18:	e7f3      	b.n	800ac02 <__strftime.isra.0+0x962>
 800ac1a:	f001 f83d 	bl	800bc98 <__tz_unlock>
 800ac1e:	f7ff bb71 	b.w	800a304 <__strftime.isra.0+0x64>
 800ac22:	1e6b      	subs	r3, r5, #1
 800ac24:	429c      	cmp	r4, r3
 800ac26:	f4bf ab6d 	bcs.w	800a304 <__strftime.isra.0+0x64>
 800ac2a:	2325      	movs	r3, #37	; 0x25
 800ac2c:	e62d      	b.n	800a88a <__strftime.isra.0+0x5ea>
 800ac2e:	b10d      	cbz	r5, 800ac34 <__strftime.isra.0+0x994>
 800ac30:	2300      	movs	r3, #0
 800ac32:	553b      	strb	r3, [r7, r4]
 800ac34:	4620      	mov	r0, r4
 800ac36:	b00f      	add	sp, #60	; 0x3c
 800ac38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3c:	fffff894 	.word	0xfffff894
 800ac40:	0800fd77 	.word	0x0800fd77
 800ac44:	0800fd94 	.word	0x0800fd94
 800ac48:	20000070 	.word	0x20000070

0800ac4c <strftime>:
 800ac4c:	f7ff bb28 	b.w	800a2a0 <__strftime.isra.0>

0800ac50 <strncmp>:
 800ac50:	b510      	push	{r4, lr}
 800ac52:	b17a      	cbz	r2, 800ac74 <strncmp+0x24>
 800ac54:	4603      	mov	r3, r0
 800ac56:	3901      	subs	r1, #1
 800ac58:	1884      	adds	r4, r0, r2
 800ac5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac62:	4290      	cmp	r0, r2
 800ac64:	d101      	bne.n	800ac6a <strncmp+0x1a>
 800ac66:	42a3      	cmp	r3, r4
 800ac68:	d101      	bne.n	800ac6e <strncmp+0x1e>
 800ac6a:	1a80      	subs	r0, r0, r2
 800ac6c:	bd10      	pop	{r4, pc}
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d1f3      	bne.n	800ac5a <strncmp+0xa>
 800ac72:	e7fa      	b.n	800ac6a <strncmp+0x1a>
 800ac74:	4610      	mov	r0, r2
 800ac76:	e7f9      	b.n	800ac6c <strncmp+0x1c>

0800ac78 <strncpy>:
 800ac78:	b510      	push	{r4, lr}
 800ac7a:	3901      	subs	r1, #1
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	b132      	cbz	r2, 800ac8e <strncpy+0x16>
 800ac80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ac84:	f803 4b01 	strb.w	r4, [r3], #1
 800ac88:	3a01      	subs	r2, #1
 800ac8a:	2c00      	cmp	r4, #0
 800ac8c:	d1f7      	bne.n	800ac7e <strncpy+0x6>
 800ac8e:	441a      	add	r2, r3
 800ac90:	2100      	movs	r1, #0
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d100      	bne.n	800ac98 <strncpy+0x20>
 800ac96:	bd10      	pop	{r4, pc}
 800ac98:	f803 1b01 	strb.w	r1, [r3], #1
 800ac9c:	e7f9      	b.n	800ac92 <strncpy+0x1a>

0800ac9e <strstr>:
 800ac9e:	780a      	ldrb	r2, [r1, #0]
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	b96a      	cbnz	r2, 800acc0 <strstr+0x22>
 800aca4:	bd70      	pop	{r4, r5, r6, pc}
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d109      	bne.n	800acbe <strstr+0x20>
 800acaa:	460c      	mov	r4, r1
 800acac:	4605      	mov	r5, r0
 800acae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0f6      	beq.n	800aca4 <strstr+0x6>
 800acb6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800acba:	429e      	cmp	r6, r3
 800acbc:	d0f7      	beq.n	800acae <strstr+0x10>
 800acbe:	3001      	adds	r0, #1
 800acc0:	7803      	ldrb	r3, [r0, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1ef      	bne.n	800aca6 <strstr+0x8>
 800acc6:	4618      	mov	r0, r3
 800acc8:	e7ec      	b.n	800aca4 <strstr+0x6>

0800acca <sulp>:
 800acca:	b570      	push	{r4, r5, r6, lr}
 800accc:	4604      	mov	r4, r0
 800acce:	460d      	mov	r5, r1
 800acd0:	ec45 4b10 	vmov	d0, r4, r5
 800acd4:	4616      	mov	r6, r2
 800acd6:	f003 f863 	bl	800dda0 <__ulp>
 800acda:	ec51 0b10 	vmov	r0, r1, d0
 800acde:	b17e      	cbz	r6, 800ad00 <sulp+0x36>
 800ace0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ace4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ace8:	2b00      	cmp	r3, #0
 800acea:	dd09      	ble.n	800ad00 <sulp+0x36>
 800acec:	051b      	lsls	r3, r3, #20
 800acee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800acf2:	2400      	movs	r4, #0
 800acf4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800acf8:	4622      	mov	r2, r4
 800acfa:	462b      	mov	r3, r5
 800acfc:	f7f5 fc94 	bl	8000628 <__aeabi_dmul>
 800ad00:	bd70      	pop	{r4, r5, r6, pc}
 800ad02:	0000      	movs	r0, r0
 800ad04:	0000      	movs	r0, r0
	...

0800ad08 <_strtod_l>:
 800ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	ed2d 8b02 	vpush	{d8}
 800ad10:	b09d      	sub	sp, #116	; 0x74
 800ad12:	461f      	mov	r7, r3
 800ad14:	2300      	movs	r3, #0
 800ad16:	9318      	str	r3, [sp, #96]	; 0x60
 800ad18:	4ba2      	ldr	r3, [pc, #648]	; (800afa4 <_strtod_l+0x29c>)
 800ad1a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	9305      	str	r3, [sp, #20]
 800ad20:	4604      	mov	r4, r0
 800ad22:	4618      	mov	r0, r3
 800ad24:	4688      	mov	r8, r1
 800ad26:	f7f5 fa65 	bl	80001f4 <strlen>
 800ad2a:	f04f 0a00 	mov.w	sl, #0
 800ad2e:	4605      	mov	r5, r0
 800ad30:	f04f 0b00 	mov.w	fp, #0
 800ad34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad3a:	781a      	ldrb	r2, [r3, #0]
 800ad3c:	2a2b      	cmp	r2, #43	; 0x2b
 800ad3e:	d04e      	beq.n	800adde <_strtod_l+0xd6>
 800ad40:	d83b      	bhi.n	800adba <_strtod_l+0xb2>
 800ad42:	2a0d      	cmp	r2, #13
 800ad44:	d834      	bhi.n	800adb0 <_strtod_l+0xa8>
 800ad46:	2a08      	cmp	r2, #8
 800ad48:	d834      	bhi.n	800adb4 <_strtod_l+0xac>
 800ad4a:	2a00      	cmp	r2, #0
 800ad4c:	d03e      	beq.n	800adcc <_strtod_l+0xc4>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	930a      	str	r3, [sp, #40]	; 0x28
 800ad52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ad54:	7833      	ldrb	r3, [r6, #0]
 800ad56:	2b30      	cmp	r3, #48	; 0x30
 800ad58:	f040 80b0 	bne.w	800aebc <_strtod_l+0x1b4>
 800ad5c:	7873      	ldrb	r3, [r6, #1]
 800ad5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad62:	2b58      	cmp	r3, #88	; 0x58
 800ad64:	d168      	bne.n	800ae38 <_strtod_l+0x130>
 800ad66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad68:	9301      	str	r3, [sp, #4]
 800ad6a:	ab18      	add	r3, sp, #96	; 0x60
 800ad6c:	9702      	str	r7, [sp, #8]
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	4a8d      	ldr	r2, [pc, #564]	; (800afa8 <_strtod_l+0x2a0>)
 800ad72:	ab19      	add	r3, sp, #100	; 0x64
 800ad74:	a917      	add	r1, sp, #92	; 0x5c
 800ad76:	4620      	mov	r0, r4
 800ad78:	f002 f866 	bl	800ce48 <__gethex>
 800ad7c:	f010 0707 	ands.w	r7, r0, #7
 800ad80:	4605      	mov	r5, r0
 800ad82:	d005      	beq.n	800ad90 <_strtod_l+0x88>
 800ad84:	2f06      	cmp	r7, #6
 800ad86:	d12c      	bne.n	800ade2 <_strtod_l+0xda>
 800ad88:	3601      	adds	r6, #1
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ad8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f040 8590 	bne.w	800b8b8 <_strtod_l+0xbb0>
 800ad98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad9a:	b1eb      	cbz	r3, 800add8 <_strtod_l+0xd0>
 800ad9c:	4652      	mov	r2, sl
 800ad9e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ada2:	ec43 2b10 	vmov	d0, r2, r3
 800ada6:	b01d      	add	sp, #116	; 0x74
 800ada8:	ecbd 8b02 	vpop	{d8}
 800adac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb0:	2a20      	cmp	r2, #32
 800adb2:	d1cc      	bne.n	800ad4e <_strtod_l+0x46>
 800adb4:	3301      	adds	r3, #1
 800adb6:	9317      	str	r3, [sp, #92]	; 0x5c
 800adb8:	e7be      	b.n	800ad38 <_strtod_l+0x30>
 800adba:	2a2d      	cmp	r2, #45	; 0x2d
 800adbc:	d1c7      	bne.n	800ad4e <_strtod_l+0x46>
 800adbe:	2201      	movs	r2, #1
 800adc0:	920a      	str	r2, [sp, #40]	; 0x28
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	9217      	str	r2, [sp, #92]	; 0x5c
 800adc6:	785b      	ldrb	r3, [r3, #1]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1c2      	bne.n	800ad52 <_strtod_l+0x4a>
 800adcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800add2:	2b00      	cmp	r3, #0
 800add4:	f040 856e 	bne.w	800b8b4 <_strtod_l+0xbac>
 800add8:	4652      	mov	r2, sl
 800adda:	465b      	mov	r3, fp
 800addc:	e7e1      	b.n	800ada2 <_strtod_l+0x9a>
 800adde:	2200      	movs	r2, #0
 800ade0:	e7ee      	b.n	800adc0 <_strtod_l+0xb8>
 800ade2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ade4:	b13a      	cbz	r2, 800adf6 <_strtod_l+0xee>
 800ade6:	2135      	movs	r1, #53	; 0x35
 800ade8:	a81a      	add	r0, sp, #104	; 0x68
 800adea:	f003 f8e4 	bl	800dfb6 <__copybits>
 800adee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800adf0:	4620      	mov	r0, r4
 800adf2:	f002 fca3 	bl	800d73c <_Bfree>
 800adf6:	3f01      	subs	r7, #1
 800adf8:	2f04      	cmp	r7, #4
 800adfa:	d806      	bhi.n	800ae0a <_strtod_l+0x102>
 800adfc:	e8df f007 	tbb	[pc, r7]
 800ae00:	1714030a 	.word	0x1714030a
 800ae04:	0a          	.byte	0x0a
 800ae05:	00          	.byte	0x00
 800ae06:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ae0a:	0728      	lsls	r0, r5, #28
 800ae0c:	d5c0      	bpl.n	800ad90 <_strtod_l+0x88>
 800ae0e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ae12:	e7bd      	b.n	800ad90 <_strtod_l+0x88>
 800ae14:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ae18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae26:	e7f0      	b.n	800ae0a <_strtod_l+0x102>
 800ae28:	f8df b180 	ldr.w	fp, [pc, #384]	; 800afac <_strtod_l+0x2a4>
 800ae2c:	e7ed      	b.n	800ae0a <_strtod_l+0x102>
 800ae2e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ae32:	f04f 3aff 	mov.w	sl, #4294967295
 800ae36:	e7e8      	b.n	800ae0a <_strtod_l+0x102>
 800ae38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae3e:	785b      	ldrb	r3, [r3, #1]
 800ae40:	2b30      	cmp	r3, #48	; 0x30
 800ae42:	d0f9      	beq.n	800ae38 <_strtod_l+0x130>
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d0a3      	beq.n	800ad90 <_strtod_l+0x88>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	f04f 0900 	mov.w	r9, #0
 800ae4e:	9304      	str	r3, [sp, #16]
 800ae50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae52:	9308      	str	r3, [sp, #32]
 800ae54:	f8cd 901c 	str.w	r9, [sp, #28]
 800ae58:	464f      	mov	r7, r9
 800ae5a:	220a      	movs	r2, #10
 800ae5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ae5e:	7806      	ldrb	r6, [r0, #0]
 800ae60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ae64:	b2d9      	uxtb	r1, r3
 800ae66:	2909      	cmp	r1, #9
 800ae68:	d92a      	bls.n	800aec0 <_strtod_l+0x1b8>
 800ae6a:	9905      	ldr	r1, [sp, #20]
 800ae6c:	462a      	mov	r2, r5
 800ae6e:	f7ff feef 	bl	800ac50 <strncmp>
 800ae72:	b398      	cbz	r0, 800aedc <_strtod_l+0x1d4>
 800ae74:	2000      	movs	r0, #0
 800ae76:	4632      	mov	r2, r6
 800ae78:	463d      	mov	r5, r7
 800ae7a:	9005      	str	r0, [sp, #20]
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2a65      	cmp	r2, #101	; 0x65
 800ae80:	d001      	beq.n	800ae86 <_strtod_l+0x17e>
 800ae82:	2a45      	cmp	r2, #69	; 0x45
 800ae84:	d118      	bne.n	800aeb8 <_strtod_l+0x1b0>
 800ae86:	b91d      	cbnz	r5, 800ae90 <_strtod_l+0x188>
 800ae88:	9a04      	ldr	r2, [sp, #16]
 800ae8a:	4302      	orrs	r2, r0
 800ae8c:	d09e      	beq.n	800adcc <_strtod_l+0xc4>
 800ae8e:	2500      	movs	r5, #0
 800ae90:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ae94:	f108 0201 	add.w	r2, r8, #1
 800ae98:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae9a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ae9e:	2a2b      	cmp	r2, #43	; 0x2b
 800aea0:	d075      	beq.n	800af8e <_strtod_l+0x286>
 800aea2:	2a2d      	cmp	r2, #45	; 0x2d
 800aea4:	d07b      	beq.n	800af9e <_strtod_l+0x296>
 800aea6:	f04f 0c00 	mov.w	ip, #0
 800aeaa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aeae:	2909      	cmp	r1, #9
 800aeb0:	f240 8082 	bls.w	800afb8 <_strtod_l+0x2b0>
 800aeb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aeb8:	2600      	movs	r6, #0
 800aeba:	e09d      	b.n	800aff8 <_strtod_l+0x2f0>
 800aebc:	2300      	movs	r3, #0
 800aebe:	e7c4      	b.n	800ae4a <_strtod_l+0x142>
 800aec0:	2f08      	cmp	r7, #8
 800aec2:	bfd8      	it	le
 800aec4:	9907      	ldrle	r1, [sp, #28]
 800aec6:	f100 0001 	add.w	r0, r0, #1
 800aeca:	bfda      	itte	le
 800aecc:	fb02 3301 	mlale	r3, r2, r1, r3
 800aed0:	9307      	strle	r3, [sp, #28]
 800aed2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800aed6:	3701      	adds	r7, #1
 800aed8:	9017      	str	r0, [sp, #92]	; 0x5c
 800aeda:	e7bf      	b.n	800ae5c <_strtod_l+0x154>
 800aedc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aede:	195a      	adds	r2, r3, r5
 800aee0:	9217      	str	r2, [sp, #92]	; 0x5c
 800aee2:	5d5a      	ldrb	r2, [r3, r5]
 800aee4:	2f00      	cmp	r7, #0
 800aee6:	d037      	beq.n	800af58 <_strtod_l+0x250>
 800aee8:	9005      	str	r0, [sp, #20]
 800aeea:	463d      	mov	r5, r7
 800aeec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aef0:	2b09      	cmp	r3, #9
 800aef2:	d912      	bls.n	800af1a <_strtod_l+0x212>
 800aef4:	2301      	movs	r3, #1
 800aef6:	e7c2      	b.n	800ae7e <_strtod_l+0x176>
 800aef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	9217      	str	r2, [sp, #92]	; 0x5c
 800aefe:	785a      	ldrb	r2, [r3, #1]
 800af00:	3001      	adds	r0, #1
 800af02:	2a30      	cmp	r2, #48	; 0x30
 800af04:	d0f8      	beq.n	800aef8 <_strtod_l+0x1f0>
 800af06:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800af0a:	2b08      	cmp	r3, #8
 800af0c:	f200 84d9 	bhi.w	800b8c2 <_strtod_l+0xbba>
 800af10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af12:	9005      	str	r0, [sp, #20]
 800af14:	2000      	movs	r0, #0
 800af16:	9308      	str	r3, [sp, #32]
 800af18:	4605      	mov	r5, r0
 800af1a:	3a30      	subs	r2, #48	; 0x30
 800af1c:	f100 0301 	add.w	r3, r0, #1
 800af20:	d014      	beq.n	800af4c <_strtod_l+0x244>
 800af22:	9905      	ldr	r1, [sp, #20]
 800af24:	4419      	add	r1, r3
 800af26:	9105      	str	r1, [sp, #20]
 800af28:	462b      	mov	r3, r5
 800af2a:	eb00 0e05 	add.w	lr, r0, r5
 800af2e:	210a      	movs	r1, #10
 800af30:	4573      	cmp	r3, lr
 800af32:	d113      	bne.n	800af5c <_strtod_l+0x254>
 800af34:	182b      	adds	r3, r5, r0
 800af36:	2b08      	cmp	r3, #8
 800af38:	f105 0501 	add.w	r5, r5, #1
 800af3c:	4405      	add	r5, r0
 800af3e:	dc1c      	bgt.n	800af7a <_strtod_l+0x272>
 800af40:	9907      	ldr	r1, [sp, #28]
 800af42:	230a      	movs	r3, #10
 800af44:	fb03 2301 	mla	r3, r3, r1, r2
 800af48:	9307      	str	r3, [sp, #28]
 800af4a:	2300      	movs	r3, #0
 800af4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af4e:	1c51      	adds	r1, r2, #1
 800af50:	9117      	str	r1, [sp, #92]	; 0x5c
 800af52:	7852      	ldrb	r2, [r2, #1]
 800af54:	4618      	mov	r0, r3
 800af56:	e7c9      	b.n	800aeec <_strtod_l+0x1e4>
 800af58:	4638      	mov	r0, r7
 800af5a:	e7d2      	b.n	800af02 <_strtod_l+0x1fa>
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	dc04      	bgt.n	800af6a <_strtod_l+0x262>
 800af60:	9e07      	ldr	r6, [sp, #28]
 800af62:	434e      	muls	r6, r1
 800af64:	9607      	str	r6, [sp, #28]
 800af66:	3301      	adds	r3, #1
 800af68:	e7e2      	b.n	800af30 <_strtod_l+0x228>
 800af6a:	f103 0c01 	add.w	ip, r3, #1
 800af6e:	f1bc 0f10 	cmp.w	ip, #16
 800af72:	bfd8      	it	le
 800af74:	fb01 f909 	mulle.w	r9, r1, r9
 800af78:	e7f5      	b.n	800af66 <_strtod_l+0x25e>
 800af7a:	2d10      	cmp	r5, #16
 800af7c:	bfdc      	itt	le
 800af7e:	230a      	movle	r3, #10
 800af80:	fb03 2909 	mlale	r9, r3, r9, r2
 800af84:	e7e1      	b.n	800af4a <_strtod_l+0x242>
 800af86:	2300      	movs	r3, #0
 800af88:	9305      	str	r3, [sp, #20]
 800af8a:	2301      	movs	r3, #1
 800af8c:	e77c      	b.n	800ae88 <_strtod_l+0x180>
 800af8e:	f04f 0c00 	mov.w	ip, #0
 800af92:	f108 0202 	add.w	r2, r8, #2
 800af96:	9217      	str	r2, [sp, #92]	; 0x5c
 800af98:	f898 2002 	ldrb.w	r2, [r8, #2]
 800af9c:	e785      	b.n	800aeaa <_strtod_l+0x1a2>
 800af9e:	f04f 0c01 	mov.w	ip, #1
 800afa2:	e7f6      	b.n	800af92 <_strtod_l+0x28a>
 800afa4:	08010270 	.word	0x08010270
 800afa8:	0800fda0 	.word	0x0800fda0
 800afac:	7ff00000 	.word	0x7ff00000
 800afb0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afb2:	1c51      	adds	r1, r2, #1
 800afb4:	9117      	str	r1, [sp, #92]	; 0x5c
 800afb6:	7852      	ldrb	r2, [r2, #1]
 800afb8:	2a30      	cmp	r2, #48	; 0x30
 800afba:	d0f9      	beq.n	800afb0 <_strtod_l+0x2a8>
 800afbc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800afc0:	2908      	cmp	r1, #8
 800afc2:	f63f af79 	bhi.w	800aeb8 <_strtod_l+0x1b0>
 800afc6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800afca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afcc:	9206      	str	r2, [sp, #24]
 800afce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afd0:	1c51      	adds	r1, r2, #1
 800afd2:	9117      	str	r1, [sp, #92]	; 0x5c
 800afd4:	7852      	ldrb	r2, [r2, #1]
 800afd6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800afda:	2e09      	cmp	r6, #9
 800afdc:	d937      	bls.n	800b04e <_strtod_l+0x346>
 800afde:	9e06      	ldr	r6, [sp, #24]
 800afe0:	1b89      	subs	r1, r1, r6
 800afe2:	2908      	cmp	r1, #8
 800afe4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800afe8:	dc02      	bgt.n	800aff0 <_strtod_l+0x2e8>
 800afea:	4576      	cmp	r6, lr
 800afec:	bfa8      	it	ge
 800afee:	4676      	movge	r6, lr
 800aff0:	f1bc 0f00 	cmp.w	ip, #0
 800aff4:	d000      	beq.n	800aff8 <_strtod_l+0x2f0>
 800aff6:	4276      	negs	r6, r6
 800aff8:	2d00      	cmp	r5, #0
 800affa:	d14d      	bne.n	800b098 <_strtod_l+0x390>
 800affc:	9904      	ldr	r1, [sp, #16]
 800affe:	4301      	orrs	r1, r0
 800b000:	f47f aec6 	bne.w	800ad90 <_strtod_l+0x88>
 800b004:	2b00      	cmp	r3, #0
 800b006:	f47f aee1 	bne.w	800adcc <_strtod_l+0xc4>
 800b00a:	2a69      	cmp	r2, #105	; 0x69
 800b00c:	d027      	beq.n	800b05e <_strtod_l+0x356>
 800b00e:	dc24      	bgt.n	800b05a <_strtod_l+0x352>
 800b010:	2a49      	cmp	r2, #73	; 0x49
 800b012:	d024      	beq.n	800b05e <_strtod_l+0x356>
 800b014:	2a4e      	cmp	r2, #78	; 0x4e
 800b016:	f47f aed9 	bne.w	800adcc <_strtod_l+0xc4>
 800b01a:	499f      	ldr	r1, [pc, #636]	; (800b298 <_strtod_l+0x590>)
 800b01c:	a817      	add	r0, sp, #92	; 0x5c
 800b01e:	f002 f96b 	bl	800d2f8 <__match>
 800b022:	2800      	cmp	r0, #0
 800b024:	f43f aed2 	beq.w	800adcc <_strtod_l+0xc4>
 800b028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	2b28      	cmp	r3, #40	; 0x28
 800b02e:	d12d      	bne.n	800b08c <_strtod_l+0x384>
 800b030:	499a      	ldr	r1, [pc, #616]	; (800b29c <_strtod_l+0x594>)
 800b032:	aa1a      	add	r2, sp, #104	; 0x68
 800b034:	a817      	add	r0, sp, #92	; 0x5c
 800b036:	f002 f973 	bl	800d320 <__hexnan>
 800b03a:	2805      	cmp	r0, #5
 800b03c:	d126      	bne.n	800b08c <_strtod_l+0x384>
 800b03e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b040:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b044:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b048:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b04c:	e6a0      	b.n	800ad90 <_strtod_l+0x88>
 800b04e:	210a      	movs	r1, #10
 800b050:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b054:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b058:	e7b9      	b.n	800afce <_strtod_l+0x2c6>
 800b05a:	2a6e      	cmp	r2, #110	; 0x6e
 800b05c:	e7db      	b.n	800b016 <_strtod_l+0x30e>
 800b05e:	4990      	ldr	r1, [pc, #576]	; (800b2a0 <_strtod_l+0x598>)
 800b060:	a817      	add	r0, sp, #92	; 0x5c
 800b062:	f002 f949 	bl	800d2f8 <__match>
 800b066:	2800      	cmp	r0, #0
 800b068:	f43f aeb0 	beq.w	800adcc <_strtod_l+0xc4>
 800b06c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b06e:	498d      	ldr	r1, [pc, #564]	; (800b2a4 <_strtod_l+0x59c>)
 800b070:	3b01      	subs	r3, #1
 800b072:	a817      	add	r0, sp, #92	; 0x5c
 800b074:	9317      	str	r3, [sp, #92]	; 0x5c
 800b076:	f002 f93f 	bl	800d2f8 <__match>
 800b07a:	b910      	cbnz	r0, 800b082 <_strtod_l+0x37a>
 800b07c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b07e:	3301      	adds	r3, #1
 800b080:	9317      	str	r3, [sp, #92]	; 0x5c
 800b082:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b2b4 <_strtod_l+0x5ac>
 800b086:	f04f 0a00 	mov.w	sl, #0
 800b08a:	e681      	b.n	800ad90 <_strtod_l+0x88>
 800b08c:	4886      	ldr	r0, [pc, #536]	; (800b2a8 <_strtod_l+0x5a0>)
 800b08e:	f7fd fbf3 	bl	8008878 <nan>
 800b092:	ec5b ab10 	vmov	sl, fp, d0
 800b096:	e67b      	b.n	800ad90 <_strtod_l+0x88>
 800b098:	9b05      	ldr	r3, [sp, #20]
 800b09a:	9807      	ldr	r0, [sp, #28]
 800b09c:	1af3      	subs	r3, r6, r3
 800b09e:	2f00      	cmp	r7, #0
 800b0a0:	bf08      	it	eq
 800b0a2:	462f      	moveq	r7, r5
 800b0a4:	2d10      	cmp	r5, #16
 800b0a6:	9306      	str	r3, [sp, #24]
 800b0a8:	46a8      	mov	r8, r5
 800b0aa:	bfa8      	it	ge
 800b0ac:	f04f 0810 	movge.w	r8, #16
 800b0b0:	f7f5 fa40 	bl	8000534 <__aeabi_ui2d>
 800b0b4:	2d09      	cmp	r5, #9
 800b0b6:	4682      	mov	sl, r0
 800b0b8:	468b      	mov	fp, r1
 800b0ba:	dd13      	ble.n	800b0e4 <_strtod_l+0x3dc>
 800b0bc:	4b7b      	ldr	r3, [pc, #492]	; (800b2ac <_strtod_l+0x5a4>)
 800b0be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b0c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b0c6:	f7f5 faaf 	bl	8000628 <__aeabi_dmul>
 800b0ca:	4682      	mov	sl, r0
 800b0cc:	4648      	mov	r0, r9
 800b0ce:	468b      	mov	fp, r1
 800b0d0:	f7f5 fa30 	bl	8000534 <__aeabi_ui2d>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4650      	mov	r0, sl
 800b0da:	4659      	mov	r1, fp
 800b0dc:	f7f5 f8ee 	bl	80002bc <__adddf3>
 800b0e0:	4682      	mov	sl, r0
 800b0e2:	468b      	mov	fp, r1
 800b0e4:	2d0f      	cmp	r5, #15
 800b0e6:	dc38      	bgt.n	800b15a <_strtod_l+0x452>
 800b0e8:	9b06      	ldr	r3, [sp, #24]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f43f ae50 	beq.w	800ad90 <_strtod_l+0x88>
 800b0f0:	dd24      	ble.n	800b13c <_strtod_l+0x434>
 800b0f2:	2b16      	cmp	r3, #22
 800b0f4:	dc0b      	bgt.n	800b10e <_strtod_l+0x406>
 800b0f6:	496d      	ldr	r1, [pc, #436]	; (800b2ac <_strtod_l+0x5a4>)
 800b0f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b100:	4652      	mov	r2, sl
 800b102:	465b      	mov	r3, fp
 800b104:	f7f5 fa90 	bl	8000628 <__aeabi_dmul>
 800b108:	4682      	mov	sl, r0
 800b10a:	468b      	mov	fp, r1
 800b10c:	e640      	b.n	800ad90 <_strtod_l+0x88>
 800b10e:	9a06      	ldr	r2, [sp, #24]
 800b110:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b114:	4293      	cmp	r3, r2
 800b116:	db20      	blt.n	800b15a <_strtod_l+0x452>
 800b118:	4c64      	ldr	r4, [pc, #400]	; (800b2ac <_strtod_l+0x5a4>)
 800b11a:	f1c5 050f 	rsb	r5, r5, #15
 800b11e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b122:	4652      	mov	r2, sl
 800b124:	465b      	mov	r3, fp
 800b126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b12a:	f7f5 fa7d 	bl	8000628 <__aeabi_dmul>
 800b12e:	9b06      	ldr	r3, [sp, #24]
 800b130:	1b5d      	subs	r5, r3, r5
 800b132:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b136:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b13a:	e7e3      	b.n	800b104 <_strtod_l+0x3fc>
 800b13c:	9b06      	ldr	r3, [sp, #24]
 800b13e:	3316      	adds	r3, #22
 800b140:	db0b      	blt.n	800b15a <_strtod_l+0x452>
 800b142:	9b05      	ldr	r3, [sp, #20]
 800b144:	1b9e      	subs	r6, r3, r6
 800b146:	4b59      	ldr	r3, [pc, #356]	; (800b2ac <_strtod_l+0x5a4>)
 800b148:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b14c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b150:	4650      	mov	r0, sl
 800b152:	4659      	mov	r1, fp
 800b154:	f7f5 fb92 	bl	800087c <__aeabi_ddiv>
 800b158:	e7d6      	b.n	800b108 <_strtod_l+0x400>
 800b15a:	9b06      	ldr	r3, [sp, #24]
 800b15c:	eba5 0808 	sub.w	r8, r5, r8
 800b160:	4498      	add	r8, r3
 800b162:	f1b8 0f00 	cmp.w	r8, #0
 800b166:	dd74      	ble.n	800b252 <_strtod_l+0x54a>
 800b168:	f018 030f 	ands.w	r3, r8, #15
 800b16c:	d00a      	beq.n	800b184 <_strtod_l+0x47c>
 800b16e:	494f      	ldr	r1, [pc, #316]	; (800b2ac <_strtod_l+0x5a4>)
 800b170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b174:	4652      	mov	r2, sl
 800b176:	465b      	mov	r3, fp
 800b178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b17c:	f7f5 fa54 	bl	8000628 <__aeabi_dmul>
 800b180:	4682      	mov	sl, r0
 800b182:	468b      	mov	fp, r1
 800b184:	f038 080f 	bics.w	r8, r8, #15
 800b188:	d04f      	beq.n	800b22a <_strtod_l+0x522>
 800b18a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b18e:	dd22      	ble.n	800b1d6 <_strtod_l+0x4ce>
 800b190:	2500      	movs	r5, #0
 800b192:	462e      	mov	r6, r5
 800b194:	9507      	str	r5, [sp, #28]
 800b196:	9505      	str	r5, [sp, #20]
 800b198:	2322      	movs	r3, #34	; 0x22
 800b19a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b2b4 <_strtod_l+0x5ac>
 800b19e:	6023      	str	r3, [r4, #0]
 800b1a0:	f04f 0a00 	mov.w	sl, #0
 800b1a4:	9b07      	ldr	r3, [sp, #28]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f43f adf2 	beq.w	800ad90 <_strtod_l+0x88>
 800b1ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f002 fac4 	bl	800d73c <_Bfree>
 800b1b4:	9905      	ldr	r1, [sp, #20]
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f002 fac0 	bl	800d73c <_Bfree>
 800b1bc:	4631      	mov	r1, r6
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f002 fabc 	bl	800d73c <_Bfree>
 800b1c4:	9907      	ldr	r1, [sp, #28]
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f002 fab8 	bl	800d73c <_Bfree>
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f002 fab4 	bl	800d73c <_Bfree>
 800b1d4:	e5dc      	b.n	800ad90 <_strtod_l+0x88>
 800b1d6:	4b36      	ldr	r3, [pc, #216]	; (800b2b0 <_strtod_l+0x5a8>)
 800b1d8:	9304      	str	r3, [sp, #16]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	4659      	mov	r1, fp
 800b1e4:	4699      	mov	r9, r3
 800b1e6:	f1b8 0f01 	cmp.w	r8, #1
 800b1ea:	dc21      	bgt.n	800b230 <_strtod_l+0x528>
 800b1ec:	b10b      	cbz	r3, 800b1f2 <_strtod_l+0x4ea>
 800b1ee:	4682      	mov	sl, r0
 800b1f0:	468b      	mov	fp, r1
 800b1f2:	4b2f      	ldr	r3, [pc, #188]	; (800b2b0 <_strtod_l+0x5a8>)
 800b1f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b1f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b1fc:	4652      	mov	r2, sl
 800b1fe:	465b      	mov	r3, fp
 800b200:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b204:	f7f5 fa10 	bl	8000628 <__aeabi_dmul>
 800b208:	4b2a      	ldr	r3, [pc, #168]	; (800b2b4 <_strtod_l+0x5ac>)
 800b20a:	460a      	mov	r2, r1
 800b20c:	400b      	ands	r3, r1
 800b20e:	492a      	ldr	r1, [pc, #168]	; (800b2b8 <_strtod_l+0x5b0>)
 800b210:	428b      	cmp	r3, r1
 800b212:	4682      	mov	sl, r0
 800b214:	d8bc      	bhi.n	800b190 <_strtod_l+0x488>
 800b216:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b21a:	428b      	cmp	r3, r1
 800b21c:	bf86      	itte	hi
 800b21e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b2bc <_strtod_l+0x5b4>
 800b222:	f04f 3aff 	movhi.w	sl, #4294967295
 800b226:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b22a:	2300      	movs	r3, #0
 800b22c:	9304      	str	r3, [sp, #16]
 800b22e:	e084      	b.n	800b33a <_strtod_l+0x632>
 800b230:	f018 0f01 	tst.w	r8, #1
 800b234:	d005      	beq.n	800b242 <_strtod_l+0x53a>
 800b236:	9b04      	ldr	r3, [sp, #16]
 800b238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23c:	f7f5 f9f4 	bl	8000628 <__aeabi_dmul>
 800b240:	2301      	movs	r3, #1
 800b242:	9a04      	ldr	r2, [sp, #16]
 800b244:	3208      	adds	r2, #8
 800b246:	f109 0901 	add.w	r9, r9, #1
 800b24a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b24e:	9204      	str	r2, [sp, #16]
 800b250:	e7c9      	b.n	800b1e6 <_strtod_l+0x4de>
 800b252:	d0ea      	beq.n	800b22a <_strtod_l+0x522>
 800b254:	f1c8 0800 	rsb	r8, r8, #0
 800b258:	f018 020f 	ands.w	r2, r8, #15
 800b25c:	d00a      	beq.n	800b274 <_strtod_l+0x56c>
 800b25e:	4b13      	ldr	r3, [pc, #76]	; (800b2ac <_strtod_l+0x5a4>)
 800b260:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b264:	4650      	mov	r0, sl
 800b266:	4659      	mov	r1, fp
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	f7f5 fb06 	bl	800087c <__aeabi_ddiv>
 800b270:	4682      	mov	sl, r0
 800b272:	468b      	mov	fp, r1
 800b274:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b278:	d0d7      	beq.n	800b22a <_strtod_l+0x522>
 800b27a:	f1b8 0f1f 	cmp.w	r8, #31
 800b27e:	dd1f      	ble.n	800b2c0 <_strtod_l+0x5b8>
 800b280:	2500      	movs	r5, #0
 800b282:	462e      	mov	r6, r5
 800b284:	9507      	str	r5, [sp, #28]
 800b286:	9505      	str	r5, [sp, #20]
 800b288:	2322      	movs	r3, #34	; 0x22
 800b28a:	f04f 0a00 	mov.w	sl, #0
 800b28e:	f04f 0b00 	mov.w	fp, #0
 800b292:	6023      	str	r3, [r4, #0]
 800b294:	e786      	b.n	800b1a4 <_strtod_l+0x49c>
 800b296:	bf00      	nop
 800b298:	0800fdf1 	.word	0x0800fdf1
 800b29c:	0800fdb4 	.word	0x0800fdb4
 800b2a0:	0800fd15 	.word	0x0800fd15
 800b2a4:	08010194 	.word	0x08010194
 800b2a8:	0801008f 	.word	0x0801008f
 800b2ac:	08010308 	.word	0x08010308
 800b2b0:	080102e0 	.word	0x080102e0
 800b2b4:	7ff00000 	.word	0x7ff00000
 800b2b8:	7ca00000 	.word	0x7ca00000
 800b2bc:	7fefffff 	.word	0x7fefffff
 800b2c0:	f018 0310 	ands.w	r3, r8, #16
 800b2c4:	bf18      	it	ne
 800b2c6:	236a      	movne	r3, #106	; 0x6a
 800b2c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b678 <_strtod_l+0x970>
 800b2cc:	9304      	str	r3, [sp, #16]
 800b2ce:	4650      	mov	r0, sl
 800b2d0:	4659      	mov	r1, fp
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f018 0f01 	tst.w	r8, #1
 800b2d8:	d004      	beq.n	800b2e4 <_strtod_l+0x5dc>
 800b2da:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b2de:	f7f5 f9a3 	bl	8000628 <__aeabi_dmul>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b2e8:	f109 0908 	add.w	r9, r9, #8
 800b2ec:	d1f2      	bne.n	800b2d4 <_strtod_l+0x5cc>
 800b2ee:	b10b      	cbz	r3, 800b2f4 <_strtod_l+0x5ec>
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	468b      	mov	fp, r1
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	b1c3      	cbz	r3, 800b32a <_strtod_l+0x622>
 800b2f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b2fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b300:	2b00      	cmp	r3, #0
 800b302:	4659      	mov	r1, fp
 800b304:	dd11      	ble.n	800b32a <_strtod_l+0x622>
 800b306:	2b1f      	cmp	r3, #31
 800b308:	f340 8124 	ble.w	800b554 <_strtod_l+0x84c>
 800b30c:	2b34      	cmp	r3, #52	; 0x34
 800b30e:	bfde      	ittt	le
 800b310:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b314:	f04f 33ff 	movle.w	r3, #4294967295
 800b318:	fa03 f202 	lslle.w	r2, r3, r2
 800b31c:	f04f 0a00 	mov.w	sl, #0
 800b320:	bfcc      	ite	gt
 800b322:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b326:	ea02 0b01 	andle.w	fp, r2, r1
 800b32a:	2200      	movs	r2, #0
 800b32c:	2300      	movs	r3, #0
 800b32e:	4650      	mov	r0, sl
 800b330:	4659      	mov	r1, fp
 800b332:	f7f5 fbe1 	bl	8000af8 <__aeabi_dcmpeq>
 800b336:	2800      	cmp	r0, #0
 800b338:	d1a2      	bne.n	800b280 <_strtod_l+0x578>
 800b33a:	9b07      	ldr	r3, [sp, #28]
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	9908      	ldr	r1, [sp, #32]
 800b340:	462b      	mov	r3, r5
 800b342:	463a      	mov	r2, r7
 800b344:	4620      	mov	r0, r4
 800b346:	f002 fa61 	bl	800d80c <__s2b>
 800b34a:	9007      	str	r0, [sp, #28]
 800b34c:	2800      	cmp	r0, #0
 800b34e:	f43f af1f 	beq.w	800b190 <_strtod_l+0x488>
 800b352:	9b05      	ldr	r3, [sp, #20]
 800b354:	1b9e      	subs	r6, r3, r6
 800b356:	9b06      	ldr	r3, [sp, #24]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	bfb4      	ite	lt
 800b35c:	4633      	movlt	r3, r6
 800b35e:	2300      	movge	r3, #0
 800b360:	930c      	str	r3, [sp, #48]	; 0x30
 800b362:	9b06      	ldr	r3, [sp, #24]
 800b364:	2500      	movs	r5, #0
 800b366:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b36a:	9312      	str	r3, [sp, #72]	; 0x48
 800b36c:	462e      	mov	r6, r5
 800b36e:	9b07      	ldr	r3, [sp, #28]
 800b370:	4620      	mov	r0, r4
 800b372:	6859      	ldr	r1, [r3, #4]
 800b374:	f002 f9a2 	bl	800d6bc <_Balloc>
 800b378:	9005      	str	r0, [sp, #20]
 800b37a:	2800      	cmp	r0, #0
 800b37c:	f43f af0c 	beq.w	800b198 <_strtod_l+0x490>
 800b380:	9b07      	ldr	r3, [sp, #28]
 800b382:	691a      	ldr	r2, [r3, #16]
 800b384:	3202      	adds	r2, #2
 800b386:	f103 010c 	add.w	r1, r3, #12
 800b38a:	0092      	lsls	r2, r2, #2
 800b38c:	300c      	adds	r0, #12
 800b38e:	f7fd fc51 	bl	8008c34 <memcpy>
 800b392:	ec4b ab10 	vmov	d0, sl, fp
 800b396:	aa1a      	add	r2, sp, #104	; 0x68
 800b398:	a919      	add	r1, sp, #100	; 0x64
 800b39a:	4620      	mov	r0, r4
 800b39c:	f002 fd7c 	bl	800de98 <__d2b>
 800b3a0:	ec4b ab18 	vmov	d8, sl, fp
 800b3a4:	9018      	str	r0, [sp, #96]	; 0x60
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f43f aef6 	beq.w	800b198 <_strtod_l+0x490>
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f002 fac6 	bl	800d940 <__i2b>
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	f43f aeee 	beq.w	800b198 <_strtod_l+0x490>
 800b3bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3be:	9904      	ldr	r1, [sp, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	bfab      	itete	ge
 800b3c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b3c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b3c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b3ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b3ce:	bfac      	ite	ge
 800b3d0:	eb03 0902 	addge.w	r9, r3, r2
 800b3d4:	1ad7      	sublt	r7, r2, r3
 800b3d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b3d8:	eba3 0801 	sub.w	r8, r3, r1
 800b3dc:	4490      	add	r8, r2
 800b3de:	4ba1      	ldr	r3, [pc, #644]	; (800b664 <_strtod_l+0x95c>)
 800b3e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3e4:	4598      	cmp	r8, r3
 800b3e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b3ea:	f280 80c7 	bge.w	800b57c <_strtod_l+0x874>
 800b3ee:	eba3 0308 	sub.w	r3, r3, r8
 800b3f2:	2b1f      	cmp	r3, #31
 800b3f4:	eba2 0203 	sub.w	r2, r2, r3
 800b3f8:	f04f 0101 	mov.w	r1, #1
 800b3fc:	f300 80b1 	bgt.w	800b562 <_strtod_l+0x85a>
 800b400:	fa01 f303 	lsl.w	r3, r1, r3
 800b404:	930d      	str	r3, [sp, #52]	; 0x34
 800b406:	2300      	movs	r3, #0
 800b408:	9308      	str	r3, [sp, #32]
 800b40a:	eb09 0802 	add.w	r8, r9, r2
 800b40e:	9b04      	ldr	r3, [sp, #16]
 800b410:	45c1      	cmp	r9, r8
 800b412:	4417      	add	r7, r2
 800b414:	441f      	add	r7, r3
 800b416:	464b      	mov	r3, r9
 800b418:	bfa8      	it	ge
 800b41a:	4643      	movge	r3, r8
 800b41c:	42bb      	cmp	r3, r7
 800b41e:	bfa8      	it	ge
 800b420:	463b      	movge	r3, r7
 800b422:	2b00      	cmp	r3, #0
 800b424:	bfc2      	ittt	gt
 800b426:	eba8 0803 	subgt.w	r8, r8, r3
 800b42a:	1aff      	subgt	r7, r7, r3
 800b42c:	eba9 0903 	subgt.w	r9, r9, r3
 800b430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b432:	2b00      	cmp	r3, #0
 800b434:	dd17      	ble.n	800b466 <_strtod_l+0x75e>
 800b436:	4631      	mov	r1, r6
 800b438:	461a      	mov	r2, r3
 800b43a:	4620      	mov	r0, r4
 800b43c:	f002 fb40 	bl	800dac0 <__pow5mult>
 800b440:	4606      	mov	r6, r0
 800b442:	2800      	cmp	r0, #0
 800b444:	f43f aea8 	beq.w	800b198 <_strtod_l+0x490>
 800b448:	4601      	mov	r1, r0
 800b44a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b44c:	4620      	mov	r0, r4
 800b44e:	f002 fa8d 	bl	800d96c <__multiply>
 800b452:	900b      	str	r0, [sp, #44]	; 0x2c
 800b454:	2800      	cmp	r0, #0
 800b456:	f43f ae9f 	beq.w	800b198 <_strtod_l+0x490>
 800b45a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b45c:	4620      	mov	r0, r4
 800b45e:	f002 f96d 	bl	800d73c <_Bfree>
 800b462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b464:	9318      	str	r3, [sp, #96]	; 0x60
 800b466:	f1b8 0f00 	cmp.w	r8, #0
 800b46a:	f300 808c 	bgt.w	800b586 <_strtod_l+0x87e>
 800b46e:	9b06      	ldr	r3, [sp, #24]
 800b470:	2b00      	cmp	r3, #0
 800b472:	dd08      	ble.n	800b486 <_strtod_l+0x77e>
 800b474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b476:	9905      	ldr	r1, [sp, #20]
 800b478:	4620      	mov	r0, r4
 800b47a:	f002 fb21 	bl	800dac0 <__pow5mult>
 800b47e:	9005      	str	r0, [sp, #20]
 800b480:	2800      	cmp	r0, #0
 800b482:	f43f ae89 	beq.w	800b198 <_strtod_l+0x490>
 800b486:	2f00      	cmp	r7, #0
 800b488:	dd08      	ble.n	800b49c <_strtod_l+0x794>
 800b48a:	9905      	ldr	r1, [sp, #20]
 800b48c:	463a      	mov	r2, r7
 800b48e:	4620      	mov	r0, r4
 800b490:	f002 fb70 	bl	800db74 <__lshift>
 800b494:	9005      	str	r0, [sp, #20]
 800b496:	2800      	cmp	r0, #0
 800b498:	f43f ae7e 	beq.w	800b198 <_strtod_l+0x490>
 800b49c:	f1b9 0f00 	cmp.w	r9, #0
 800b4a0:	dd08      	ble.n	800b4b4 <_strtod_l+0x7ac>
 800b4a2:	4631      	mov	r1, r6
 800b4a4:	464a      	mov	r2, r9
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f002 fb64 	bl	800db74 <__lshift>
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	f43f ae72 	beq.w	800b198 <_strtod_l+0x490>
 800b4b4:	9a05      	ldr	r2, [sp, #20]
 800b4b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f002 fbe7 	bl	800dc8c <__mdiff>
 800b4be:	4605      	mov	r5, r0
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	f43f ae69 	beq.w	800b198 <_strtod_l+0x490>
 800b4c6:	68c3      	ldr	r3, [r0, #12]
 800b4c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60c3      	str	r3, [r0, #12]
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	f002 fbc0 	bl	800dc54 <__mcmp>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	da60      	bge.n	800b59a <_strtod_l+0x892>
 800b4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4da:	ea53 030a 	orrs.w	r3, r3, sl
 800b4de:	f040 8082 	bne.w	800b5e6 <_strtod_l+0x8de>
 800b4e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d17d      	bne.n	800b5e6 <_strtod_l+0x8de>
 800b4ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4ee:	0d1b      	lsrs	r3, r3, #20
 800b4f0:	051b      	lsls	r3, r3, #20
 800b4f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b4f6:	d976      	bls.n	800b5e6 <_strtod_l+0x8de>
 800b4f8:	696b      	ldr	r3, [r5, #20]
 800b4fa:	b913      	cbnz	r3, 800b502 <_strtod_l+0x7fa>
 800b4fc:	692b      	ldr	r3, [r5, #16]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	dd71      	ble.n	800b5e6 <_strtod_l+0x8de>
 800b502:	4629      	mov	r1, r5
 800b504:	2201      	movs	r2, #1
 800b506:	4620      	mov	r0, r4
 800b508:	f002 fb34 	bl	800db74 <__lshift>
 800b50c:	4631      	mov	r1, r6
 800b50e:	4605      	mov	r5, r0
 800b510:	f002 fba0 	bl	800dc54 <__mcmp>
 800b514:	2800      	cmp	r0, #0
 800b516:	dd66      	ble.n	800b5e6 <_strtod_l+0x8de>
 800b518:	9904      	ldr	r1, [sp, #16]
 800b51a:	4a53      	ldr	r2, [pc, #332]	; (800b668 <_strtod_l+0x960>)
 800b51c:	465b      	mov	r3, fp
 800b51e:	2900      	cmp	r1, #0
 800b520:	f000 8081 	beq.w	800b626 <_strtod_l+0x91e>
 800b524:	ea02 010b 	and.w	r1, r2, fp
 800b528:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b52c:	dc7b      	bgt.n	800b626 <_strtod_l+0x91e>
 800b52e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b532:	f77f aea9 	ble.w	800b288 <_strtod_l+0x580>
 800b536:	4b4d      	ldr	r3, [pc, #308]	; (800b66c <_strtod_l+0x964>)
 800b538:	4650      	mov	r0, sl
 800b53a:	4659      	mov	r1, fp
 800b53c:	2200      	movs	r2, #0
 800b53e:	f7f5 f873 	bl	8000628 <__aeabi_dmul>
 800b542:	460b      	mov	r3, r1
 800b544:	4303      	orrs	r3, r0
 800b546:	bf08      	it	eq
 800b548:	2322      	moveq	r3, #34	; 0x22
 800b54a:	4682      	mov	sl, r0
 800b54c:	468b      	mov	fp, r1
 800b54e:	bf08      	it	eq
 800b550:	6023      	streq	r3, [r4, #0]
 800b552:	e62b      	b.n	800b1ac <_strtod_l+0x4a4>
 800b554:	f04f 32ff 	mov.w	r2, #4294967295
 800b558:	fa02 f303 	lsl.w	r3, r2, r3
 800b55c:	ea03 0a0a 	and.w	sl, r3, sl
 800b560:	e6e3      	b.n	800b32a <_strtod_l+0x622>
 800b562:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b566:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b56a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b56e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b572:	fa01 f308 	lsl.w	r3, r1, r8
 800b576:	9308      	str	r3, [sp, #32]
 800b578:	910d      	str	r1, [sp, #52]	; 0x34
 800b57a:	e746      	b.n	800b40a <_strtod_l+0x702>
 800b57c:	2300      	movs	r3, #0
 800b57e:	9308      	str	r3, [sp, #32]
 800b580:	2301      	movs	r3, #1
 800b582:	930d      	str	r3, [sp, #52]	; 0x34
 800b584:	e741      	b.n	800b40a <_strtod_l+0x702>
 800b586:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b588:	4642      	mov	r2, r8
 800b58a:	4620      	mov	r0, r4
 800b58c:	f002 faf2 	bl	800db74 <__lshift>
 800b590:	9018      	str	r0, [sp, #96]	; 0x60
 800b592:	2800      	cmp	r0, #0
 800b594:	f47f af6b 	bne.w	800b46e <_strtod_l+0x766>
 800b598:	e5fe      	b.n	800b198 <_strtod_l+0x490>
 800b59a:	465f      	mov	r7, fp
 800b59c:	d16e      	bne.n	800b67c <_strtod_l+0x974>
 800b59e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5a4:	b342      	cbz	r2, 800b5f8 <_strtod_l+0x8f0>
 800b5a6:	4a32      	ldr	r2, [pc, #200]	; (800b670 <_strtod_l+0x968>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d128      	bne.n	800b5fe <_strtod_l+0x8f6>
 800b5ac:	9b04      	ldr	r3, [sp, #16]
 800b5ae:	4651      	mov	r1, sl
 800b5b0:	b1eb      	cbz	r3, 800b5ee <_strtod_l+0x8e6>
 800b5b2:	4b2d      	ldr	r3, [pc, #180]	; (800b668 <_strtod_l+0x960>)
 800b5b4:	403b      	ands	r3, r7
 800b5b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b5be:	d819      	bhi.n	800b5f4 <_strtod_l+0x8ec>
 800b5c0:	0d1b      	lsrs	r3, r3, #20
 800b5c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b5c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ca:	4299      	cmp	r1, r3
 800b5cc:	d117      	bne.n	800b5fe <_strtod_l+0x8f6>
 800b5ce:	4b29      	ldr	r3, [pc, #164]	; (800b674 <_strtod_l+0x96c>)
 800b5d0:	429f      	cmp	r7, r3
 800b5d2:	d102      	bne.n	800b5da <_strtod_l+0x8d2>
 800b5d4:	3101      	adds	r1, #1
 800b5d6:	f43f addf 	beq.w	800b198 <_strtod_l+0x490>
 800b5da:	4b23      	ldr	r3, [pc, #140]	; (800b668 <_strtod_l+0x960>)
 800b5dc:	403b      	ands	r3, r7
 800b5de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b5e2:	f04f 0a00 	mov.w	sl, #0
 800b5e6:	9b04      	ldr	r3, [sp, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1a4      	bne.n	800b536 <_strtod_l+0x82e>
 800b5ec:	e5de      	b.n	800b1ac <_strtod_l+0x4a4>
 800b5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b5f2:	e7ea      	b.n	800b5ca <_strtod_l+0x8c2>
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	e7e8      	b.n	800b5ca <_strtod_l+0x8c2>
 800b5f8:	ea53 030a 	orrs.w	r3, r3, sl
 800b5fc:	d08c      	beq.n	800b518 <_strtod_l+0x810>
 800b5fe:	9b08      	ldr	r3, [sp, #32]
 800b600:	b1db      	cbz	r3, 800b63a <_strtod_l+0x932>
 800b602:	423b      	tst	r3, r7
 800b604:	d0ef      	beq.n	800b5e6 <_strtod_l+0x8de>
 800b606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b608:	9a04      	ldr	r2, [sp, #16]
 800b60a:	4650      	mov	r0, sl
 800b60c:	4659      	mov	r1, fp
 800b60e:	b1c3      	cbz	r3, 800b642 <_strtod_l+0x93a>
 800b610:	f7ff fb5b 	bl	800acca <sulp>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	ec51 0b18 	vmov	r0, r1, d8
 800b61c:	f7f4 fe4e 	bl	80002bc <__adddf3>
 800b620:	4682      	mov	sl, r0
 800b622:	468b      	mov	fp, r1
 800b624:	e7df      	b.n	800b5e6 <_strtod_l+0x8de>
 800b626:	4013      	ands	r3, r2
 800b628:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b62c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b630:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b634:	f04f 3aff 	mov.w	sl, #4294967295
 800b638:	e7d5      	b.n	800b5e6 <_strtod_l+0x8de>
 800b63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b63c:	ea13 0f0a 	tst.w	r3, sl
 800b640:	e7e0      	b.n	800b604 <_strtod_l+0x8fc>
 800b642:	f7ff fb42 	bl	800acca <sulp>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	ec51 0b18 	vmov	r0, r1, d8
 800b64e:	f7f4 fe33 	bl	80002b8 <__aeabi_dsub>
 800b652:	2200      	movs	r2, #0
 800b654:	2300      	movs	r3, #0
 800b656:	4682      	mov	sl, r0
 800b658:	468b      	mov	fp, r1
 800b65a:	f7f5 fa4d 	bl	8000af8 <__aeabi_dcmpeq>
 800b65e:	2800      	cmp	r0, #0
 800b660:	d0c1      	beq.n	800b5e6 <_strtod_l+0x8de>
 800b662:	e611      	b.n	800b288 <_strtod_l+0x580>
 800b664:	fffffc02 	.word	0xfffffc02
 800b668:	7ff00000 	.word	0x7ff00000
 800b66c:	39500000 	.word	0x39500000
 800b670:	000fffff 	.word	0x000fffff
 800b674:	7fefffff 	.word	0x7fefffff
 800b678:	0800fdc8 	.word	0x0800fdc8
 800b67c:	4631      	mov	r1, r6
 800b67e:	4628      	mov	r0, r5
 800b680:	f002 fc66 	bl	800df50 <__ratio>
 800b684:	ec59 8b10 	vmov	r8, r9, d0
 800b688:	ee10 0a10 	vmov	r0, s0
 800b68c:	2200      	movs	r2, #0
 800b68e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b692:	4649      	mov	r1, r9
 800b694:	f7f5 fa44 	bl	8000b20 <__aeabi_dcmple>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d07a      	beq.n	800b792 <_strtod_l+0xa8a>
 800b69c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d04a      	beq.n	800b738 <_strtod_l+0xa30>
 800b6a2:	4b95      	ldr	r3, [pc, #596]	; (800b8f8 <_strtod_l+0xbf0>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b6aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b8f8 <_strtod_l+0xbf0>
 800b6ae:	f04f 0800 	mov.w	r8, #0
 800b6b2:	4b92      	ldr	r3, [pc, #584]	; (800b8fc <_strtod_l+0xbf4>)
 800b6b4:	403b      	ands	r3, r7
 800b6b6:	930d      	str	r3, [sp, #52]	; 0x34
 800b6b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6ba:	4b91      	ldr	r3, [pc, #580]	; (800b900 <_strtod_l+0xbf8>)
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	f040 80b0 	bne.w	800b822 <_strtod_l+0xb1a>
 800b6c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b6ca:	ec4b ab10 	vmov	d0, sl, fp
 800b6ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b6d2:	f002 fb65 	bl	800dda0 <__ulp>
 800b6d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6da:	ec53 2b10 	vmov	r2, r3, d0
 800b6de:	f7f4 ffa3 	bl	8000628 <__aeabi_dmul>
 800b6e2:	4652      	mov	r2, sl
 800b6e4:	465b      	mov	r3, fp
 800b6e6:	f7f4 fde9 	bl	80002bc <__adddf3>
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4983      	ldr	r1, [pc, #524]	; (800b8fc <_strtod_l+0xbf4>)
 800b6ee:	4a85      	ldr	r2, [pc, #532]	; (800b904 <_strtod_l+0xbfc>)
 800b6f0:	4019      	ands	r1, r3
 800b6f2:	4291      	cmp	r1, r2
 800b6f4:	4682      	mov	sl, r0
 800b6f6:	d960      	bls.n	800b7ba <_strtod_l+0xab2>
 800b6f8:	ee18 3a90 	vmov	r3, s17
 800b6fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b700:	4293      	cmp	r3, r2
 800b702:	d104      	bne.n	800b70e <_strtod_l+0xa06>
 800b704:	ee18 3a10 	vmov	r3, s16
 800b708:	3301      	adds	r3, #1
 800b70a:	f43f ad45 	beq.w	800b198 <_strtod_l+0x490>
 800b70e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b910 <_strtod_l+0xc08>
 800b712:	f04f 3aff 	mov.w	sl, #4294967295
 800b716:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b718:	4620      	mov	r0, r4
 800b71a:	f002 f80f 	bl	800d73c <_Bfree>
 800b71e:	9905      	ldr	r1, [sp, #20]
 800b720:	4620      	mov	r0, r4
 800b722:	f002 f80b 	bl	800d73c <_Bfree>
 800b726:	4631      	mov	r1, r6
 800b728:	4620      	mov	r0, r4
 800b72a:	f002 f807 	bl	800d73c <_Bfree>
 800b72e:	4629      	mov	r1, r5
 800b730:	4620      	mov	r0, r4
 800b732:	f002 f803 	bl	800d73c <_Bfree>
 800b736:	e61a      	b.n	800b36e <_strtod_l+0x666>
 800b738:	f1ba 0f00 	cmp.w	sl, #0
 800b73c:	d11b      	bne.n	800b776 <_strtod_l+0xa6e>
 800b73e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b742:	b9f3      	cbnz	r3, 800b782 <_strtod_l+0xa7a>
 800b744:	4b6c      	ldr	r3, [pc, #432]	; (800b8f8 <_strtod_l+0xbf0>)
 800b746:	2200      	movs	r2, #0
 800b748:	4640      	mov	r0, r8
 800b74a:	4649      	mov	r1, r9
 800b74c:	f7f5 f9de 	bl	8000b0c <__aeabi_dcmplt>
 800b750:	b9d0      	cbnz	r0, 800b788 <_strtod_l+0xa80>
 800b752:	4640      	mov	r0, r8
 800b754:	4649      	mov	r1, r9
 800b756:	4b6c      	ldr	r3, [pc, #432]	; (800b908 <_strtod_l+0xc00>)
 800b758:	2200      	movs	r2, #0
 800b75a:	f7f4 ff65 	bl	8000628 <__aeabi_dmul>
 800b75e:	4680      	mov	r8, r0
 800b760:	4689      	mov	r9, r1
 800b762:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b766:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b76a:	9315      	str	r3, [sp, #84]	; 0x54
 800b76c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b770:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b774:	e79d      	b.n	800b6b2 <_strtod_l+0x9aa>
 800b776:	f1ba 0f01 	cmp.w	sl, #1
 800b77a:	d102      	bne.n	800b782 <_strtod_l+0xa7a>
 800b77c:	2f00      	cmp	r7, #0
 800b77e:	f43f ad83 	beq.w	800b288 <_strtod_l+0x580>
 800b782:	4b62      	ldr	r3, [pc, #392]	; (800b90c <_strtod_l+0xc04>)
 800b784:	2200      	movs	r2, #0
 800b786:	e78e      	b.n	800b6a6 <_strtod_l+0x99e>
 800b788:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b908 <_strtod_l+0xc00>
 800b78c:	f04f 0800 	mov.w	r8, #0
 800b790:	e7e7      	b.n	800b762 <_strtod_l+0xa5a>
 800b792:	4b5d      	ldr	r3, [pc, #372]	; (800b908 <_strtod_l+0xc00>)
 800b794:	4640      	mov	r0, r8
 800b796:	4649      	mov	r1, r9
 800b798:	2200      	movs	r2, #0
 800b79a:	f7f4 ff45 	bl	8000628 <__aeabi_dmul>
 800b79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7a0:	4680      	mov	r8, r0
 800b7a2:	4689      	mov	r9, r1
 800b7a4:	b933      	cbnz	r3, 800b7b4 <_strtod_l+0xaac>
 800b7a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7aa:	900e      	str	r0, [sp, #56]	; 0x38
 800b7ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b7b2:	e7dd      	b.n	800b770 <_strtod_l+0xa68>
 800b7b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b7b8:	e7f9      	b.n	800b7ae <_strtod_l+0xaa6>
 800b7ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b7be:	9b04      	ldr	r3, [sp, #16]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1a8      	bne.n	800b716 <_strtod_l+0xa0e>
 800b7c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7ca:	0d1b      	lsrs	r3, r3, #20
 800b7cc:	051b      	lsls	r3, r3, #20
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d1a1      	bne.n	800b716 <_strtod_l+0xa0e>
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	f7f5 fad7 	bl	8000d88 <__aeabi_d2lz>
 800b7da:	f7f4 fef7 	bl	80005cc <__aeabi_l2d>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	f7f4 fd67 	bl	80002b8 <__aeabi_dsub>
 800b7ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7f0:	ea43 030a 	orr.w	r3, r3, sl
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	4680      	mov	r8, r0
 800b7f8:	4689      	mov	r9, r1
 800b7fa:	d055      	beq.n	800b8a8 <_strtod_l+0xba0>
 800b7fc:	a336      	add	r3, pc, #216	; (adr r3, 800b8d8 <_strtod_l+0xbd0>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	f7f5 f983 	bl	8000b0c <__aeabi_dcmplt>
 800b806:	2800      	cmp	r0, #0
 800b808:	f47f acd0 	bne.w	800b1ac <_strtod_l+0x4a4>
 800b80c:	a334      	add	r3, pc, #208	; (adr r3, 800b8e0 <_strtod_l+0xbd8>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	4640      	mov	r0, r8
 800b814:	4649      	mov	r1, r9
 800b816:	f7f5 f997 	bl	8000b48 <__aeabi_dcmpgt>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	f43f af7b 	beq.w	800b716 <_strtod_l+0xa0e>
 800b820:	e4c4      	b.n	800b1ac <_strtod_l+0x4a4>
 800b822:	9b04      	ldr	r3, [sp, #16]
 800b824:	b333      	cbz	r3, 800b874 <_strtod_l+0xb6c>
 800b826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b828:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b82c:	d822      	bhi.n	800b874 <_strtod_l+0xb6c>
 800b82e:	a32e      	add	r3, pc, #184	; (adr r3, 800b8e8 <_strtod_l+0xbe0>)
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	4640      	mov	r0, r8
 800b836:	4649      	mov	r1, r9
 800b838:	f7f5 f972 	bl	8000b20 <__aeabi_dcmple>
 800b83c:	b1a0      	cbz	r0, 800b868 <_strtod_l+0xb60>
 800b83e:	4649      	mov	r1, r9
 800b840:	4640      	mov	r0, r8
 800b842:	f7f5 f9c9 	bl	8000bd8 <__aeabi_d2uiz>
 800b846:	2801      	cmp	r0, #1
 800b848:	bf38      	it	cc
 800b84a:	2001      	movcc	r0, #1
 800b84c:	f7f4 fe72 	bl	8000534 <__aeabi_ui2d>
 800b850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b852:	4680      	mov	r8, r0
 800b854:	4689      	mov	r9, r1
 800b856:	bb23      	cbnz	r3, 800b8a2 <_strtod_l+0xb9a>
 800b858:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b85c:	9010      	str	r0, [sp, #64]	; 0x40
 800b85e:	9311      	str	r3, [sp, #68]	; 0x44
 800b860:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b864:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b86a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b86c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b870:	1a9b      	subs	r3, r3, r2
 800b872:	9309      	str	r3, [sp, #36]	; 0x24
 800b874:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b878:	eeb0 0a48 	vmov.f32	s0, s16
 800b87c:	eef0 0a68 	vmov.f32	s1, s17
 800b880:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b884:	f002 fa8c 	bl	800dda0 <__ulp>
 800b888:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b88c:	ec53 2b10 	vmov	r2, r3, d0
 800b890:	f7f4 feca 	bl	8000628 <__aeabi_dmul>
 800b894:	ec53 2b18 	vmov	r2, r3, d8
 800b898:	f7f4 fd10 	bl	80002bc <__adddf3>
 800b89c:	4682      	mov	sl, r0
 800b89e:	468b      	mov	fp, r1
 800b8a0:	e78d      	b.n	800b7be <_strtod_l+0xab6>
 800b8a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b8a6:	e7db      	b.n	800b860 <_strtod_l+0xb58>
 800b8a8:	a311      	add	r3, pc, #68	; (adr r3, 800b8f0 <_strtod_l+0xbe8>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	f7f5 f92d 	bl	8000b0c <__aeabi_dcmplt>
 800b8b2:	e7b2      	b.n	800b81a <_strtod_l+0xb12>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8bc:	6013      	str	r3, [r2, #0]
 800b8be:	f7ff ba6b 	b.w	800ad98 <_strtod_l+0x90>
 800b8c2:	2a65      	cmp	r2, #101	; 0x65
 800b8c4:	f43f ab5f 	beq.w	800af86 <_strtod_l+0x27e>
 800b8c8:	2a45      	cmp	r2, #69	; 0x45
 800b8ca:	f43f ab5c 	beq.w	800af86 <_strtod_l+0x27e>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	f7ff bb94 	b.w	800affc <_strtod_l+0x2f4>
 800b8d4:	f3af 8000 	nop.w
 800b8d8:	94a03595 	.word	0x94a03595
 800b8dc:	3fdfffff 	.word	0x3fdfffff
 800b8e0:	35afe535 	.word	0x35afe535
 800b8e4:	3fe00000 	.word	0x3fe00000
 800b8e8:	ffc00000 	.word	0xffc00000
 800b8ec:	41dfffff 	.word	0x41dfffff
 800b8f0:	94a03595 	.word	0x94a03595
 800b8f4:	3fcfffff 	.word	0x3fcfffff
 800b8f8:	3ff00000 	.word	0x3ff00000
 800b8fc:	7ff00000 	.word	0x7ff00000
 800b900:	7fe00000 	.word	0x7fe00000
 800b904:	7c9fffff 	.word	0x7c9fffff
 800b908:	3fe00000 	.word	0x3fe00000
 800b90c:	bff00000 	.word	0xbff00000
 800b910:	7fefffff 	.word	0x7fefffff

0800b914 <_strtod_r>:
 800b914:	4b01      	ldr	r3, [pc, #4]	; (800b91c <_strtod_r+0x8>)
 800b916:	f7ff b9f7 	b.w	800ad08 <_strtod_l>
 800b91a:	bf00      	nop
 800b91c:	200000d4 	.word	0x200000d4

0800b920 <_strtol_l.constprop.0>:
 800b920:	2b01      	cmp	r3, #1
 800b922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b926:	d001      	beq.n	800b92c <_strtol_l.constprop.0+0xc>
 800b928:	2b24      	cmp	r3, #36	; 0x24
 800b92a:	d906      	bls.n	800b93a <_strtol_l.constprop.0+0x1a>
 800b92c:	f7fd f836 	bl	800899c <__errno>
 800b930:	2316      	movs	r3, #22
 800b932:	6003      	str	r3, [r0, #0]
 800b934:	2000      	movs	r0, #0
 800b936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b93a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ba20 <_strtol_l.constprop.0+0x100>
 800b93e:	460d      	mov	r5, r1
 800b940:	462e      	mov	r6, r5
 800b942:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b946:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b94a:	f017 0708 	ands.w	r7, r7, #8
 800b94e:	d1f7      	bne.n	800b940 <_strtol_l.constprop.0+0x20>
 800b950:	2c2d      	cmp	r4, #45	; 0x2d
 800b952:	d132      	bne.n	800b9ba <_strtol_l.constprop.0+0x9a>
 800b954:	782c      	ldrb	r4, [r5, #0]
 800b956:	2701      	movs	r7, #1
 800b958:	1cb5      	adds	r5, r6, #2
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d05b      	beq.n	800ba16 <_strtol_l.constprop.0+0xf6>
 800b95e:	2b10      	cmp	r3, #16
 800b960:	d109      	bne.n	800b976 <_strtol_l.constprop.0+0x56>
 800b962:	2c30      	cmp	r4, #48	; 0x30
 800b964:	d107      	bne.n	800b976 <_strtol_l.constprop.0+0x56>
 800b966:	782c      	ldrb	r4, [r5, #0]
 800b968:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b96c:	2c58      	cmp	r4, #88	; 0x58
 800b96e:	d14d      	bne.n	800ba0c <_strtol_l.constprop.0+0xec>
 800b970:	786c      	ldrb	r4, [r5, #1]
 800b972:	2310      	movs	r3, #16
 800b974:	3502      	adds	r5, #2
 800b976:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b97a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b97e:	f04f 0c00 	mov.w	ip, #0
 800b982:	fbb8 f9f3 	udiv	r9, r8, r3
 800b986:	4666      	mov	r6, ip
 800b988:	fb03 8a19 	mls	sl, r3, r9, r8
 800b98c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b990:	f1be 0f09 	cmp.w	lr, #9
 800b994:	d816      	bhi.n	800b9c4 <_strtol_l.constprop.0+0xa4>
 800b996:	4674      	mov	r4, lr
 800b998:	42a3      	cmp	r3, r4
 800b99a:	dd24      	ble.n	800b9e6 <_strtol_l.constprop.0+0xc6>
 800b99c:	f1bc 0f00 	cmp.w	ip, #0
 800b9a0:	db1e      	blt.n	800b9e0 <_strtol_l.constprop.0+0xc0>
 800b9a2:	45b1      	cmp	r9, r6
 800b9a4:	d31c      	bcc.n	800b9e0 <_strtol_l.constprop.0+0xc0>
 800b9a6:	d101      	bne.n	800b9ac <_strtol_l.constprop.0+0x8c>
 800b9a8:	45a2      	cmp	sl, r4
 800b9aa:	db19      	blt.n	800b9e0 <_strtol_l.constprop.0+0xc0>
 800b9ac:	fb06 4603 	mla	r6, r6, r3, r4
 800b9b0:	f04f 0c01 	mov.w	ip, #1
 800b9b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9b8:	e7e8      	b.n	800b98c <_strtol_l.constprop.0+0x6c>
 800b9ba:	2c2b      	cmp	r4, #43	; 0x2b
 800b9bc:	bf04      	itt	eq
 800b9be:	782c      	ldrbeq	r4, [r5, #0]
 800b9c0:	1cb5      	addeq	r5, r6, #2
 800b9c2:	e7ca      	b.n	800b95a <_strtol_l.constprop.0+0x3a>
 800b9c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b9c8:	f1be 0f19 	cmp.w	lr, #25
 800b9cc:	d801      	bhi.n	800b9d2 <_strtol_l.constprop.0+0xb2>
 800b9ce:	3c37      	subs	r4, #55	; 0x37
 800b9d0:	e7e2      	b.n	800b998 <_strtol_l.constprop.0+0x78>
 800b9d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b9d6:	f1be 0f19 	cmp.w	lr, #25
 800b9da:	d804      	bhi.n	800b9e6 <_strtol_l.constprop.0+0xc6>
 800b9dc:	3c57      	subs	r4, #87	; 0x57
 800b9de:	e7db      	b.n	800b998 <_strtol_l.constprop.0+0x78>
 800b9e0:	f04f 3cff 	mov.w	ip, #4294967295
 800b9e4:	e7e6      	b.n	800b9b4 <_strtol_l.constprop.0+0x94>
 800b9e6:	f1bc 0f00 	cmp.w	ip, #0
 800b9ea:	da05      	bge.n	800b9f8 <_strtol_l.constprop.0+0xd8>
 800b9ec:	2322      	movs	r3, #34	; 0x22
 800b9ee:	6003      	str	r3, [r0, #0]
 800b9f0:	4646      	mov	r6, r8
 800b9f2:	b942      	cbnz	r2, 800ba06 <_strtol_l.constprop.0+0xe6>
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	e79e      	b.n	800b936 <_strtol_l.constprop.0+0x16>
 800b9f8:	b107      	cbz	r7, 800b9fc <_strtol_l.constprop.0+0xdc>
 800b9fa:	4276      	negs	r6, r6
 800b9fc:	2a00      	cmp	r2, #0
 800b9fe:	d0f9      	beq.n	800b9f4 <_strtol_l.constprop.0+0xd4>
 800ba00:	f1bc 0f00 	cmp.w	ip, #0
 800ba04:	d000      	beq.n	800ba08 <_strtol_l.constprop.0+0xe8>
 800ba06:	1e69      	subs	r1, r5, #1
 800ba08:	6011      	str	r1, [r2, #0]
 800ba0a:	e7f3      	b.n	800b9f4 <_strtol_l.constprop.0+0xd4>
 800ba0c:	2430      	movs	r4, #48	; 0x30
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1b1      	bne.n	800b976 <_strtol_l.constprop.0+0x56>
 800ba12:	2308      	movs	r3, #8
 800ba14:	e7af      	b.n	800b976 <_strtol_l.constprop.0+0x56>
 800ba16:	2c30      	cmp	r4, #48	; 0x30
 800ba18:	d0a5      	beq.n	800b966 <_strtol_l.constprop.0+0x46>
 800ba1a:	230a      	movs	r3, #10
 800ba1c:	e7ab      	b.n	800b976 <_strtol_l.constprop.0+0x56>
 800ba1e:	bf00      	nop
 800ba20:	08010091 	.word	0x08010091

0800ba24 <_strtol_r>:
 800ba24:	f7ff bf7c 	b.w	800b920 <_strtol_l.constprop.0>

0800ba28 <strtol>:
 800ba28:	4613      	mov	r3, r2
 800ba2a:	460a      	mov	r2, r1
 800ba2c:	4601      	mov	r1, r0
 800ba2e:	4802      	ldr	r0, [pc, #8]	; (800ba38 <strtol+0x10>)
 800ba30:	6800      	ldr	r0, [r0, #0]
 800ba32:	f7ff bf75 	b.w	800b920 <_strtol_l.constprop.0>
 800ba36:	bf00      	nop
 800ba38:	2000000c 	.word	0x2000000c

0800ba3c <_strtoul_l.constprop.0>:
 800ba3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba40:	4f36      	ldr	r7, [pc, #216]	; (800bb1c <_strtoul_l.constprop.0+0xe0>)
 800ba42:	4686      	mov	lr, r0
 800ba44:	460d      	mov	r5, r1
 800ba46:	4628      	mov	r0, r5
 800ba48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba4c:	5de6      	ldrb	r6, [r4, r7]
 800ba4e:	f016 0608 	ands.w	r6, r6, #8
 800ba52:	d1f8      	bne.n	800ba46 <_strtoul_l.constprop.0+0xa>
 800ba54:	2c2d      	cmp	r4, #45	; 0x2d
 800ba56:	d12f      	bne.n	800bab8 <_strtoul_l.constprop.0+0x7c>
 800ba58:	782c      	ldrb	r4, [r5, #0]
 800ba5a:	2601      	movs	r6, #1
 800ba5c:	1c85      	adds	r5, r0, #2
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d057      	beq.n	800bb12 <_strtoul_l.constprop.0+0xd6>
 800ba62:	2b10      	cmp	r3, #16
 800ba64:	d109      	bne.n	800ba7a <_strtoul_l.constprop.0+0x3e>
 800ba66:	2c30      	cmp	r4, #48	; 0x30
 800ba68:	d107      	bne.n	800ba7a <_strtoul_l.constprop.0+0x3e>
 800ba6a:	7828      	ldrb	r0, [r5, #0]
 800ba6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ba70:	2858      	cmp	r0, #88	; 0x58
 800ba72:	d149      	bne.n	800bb08 <_strtoul_l.constprop.0+0xcc>
 800ba74:	786c      	ldrb	r4, [r5, #1]
 800ba76:	2310      	movs	r3, #16
 800ba78:	3502      	adds	r5, #2
 800ba7a:	f04f 38ff 	mov.w	r8, #4294967295
 800ba7e:	2700      	movs	r7, #0
 800ba80:	fbb8 f8f3 	udiv	r8, r8, r3
 800ba84:	fb03 f908 	mul.w	r9, r3, r8
 800ba88:	ea6f 0909 	mvn.w	r9, r9
 800ba8c:	4638      	mov	r0, r7
 800ba8e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ba92:	f1bc 0f09 	cmp.w	ip, #9
 800ba96:	d814      	bhi.n	800bac2 <_strtoul_l.constprop.0+0x86>
 800ba98:	4664      	mov	r4, ip
 800ba9a:	42a3      	cmp	r3, r4
 800ba9c:	dd22      	ble.n	800bae4 <_strtoul_l.constprop.0+0xa8>
 800ba9e:	2f00      	cmp	r7, #0
 800baa0:	db1d      	blt.n	800bade <_strtoul_l.constprop.0+0xa2>
 800baa2:	4580      	cmp	r8, r0
 800baa4:	d31b      	bcc.n	800bade <_strtoul_l.constprop.0+0xa2>
 800baa6:	d101      	bne.n	800baac <_strtoul_l.constprop.0+0x70>
 800baa8:	45a1      	cmp	r9, r4
 800baaa:	db18      	blt.n	800bade <_strtoul_l.constprop.0+0xa2>
 800baac:	fb00 4003 	mla	r0, r0, r3, r4
 800bab0:	2701      	movs	r7, #1
 800bab2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bab6:	e7ea      	b.n	800ba8e <_strtoul_l.constprop.0+0x52>
 800bab8:	2c2b      	cmp	r4, #43	; 0x2b
 800baba:	bf04      	itt	eq
 800babc:	782c      	ldrbeq	r4, [r5, #0]
 800babe:	1c85      	addeq	r5, r0, #2
 800bac0:	e7cd      	b.n	800ba5e <_strtoul_l.constprop.0+0x22>
 800bac2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bac6:	f1bc 0f19 	cmp.w	ip, #25
 800baca:	d801      	bhi.n	800bad0 <_strtoul_l.constprop.0+0x94>
 800bacc:	3c37      	subs	r4, #55	; 0x37
 800bace:	e7e4      	b.n	800ba9a <_strtoul_l.constprop.0+0x5e>
 800bad0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bad4:	f1bc 0f19 	cmp.w	ip, #25
 800bad8:	d804      	bhi.n	800bae4 <_strtoul_l.constprop.0+0xa8>
 800bada:	3c57      	subs	r4, #87	; 0x57
 800badc:	e7dd      	b.n	800ba9a <_strtoul_l.constprop.0+0x5e>
 800bade:	f04f 37ff 	mov.w	r7, #4294967295
 800bae2:	e7e6      	b.n	800bab2 <_strtoul_l.constprop.0+0x76>
 800bae4:	2f00      	cmp	r7, #0
 800bae6:	da07      	bge.n	800baf8 <_strtoul_l.constprop.0+0xbc>
 800bae8:	2322      	movs	r3, #34	; 0x22
 800baea:	f8ce 3000 	str.w	r3, [lr]
 800baee:	f04f 30ff 	mov.w	r0, #4294967295
 800baf2:	b932      	cbnz	r2, 800bb02 <_strtoul_l.constprop.0+0xc6>
 800baf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baf8:	b106      	cbz	r6, 800bafc <_strtoul_l.constprop.0+0xc0>
 800bafa:	4240      	negs	r0, r0
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	d0f9      	beq.n	800baf4 <_strtoul_l.constprop.0+0xb8>
 800bb00:	b107      	cbz	r7, 800bb04 <_strtoul_l.constprop.0+0xc8>
 800bb02:	1e69      	subs	r1, r5, #1
 800bb04:	6011      	str	r1, [r2, #0]
 800bb06:	e7f5      	b.n	800baf4 <_strtoul_l.constprop.0+0xb8>
 800bb08:	2430      	movs	r4, #48	; 0x30
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1b5      	bne.n	800ba7a <_strtoul_l.constprop.0+0x3e>
 800bb0e:	2308      	movs	r3, #8
 800bb10:	e7b3      	b.n	800ba7a <_strtoul_l.constprop.0+0x3e>
 800bb12:	2c30      	cmp	r4, #48	; 0x30
 800bb14:	d0a9      	beq.n	800ba6a <_strtoul_l.constprop.0+0x2e>
 800bb16:	230a      	movs	r3, #10
 800bb18:	e7af      	b.n	800ba7a <_strtoul_l.constprop.0+0x3e>
 800bb1a:	bf00      	nop
 800bb1c:	08010091 	.word	0x08010091

0800bb20 <_strtoul_r>:
 800bb20:	f7ff bf8c 	b.w	800ba3c <_strtoul_l.constprop.0>

0800bb24 <strtoul>:
 800bb24:	4613      	mov	r3, r2
 800bb26:	460a      	mov	r2, r1
 800bb28:	4601      	mov	r1, r0
 800bb2a:	4802      	ldr	r0, [pc, #8]	; (800bb34 <strtoul+0x10>)
 800bb2c:	6800      	ldr	r0, [r0, #0]
 800bb2e:	f7ff bf85 	b.w	800ba3c <_strtoul_l.constprop.0>
 800bb32:	bf00      	nop
 800bb34:	2000000c 	.word	0x2000000c

0800bb38 <__tzcalc_limits>:
 800bb38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	4605      	mov	r5, r0
 800bb3e:	f001 fccf 	bl	800d4e0 <__gettzinfo>
 800bb42:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800bb46:	429d      	cmp	r5, r3
 800bb48:	f340 8099 	ble.w	800bc7e <__tzcalc_limits+0x146>
 800bb4c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800bb50:	18ac      	adds	r4, r5, r2
 800bb52:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800bb56:	f240 126d 	movw	r2, #365	; 0x16d
 800bb5a:	10a4      	asrs	r4, r4, #2
 800bb5c:	fb02 4403 	mla	r4, r2, r3, r4
 800bb60:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800bb64:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800bb68:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb6c:	441c      	add	r4, r3
 800bb6e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800bb72:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800bb76:	fb95 fcf3 	sdiv	ip, r5, r3
 800bb7a:	fb03 5c1c 	mls	ip, r3, ip, r5
 800bb7e:	186a      	adds	r2, r5, r1
 800bb80:	fabc f68c 	clz	r6, ip
 800bb84:	fbb2 f2f3 	udiv	r2, r2, r3
 800bb88:	f005 0303 	and.w	r3, r5, #3
 800bb8c:	4414      	add	r4, r2
 800bb8e:	2264      	movs	r2, #100	; 0x64
 800bb90:	6045      	str	r5, [r0, #4]
 800bb92:	fb95 f7f2 	sdiv	r7, r5, r2
 800bb96:	0976      	lsrs	r6, r6, #5
 800bb98:	fb02 5717 	mls	r7, r2, r7, r5
 800bb9c:	4601      	mov	r1, r0
 800bb9e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	f04f 0a07 	mov.w	sl, #7
 800bba8:	7a0d      	ldrb	r5, [r1, #8]
 800bbaa:	694b      	ldr	r3, [r1, #20]
 800bbac:	2d4a      	cmp	r5, #74	; 0x4a
 800bbae:	d12d      	bne.n	800bc0c <__tzcalc_limits+0xd4>
 800bbb0:	9a00      	ldr	r2, [sp, #0]
 800bbb2:	eb04 0e03 	add.w	lr, r4, r3
 800bbb6:	b902      	cbnz	r2, 800bbba <__tzcalc_limits+0x82>
 800bbb8:	b917      	cbnz	r7, 800bbc0 <__tzcalc_limits+0x88>
 800bbba:	f1bc 0f00 	cmp.w	ip, #0
 800bbbe:	d123      	bne.n	800bc08 <__tzcalc_limits+0xd0>
 800bbc0:	2b3b      	cmp	r3, #59	; 0x3b
 800bbc2:	bfd4      	ite	le
 800bbc4:	2300      	movle	r3, #0
 800bbc6:	2301      	movgt	r3, #1
 800bbc8:	4473      	add	r3, lr
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	698d      	ldr	r5, [r1, #24]
 800bbce:	4a2d      	ldr	r2, [pc, #180]	; (800bc84 <__tzcalc_limits+0x14c>)
 800bbd0:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800bbd4:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800bbd8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800bbda:	18ed      	adds	r5, r5, r3
 800bbdc:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800bbe0:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800bbe4:	3128      	adds	r1, #40	; 0x28
 800bbe6:	458b      	cmp	fp, r1
 800bbe8:	d1de      	bne.n	800bba8 <__tzcalc_limits+0x70>
 800bbea:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800bbee:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800bbf2:	428c      	cmp	r4, r1
 800bbf4:	eb72 0303 	sbcs.w	r3, r2, r3
 800bbf8:	bfb4      	ite	lt
 800bbfa:	2301      	movlt	r3, #1
 800bbfc:	2300      	movge	r3, #0
 800bbfe:	6003      	str	r3, [r0, #0]
 800bc00:	2001      	movs	r0, #1
 800bc02:	b003      	add	sp, #12
 800bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc08:	2300      	movs	r3, #0
 800bc0a:	e7dd      	b.n	800bbc8 <__tzcalc_limits+0x90>
 800bc0c:	2d44      	cmp	r5, #68	; 0x44
 800bc0e:	d101      	bne.n	800bc14 <__tzcalc_limits+0xdc>
 800bc10:	4423      	add	r3, r4
 800bc12:	e7db      	b.n	800bbcc <__tzcalc_limits+0x94>
 800bc14:	9a00      	ldr	r2, [sp, #0]
 800bc16:	bb62      	cbnz	r2, 800bc72 <__tzcalc_limits+0x13a>
 800bc18:	2f00      	cmp	r7, #0
 800bc1a:	bf0c      	ite	eq
 800bc1c:	4635      	moveq	r5, r6
 800bc1e:	2501      	movne	r5, #1
 800bc20:	68ca      	ldr	r2, [r1, #12]
 800bc22:	9201      	str	r2, [sp, #4]
 800bc24:	4a18      	ldr	r2, [pc, #96]	; (800bc88 <__tzcalc_limits+0x150>)
 800bc26:	f04f 0930 	mov.w	r9, #48	; 0x30
 800bc2a:	fb09 2505 	mla	r5, r9, r5, r2
 800bc2e:	46a6      	mov	lr, r4
 800bc30:	f04f 0800 	mov.w	r8, #0
 800bc34:	3d04      	subs	r5, #4
 800bc36:	9a01      	ldr	r2, [sp, #4]
 800bc38:	f108 0801 	add.w	r8, r8, #1
 800bc3c:	4542      	cmp	r2, r8
 800bc3e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800bc42:	dc18      	bgt.n	800bc76 <__tzcalc_limits+0x13e>
 800bc44:	f10e 0504 	add.w	r5, lr, #4
 800bc48:	fb95 f8fa 	sdiv	r8, r5, sl
 800bc4c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800bc50:	eba5 0808 	sub.w	r8, r5, r8
 800bc54:	ebb3 0808 	subs.w	r8, r3, r8
 800bc58:	690b      	ldr	r3, [r1, #16]
 800bc5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc5e:	bf48      	it	mi
 800bc60:	f108 0807 	addmi.w	r8, r8, #7
 800bc64:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bc68:	4443      	add	r3, r8
 800bc6a:	454b      	cmp	r3, r9
 800bc6c:	da05      	bge.n	800bc7a <__tzcalc_limits+0x142>
 800bc6e:	4473      	add	r3, lr
 800bc70:	e7ac      	b.n	800bbcc <__tzcalc_limits+0x94>
 800bc72:	4635      	mov	r5, r6
 800bc74:	e7d4      	b.n	800bc20 <__tzcalc_limits+0xe8>
 800bc76:	44ce      	add	lr, r9
 800bc78:	e7dd      	b.n	800bc36 <__tzcalc_limits+0xfe>
 800bc7a:	3b07      	subs	r3, #7
 800bc7c:	e7f5      	b.n	800bc6a <__tzcalc_limits+0x132>
 800bc7e:	2000      	movs	r0, #0
 800bc80:	e7bf      	b.n	800bc02 <__tzcalc_limits+0xca>
 800bc82:	bf00      	nop
 800bc84:	00015180 	.word	0x00015180
 800bc88:	0800fcb0 	.word	0x0800fcb0

0800bc8c <__tz_lock>:
 800bc8c:	4801      	ldr	r0, [pc, #4]	; (800bc94 <__tz_lock+0x8>)
 800bc8e:	f001 bce0 	b.w	800d652 <__retarget_lock_acquire>
 800bc92:	bf00      	nop
 800bc94:	2000035c 	.word	0x2000035c

0800bc98 <__tz_unlock>:
 800bc98:	4801      	ldr	r0, [pc, #4]	; (800bca0 <__tz_unlock+0x8>)
 800bc9a:	f001 bcdc 	b.w	800d656 <__retarget_lock_release>
 800bc9e:	bf00      	nop
 800bca0:	2000035c 	.word	0x2000035c

0800bca4 <_tzset_unlocked>:
 800bca4:	4b01      	ldr	r3, [pc, #4]	; (800bcac <_tzset_unlocked+0x8>)
 800bca6:	6818      	ldr	r0, [r3, #0]
 800bca8:	f000 b802 	b.w	800bcb0 <_tzset_unlocked_r>
 800bcac:	2000000c 	.word	0x2000000c

0800bcb0 <_tzset_unlocked_r>:
 800bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	b08d      	sub	sp, #52	; 0x34
 800bcb6:	4607      	mov	r7, r0
 800bcb8:	f001 fc12 	bl	800d4e0 <__gettzinfo>
 800bcbc:	49b0      	ldr	r1, [pc, #704]	; (800bf80 <_tzset_unlocked_r+0x2d0>)
 800bcbe:	4eb1      	ldr	r6, [pc, #708]	; (800bf84 <_tzset_unlocked_r+0x2d4>)
 800bcc0:	4605      	mov	r5, r0
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f001 fc04 	bl	800d4d0 <_getenv_r>
 800bcc8:	4604      	mov	r4, r0
 800bcca:	b970      	cbnz	r0, 800bcea <_tzset_unlocked_r+0x3a>
 800bccc:	4bae      	ldr	r3, [pc, #696]	; (800bf88 <_tzset_unlocked_r+0x2d8>)
 800bcce:	4aaf      	ldr	r2, [pc, #700]	; (800bf8c <_tzset_unlocked_r+0x2dc>)
 800bcd0:	6018      	str	r0, [r3, #0]
 800bcd2:	4baf      	ldr	r3, [pc, #700]	; (800bf90 <_tzset_unlocked_r+0x2e0>)
 800bcd4:	6018      	str	r0, [r3, #0]
 800bcd6:	4baf      	ldr	r3, [pc, #700]	; (800bf94 <_tzset_unlocked_r+0x2e4>)
 800bcd8:	6830      	ldr	r0, [r6, #0]
 800bcda:	e9c3 2200 	strd	r2, r2, [r3]
 800bcde:	f7fc ffa1 	bl	8008c24 <free>
 800bce2:	6034      	str	r4, [r6, #0]
 800bce4:	b00d      	add	sp, #52	; 0x34
 800bce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcea:	6831      	ldr	r1, [r6, #0]
 800bcec:	2900      	cmp	r1, #0
 800bcee:	d162      	bne.n	800bdb6 <_tzset_unlocked_r+0x106>
 800bcf0:	6830      	ldr	r0, [r6, #0]
 800bcf2:	f7fc ff97 	bl	8008c24 <free>
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f7f4 fa7c 	bl	80001f4 <strlen>
 800bcfc:	1c41      	adds	r1, r0, #1
 800bcfe:	4638      	mov	r0, r7
 800bd00:	f7fd fa8c 	bl	800921c <_malloc_r>
 800bd04:	6030      	str	r0, [r6, #0]
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d15a      	bne.n	800bdc0 <_tzset_unlocked_r+0x110>
 800bd0a:	7823      	ldrb	r3, [r4, #0]
 800bd0c:	4aa2      	ldr	r2, [pc, #648]	; (800bf98 <_tzset_unlocked_r+0x2e8>)
 800bd0e:	49a3      	ldr	r1, [pc, #652]	; (800bf9c <_tzset_unlocked_r+0x2ec>)
 800bd10:	2b3a      	cmp	r3, #58	; 0x3a
 800bd12:	bf08      	it	eq
 800bd14:	3401      	addeq	r4, #1
 800bd16:	ae0a      	add	r6, sp, #40	; 0x28
 800bd18:	4633      	mov	r3, r6
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f7fe f9d6 	bl	800a0cc <siscanf>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	dddf      	ble.n	800bce4 <_tzset_unlocked_r+0x34>
 800bd24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd26:	18e7      	adds	r7, r4, r3
 800bd28:	5ce3      	ldrb	r3, [r4, r3]
 800bd2a:	2b2d      	cmp	r3, #45	; 0x2d
 800bd2c:	d14c      	bne.n	800bdc8 <_tzset_unlocked_r+0x118>
 800bd2e:	3701      	adds	r7, #1
 800bd30:	f04f 38ff 	mov.w	r8, #4294967295
 800bd34:	f10d 0a20 	add.w	sl, sp, #32
 800bd38:	f10d 0b1e 	add.w	fp, sp, #30
 800bd3c:	2400      	movs	r4, #0
 800bd3e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800bd42:	4997      	ldr	r1, [pc, #604]	; (800bfa0 <_tzset_unlocked_r+0x2f0>)
 800bd44:	9603      	str	r6, [sp, #12]
 800bd46:	f8cd b000 	str.w	fp, [sp]
 800bd4a:	4633      	mov	r3, r6
 800bd4c:	aa07      	add	r2, sp, #28
 800bd4e:	4638      	mov	r0, r7
 800bd50:	f8ad 401e 	strh.w	r4, [sp, #30]
 800bd54:	f8ad 4020 	strh.w	r4, [sp, #32]
 800bd58:	f7fe f9b8 	bl	800a0cc <siscanf>
 800bd5c:	42a0      	cmp	r0, r4
 800bd5e:	ddc1      	ble.n	800bce4 <_tzset_unlocked_r+0x34>
 800bd60:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800bd64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bd68:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800bfac <_tzset_unlocked_r+0x2fc>
 800bd6c:	213c      	movs	r1, #60	; 0x3c
 800bd6e:	fb01 3302 	mla	r3, r1, r2, r3
 800bd72:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800bd76:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800bd7a:	fb01 3302 	mla	r3, r1, r2, r3
 800bd7e:	fb08 f303 	mul.w	r3, r8, r3
 800bd82:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800bf94 <_tzset_unlocked_r+0x2e4>
 800bd86:	62ab      	str	r3, [r5, #40]	; 0x28
 800bd88:	4b83      	ldr	r3, [pc, #524]	; (800bf98 <_tzset_unlocked_r+0x2e8>)
 800bd8a:	f8c8 3000 	str.w	r3, [r8]
 800bd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd90:	4982      	ldr	r1, [pc, #520]	; (800bf9c <_tzset_unlocked_r+0x2ec>)
 800bd92:	441f      	add	r7, r3
 800bd94:	464a      	mov	r2, r9
 800bd96:	4633      	mov	r3, r6
 800bd98:	4638      	mov	r0, r7
 800bd9a:	f7fe f997 	bl	800a0cc <siscanf>
 800bd9e:	42a0      	cmp	r0, r4
 800bda0:	dc18      	bgt.n	800bdd4 <_tzset_unlocked_r+0x124>
 800bda2:	f8d8 3000 	ldr.w	r3, [r8]
 800bda6:	f8c8 3004 	str.w	r3, [r8, #4]
 800bdaa:	4b77      	ldr	r3, [pc, #476]	; (800bf88 <_tzset_unlocked_r+0x2d8>)
 800bdac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800bdae:	601a      	str	r2, [r3, #0]
 800bdb0:	4b77      	ldr	r3, [pc, #476]	; (800bf90 <_tzset_unlocked_r+0x2e0>)
 800bdb2:	601c      	str	r4, [r3, #0]
 800bdb4:	e796      	b.n	800bce4 <_tzset_unlocked_r+0x34>
 800bdb6:	f7f4 fa13 	bl	80001e0 <strcmp>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d198      	bne.n	800bcf0 <_tzset_unlocked_r+0x40>
 800bdbe:	e791      	b.n	800bce4 <_tzset_unlocked_r+0x34>
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	f7fe fa03 	bl	800a1cc <strcpy>
 800bdc6:	e7a0      	b.n	800bd0a <_tzset_unlocked_r+0x5a>
 800bdc8:	2b2b      	cmp	r3, #43	; 0x2b
 800bdca:	bf08      	it	eq
 800bdcc:	3701      	addeq	r7, #1
 800bdce:	f04f 0801 	mov.w	r8, #1
 800bdd2:	e7af      	b.n	800bd34 <_tzset_unlocked_r+0x84>
 800bdd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdd6:	f8c8 9004 	str.w	r9, [r8, #4]
 800bdda:	18fc      	adds	r4, r7, r3
 800bddc:	5cfb      	ldrb	r3, [r7, r3]
 800bdde:	2b2d      	cmp	r3, #45	; 0x2d
 800bde0:	f040 808b 	bne.w	800befa <_tzset_unlocked_r+0x24a>
 800bde4:	3401      	adds	r4, #1
 800bde6:	f04f 37ff 	mov.w	r7, #4294967295
 800bdea:	2300      	movs	r3, #0
 800bdec:	f8ad 301c 	strh.w	r3, [sp, #28]
 800bdf0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bdf4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800bdf8:	930a      	str	r3, [sp, #40]	; 0x28
 800bdfa:	e9cd a602 	strd	sl, r6, [sp, #8]
 800bdfe:	e9cd b600 	strd	fp, r6, [sp]
 800be02:	4967      	ldr	r1, [pc, #412]	; (800bfa0 <_tzset_unlocked_r+0x2f0>)
 800be04:	4633      	mov	r3, r6
 800be06:	aa07      	add	r2, sp, #28
 800be08:	4620      	mov	r0, r4
 800be0a:	f7fe f95f 	bl	800a0cc <siscanf>
 800be0e:	2800      	cmp	r0, #0
 800be10:	dc78      	bgt.n	800bf04 <_tzset_unlocked_r+0x254>
 800be12:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800be14:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800be18:	652b      	str	r3, [r5, #80]	; 0x50
 800be1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be1c:	462f      	mov	r7, r5
 800be1e:	441c      	add	r4, r3
 800be20:	f04f 0900 	mov.w	r9, #0
 800be24:	7823      	ldrb	r3, [r4, #0]
 800be26:	2b2c      	cmp	r3, #44	; 0x2c
 800be28:	bf08      	it	eq
 800be2a:	3401      	addeq	r4, #1
 800be2c:	f894 8000 	ldrb.w	r8, [r4]
 800be30:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800be34:	d178      	bne.n	800bf28 <_tzset_unlocked_r+0x278>
 800be36:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800be3a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800be3e:	ab09      	add	r3, sp, #36	; 0x24
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	4958      	ldr	r1, [pc, #352]	; (800bfa4 <_tzset_unlocked_r+0x2f4>)
 800be44:	9603      	str	r6, [sp, #12]
 800be46:	4633      	mov	r3, r6
 800be48:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800be4c:	4620      	mov	r0, r4
 800be4e:	f7fe f93d 	bl	800a0cc <siscanf>
 800be52:	2803      	cmp	r0, #3
 800be54:	f47f af46 	bne.w	800bce4 <_tzset_unlocked_r+0x34>
 800be58:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800be5c:	1e4b      	subs	r3, r1, #1
 800be5e:	2b0b      	cmp	r3, #11
 800be60:	f63f af40 	bhi.w	800bce4 <_tzset_unlocked_r+0x34>
 800be64:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800be68:	1e53      	subs	r3, r2, #1
 800be6a:	2b04      	cmp	r3, #4
 800be6c:	f63f af3a 	bhi.w	800bce4 <_tzset_unlocked_r+0x34>
 800be70:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800be74:	2b06      	cmp	r3, #6
 800be76:	f63f af35 	bhi.w	800bce4 <_tzset_unlocked_r+0x34>
 800be7a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800be7e:	f887 8008 	strb.w	r8, [r7, #8]
 800be82:	617b      	str	r3, [r7, #20]
 800be84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be86:	eb04 0803 	add.w	r8, r4, r3
 800be8a:	2302      	movs	r3, #2
 800be8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800be90:	2300      	movs	r3, #0
 800be92:	f8ad 301e 	strh.w	r3, [sp, #30]
 800be96:	f8ad 3020 	strh.w	r3, [sp, #32]
 800be9a:	930a      	str	r3, [sp, #40]	; 0x28
 800be9c:	f898 3000 	ldrb.w	r3, [r8]
 800bea0:	2b2f      	cmp	r3, #47	; 0x2f
 800bea2:	d109      	bne.n	800beb8 <_tzset_unlocked_r+0x208>
 800bea4:	e9cd a602 	strd	sl, r6, [sp, #8]
 800bea8:	e9cd b600 	strd	fp, r6, [sp]
 800beac:	493e      	ldr	r1, [pc, #248]	; (800bfa8 <_tzset_unlocked_r+0x2f8>)
 800beae:	4633      	mov	r3, r6
 800beb0:	aa07      	add	r2, sp, #28
 800beb2:	4640      	mov	r0, r8
 800beb4:	f7fe f90a 	bl	800a0cc <siscanf>
 800beb8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800bebc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bec0:	213c      	movs	r1, #60	; 0x3c
 800bec2:	fb01 3302 	mla	r3, r1, r2, r3
 800bec6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800beca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800bece:	fb01 3302 	mla	r3, r1, r2, r3
 800bed2:	61bb      	str	r3, [r7, #24]
 800bed4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bed6:	3728      	adds	r7, #40	; 0x28
 800bed8:	4444      	add	r4, r8
 800beda:	f1b9 0f00 	cmp.w	r9, #0
 800bede:	d020      	beq.n	800bf22 <_tzset_unlocked_r+0x272>
 800bee0:	6868      	ldr	r0, [r5, #4]
 800bee2:	f7ff fe29 	bl	800bb38 <__tzcalc_limits>
 800bee6:	4b28      	ldr	r3, [pc, #160]	; (800bf88 <_tzset_unlocked_r+0x2d8>)
 800bee8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800beee:	1a9b      	subs	r3, r3, r2
 800bef0:	4a27      	ldr	r2, [pc, #156]	; (800bf90 <_tzset_unlocked_r+0x2e0>)
 800bef2:	bf18      	it	ne
 800bef4:	2301      	movne	r3, #1
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	e6f4      	b.n	800bce4 <_tzset_unlocked_r+0x34>
 800befa:	2b2b      	cmp	r3, #43	; 0x2b
 800befc:	bf08      	it	eq
 800befe:	3401      	addeq	r4, #1
 800bf00:	2701      	movs	r7, #1
 800bf02:	e772      	b.n	800bdea <_tzset_unlocked_r+0x13a>
 800bf04:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800bf08:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bf0c:	213c      	movs	r1, #60	; 0x3c
 800bf0e:	fb01 3302 	mla	r3, r1, r2, r3
 800bf12:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800bf16:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800bf1a:	fb01 3302 	mla	r3, r1, r2, r3
 800bf1e:	437b      	muls	r3, r7
 800bf20:	e77a      	b.n	800be18 <_tzset_unlocked_r+0x168>
 800bf22:	f04f 0901 	mov.w	r9, #1
 800bf26:	e77d      	b.n	800be24 <_tzset_unlocked_r+0x174>
 800bf28:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800bf2c:	bf06      	itte	eq
 800bf2e:	3401      	addeq	r4, #1
 800bf30:	4643      	moveq	r3, r8
 800bf32:	2344      	movne	r3, #68	; 0x44
 800bf34:	220a      	movs	r2, #10
 800bf36:	a90b      	add	r1, sp, #44	; 0x2c
 800bf38:	4620      	mov	r0, r4
 800bf3a:	9305      	str	r3, [sp, #20]
 800bf3c:	f7ff fdf2 	bl	800bb24 <strtoul>
 800bf40:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800bf44:	9b05      	ldr	r3, [sp, #20]
 800bf46:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800bf4a:	45a0      	cmp	r8, r4
 800bf4c:	d114      	bne.n	800bf78 <_tzset_unlocked_r+0x2c8>
 800bf4e:	234d      	movs	r3, #77	; 0x4d
 800bf50:	f1b9 0f00 	cmp.w	r9, #0
 800bf54:	d107      	bne.n	800bf66 <_tzset_unlocked_r+0x2b6>
 800bf56:	722b      	strb	r3, [r5, #8]
 800bf58:	2103      	movs	r1, #3
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800bf60:	f8c5 9014 	str.w	r9, [r5, #20]
 800bf64:	e791      	b.n	800be8a <_tzset_unlocked_r+0x1da>
 800bf66:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800bf6a:	220b      	movs	r2, #11
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800bf72:	2300      	movs	r3, #0
 800bf74:	63eb      	str	r3, [r5, #60]	; 0x3c
 800bf76:	e788      	b.n	800be8a <_tzset_unlocked_r+0x1da>
 800bf78:	b280      	uxth	r0, r0
 800bf7a:	723b      	strb	r3, [r7, #8]
 800bf7c:	6178      	str	r0, [r7, #20]
 800bf7e:	e784      	b.n	800be8a <_tzset_unlocked_r+0x1da>
 800bf80:	08010018 	.word	0x08010018
 800bf84:	2000034c 	.word	0x2000034c
 800bf88:	20000354 	.word	0x20000354
 800bf8c:	0801001b 	.word	0x0801001b
 800bf90:	20000350 	.word	0x20000350
 800bf94:	20000070 	.word	0x20000070
 800bf98:	2000033f 	.word	0x2000033f
 800bf9c:	0801001f 	.word	0x0801001f
 800bfa0:	08010042 	.word	0x08010042
 800bfa4:	0801002e 	.word	0x0801002e
 800bfa8:	08010041 	.word	0x08010041
 800bfac:	20000334 	.word	0x20000334

0800bfb0 <_write_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4d07      	ldr	r5, [pc, #28]	; (800bfd0 <_write_r+0x20>)
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	4608      	mov	r0, r1
 800bfb8:	4611      	mov	r1, r2
 800bfba:	2200      	movs	r2, #0
 800bfbc:	602a      	str	r2, [r5, #0]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	f003 faac 	bl	800f51c <_write>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_write_r+0x1e>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_write_r+0x1e>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20000360 	.word	0x20000360

0800bfd4 <abs>:
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	bfb8      	it	lt
 800bfd8:	4240      	neglt	r0, r0
 800bfda:	4770      	bx	lr

0800bfdc <__assert_func>:
 800bfdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfde:	4614      	mov	r4, r2
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	4b09      	ldr	r3, [pc, #36]	; (800c008 <__assert_func+0x2c>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	68d8      	ldr	r0, [r3, #12]
 800bfea:	b14c      	cbz	r4, 800c000 <__assert_func+0x24>
 800bfec:	4b07      	ldr	r3, [pc, #28]	; (800c00c <__assert_func+0x30>)
 800bfee:	9100      	str	r1, [sp, #0]
 800bff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bff4:	4906      	ldr	r1, [pc, #24]	; (800c010 <__assert_func+0x34>)
 800bff6:	462b      	mov	r3, r5
 800bff8:	f000 feac 	bl	800cd54 <fiprintf>
 800bffc:	f002 ff60 	bl	800eec0 <abort>
 800c000:	4b04      	ldr	r3, [pc, #16]	; (800c014 <__assert_func+0x38>)
 800c002:	461c      	mov	r4, r3
 800c004:	e7f3      	b.n	800bfee <__assert_func+0x12>
 800c006:	bf00      	nop
 800c008:	2000000c 	.word	0x2000000c
 800c00c:	08010054 	.word	0x08010054
 800c010:	08010061 	.word	0x08010061
 800c014:	0801008f 	.word	0x0801008f

0800c018 <_close_r>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	4d06      	ldr	r5, [pc, #24]	; (800c034 <_close_r+0x1c>)
 800c01c:	2300      	movs	r3, #0
 800c01e:	4604      	mov	r4, r0
 800c020:	4608      	mov	r0, r1
 800c022:	602b      	str	r3, [r5, #0]
 800c024:	f003 fa34 	bl	800f490 <_close>
 800c028:	1c43      	adds	r3, r0, #1
 800c02a:	d102      	bne.n	800c032 <_close_r+0x1a>
 800c02c:	682b      	ldr	r3, [r5, #0]
 800c02e:	b103      	cbz	r3, 800c032 <_close_r+0x1a>
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	bd38      	pop	{r3, r4, r5, pc}
 800c034:	20000360 	.word	0x20000360

0800c038 <div>:
 800c038:	2900      	cmp	r1, #0
 800c03a:	b510      	push	{r4, lr}
 800c03c:	fb91 f4f2 	sdiv	r4, r1, r2
 800c040:	fb02 1314 	mls	r3, r2, r4, r1
 800c044:	db06      	blt.n	800c054 <div+0x1c>
 800c046:	2b00      	cmp	r3, #0
 800c048:	da01      	bge.n	800c04e <div+0x16>
 800c04a:	3401      	adds	r4, #1
 800c04c:	1a9b      	subs	r3, r3, r2
 800c04e:	e9c0 4300 	strd	r4, r3, [r0]
 800c052:	bd10      	pop	{r4, pc}
 800c054:	2b00      	cmp	r3, #0
 800c056:	bfc4      	itt	gt
 800c058:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800c05c:	189b      	addgt	r3, r3, r2
 800c05e:	e7f6      	b.n	800c04e <div+0x16>

0800c060 <quorem>:
 800c060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	6903      	ldr	r3, [r0, #16]
 800c066:	690c      	ldr	r4, [r1, #16]
 800c068:	42a3      	cmp	r3, r4
 800c06a:	4607      	mov	r7, r0
 800c06c:	f2c0 8081 	blt.w	800c172 <quorem+0x112>
 800c070:	3c01      	subs	r4, #1
 800c072:	f101 0814 	add.w	r8, r1, #20
 800c076:	f100 0514 	add.w	r5, r0, #20
 800c07a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c07e:	9301      	str	r3, [sp, #4]
 800c080:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c084:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c088:	3301      	adds	r3, #1
 800c08a:	429a      	cmp	r2, r3
 800c08c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c090:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c094:	fbb2 f6f3 	udiv	r6, r2, r3
 800c098:	d331      	bcc.n	800c0fe <quorem+0x9e>
 800c09a:	f04f 0e00 	mov.w	lr, #0
 800c09e:	4640      	mov	r0, r8
 800c0a0:	46ac      	mov	ip, r5
 800c0a2:	46f2      	mov	sl, lr
 800c0a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c0a8:	b293      	uxth	r3, r2
 800c0aa:	fb06 e303 	mla	r3, r6, r3, lr
 800c0ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	ebaa 0303 	sub.w	r3, sl, r3
 800c0b8:	f8dc a000 	ldr.w	sl, [ip]
 800c0bc:	0c12      	lsrs	r2, r2, #16
 800c0be:	fa13 f38a 	uxtah	r3, r3, sl
 800c0c2:	fb06 e202 	mla	r2, r6, r2, lr
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	9b00      	ldr	r3, [sp, #0]
 800c0ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c0ce:	b292      	uxth	r2, r2
 800c0d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c0d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0d8:	f8bd 3000 	ldrh.w	r3, [sp]
 800c0dc:	4581      	cmp	r9, r0
 800c0de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0e2:	f84c 3b04 	str.w	r3, [ip], #4
 800c0e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c0ea:	d2db      	bcs.n	800c0a4 <quorem+0x44>
 800c0ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800c0f0:	b92b      	cbnz	r3, 800c0fe <quorem+0x9e>
 800c0f2:	9b01      	ldr	r3, [sp, #4]
 800c0f4:	3b04      	subs	r3, #4
 800c0f6:	429d      	cmp	r5, r3
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	d32e      	bcc.n	800c15a <quorem+0xfa>
 800c0fc:	613c      	str	r4, [r7, #16]
 800c0fe:	4638      	mov	r0, r7
 800c100:	f001 fda8 	bl	800dc54 <__mcmp>
 800c104:	2800      	cmp	r0, #0
 800c106:	db24      	blt.n	800c152 <quorem+0xf2>
 800c108:	3601      	adds	r6, #1
 800c10a:	4628      	mov	r0, r5
 800c10c:	f04f 0c00 	mov.w	ip, #0
 800c110:	f858 2b04 	ldr.w	r2, [r8], #4
 800c114:	f8d0 e000 	ldr.w	lr, [r0]
 800c118:	b293      	uxth	r3, r2
 800c11a:	ebac 0303 	sub.w	r3, ip, r3
 800c11e:	0c12      	lsrs	r2, r2, #16
 800c120:	fa13 f38e 	uxtah	r3, r3, lr
 800c124:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c128:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c132:	45c1      	cmp	r9, r8
 800c134:	f840 3b04 	str.w	r3, [r0], #4
 800c138:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c13c:	d2e8      	bcs.n	800c110 <quorem+0xb0>
 800c13e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c146:	b922      	cbnz	r2, 800c152 <quorem+0xf2>
 800c148:	3b04      	subs	r3, #4
 800c14a:	429d      	cmp	r5, r3
 800c14c:	461a      	mov	r2, r3
 800c14e:	d30a      	bcc.n	800c166 <quorem+0x106>
 800c150:	613c      	str	r4, [r7, #16]
 800c152:	4630      	mov	r0, r6
 800c154:	b003      	add	sp, #12
 800c156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15a:	6812      	ldr	r2, [r2, #0]
 800c15c:	3b04      	subs	r3, #4
 800c15e:	2a00      	cmp	r2, #0
 800c160:	d1cc      	bne.n	800c0fc <quorem+0x9c>
 800c162:	3c01      	subs	r4, #1
 800c164:	e7c7      	b.n	800c0f6 <quorem+0x96>
 800c166:	6812      	ldr	r2, [r2, #0]
 800c168:	3b04      	subs	r3, #4
 800c16a:	2a00      	cmp	r2, #0
 800c16c:	d1f0      	bne.n	800c150 <quorem+0xf0>
 800c16e:	3c01      	subs	r4, #1
 800c170:	e7eb      	b.n	800c14a <quorem+0xea>
 800c172:	2000      	movs	r0, #0
 800c174:	e7ee      	b.n	800c154 <quorem+0xf4>
	...

0800c178 <_dtoa_r>:
 800c178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17c:	ed2d 8b04 	vpush	{d8-d9}
 800c180:	ec57 6b10 	vmov	r6, r7, d0
 800c184:	b093      	sub	sp, #76	; 0x4c
 800c186:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c188:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c18c:	9106      	str	r1, [sp, #24]
 800c18e:	ee10 aa10 	vmov	sl, s0
 800c192:	4604      	mov	r4, r0
 800c194:	9209      	str	r2, [sp, #36]	; 0x24
 800c196:	930c      	str	r3, [sp, #48]	; 0x30
 800c198:	46bb      	mov	fp, r7
 800c19a:	b975      	cbnz	r5, 800c1ba <_dtoa_r+0x42>
 800c19c:	2010      	movs	r0, #16
 800c19e:	f7fc fd39 	bl	8008c14 <malloc>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	6260      	str	r0, [r4, #36]	; 0x24
 800c1a6:	b920      	cbnz	r0, 800c1b2 <_dtoa_r+0x3a>
 800c1a8:	4ba7      	ldr	r3, [pc, #668]	; (800c448 <_dtoa_r+0x2d0>)
 800c1aa:	21ea      	movs	r1, #234	; 0xea
 800c1ac:	48a7      	ldr	r0, [pc, #668]	; (800c44c <_dtoa_r+0x2d4>)
 800c1ae:	f7ff ff15 	bl	800bfdc <__assert_func>
 800c1b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c1b6:	6005      	str	r5, [r0, #0]
 800c1b8:	60c5      	str	r5, [r0, #12]
 800c1ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1bc:	6819      	ldr	r1, [r3, #0]
 800c1be:	b151      	cbz	r1, 800c1d6 <_dtoa_r+0x5e>
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	604a      	str	r2, [r1, #4]
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	4093      	lsls	r3, r2
 800c1c8:	608b      	str	r3, [r1, #8]
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f001 fab6 	bl	800d73c <_Bfree>
 800c1d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	1e3b      	subs	r3, r7, #0
 800c1d8:	bfaa      	itet	ge
 800c1da:	2300      	movge	r3, #0
 800c1dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c1e0:	f8c8 3000 	strge.w	r3, [r8]
 800c1e4:	4b9a      	ldr	r3, [pc, #616]	; (800c450 <_dtoa_r+0x2d8>)
 800c1e6:	bfbc      	itt	lt
 800c1e8:	2201      	movlt	r2, #1
 800c1ea:	f8c8 2000 	strlt.w	r2, [r8]
 800c1ee:	ea33 030b 	bics.w	r3, r3, fp
 800c1f2:	d11b      	bne.n	800c22c <_dtoa_r+0xb4>
 800c1f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c1fa:	6013      	str	r3, [r2, #0]
 800c1fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c200:	4333      	orrs	r3, r6
 800c202:	f000 8592 	beq.w	800cd2a <_dtoa_r+0xbb2>
 800c206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c208:	b963      	cbnz	r3, 800c224 <_dtoa_r+0xac>
 800c20a:	4b92      	ldr	r3, [pc, #584]	; (800c454 <_dtoa_r+0x2dc>)
 800c20c:	e022      	b.n	800c254 <_dtoa_r+0xdc>
 800c20e:	4b92      	ldr	r3, [pc, #584]	; (800c458 <_dtoa_r+0x2e0>)
 800c210:	9301      	str	r3, [sp, #4]
 800c212:	3308      	adds	r3, #8
 800c214:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c216:	6013      	str	r3, [r2, #0]
 800c218:	9801      	ldr	r0, [sp, #4]
 800c21a:	b013      	add	sp, #76	; 0x4c
 800c21c:	ecbd 8b04 	vpop	{d8-d9}
 800c220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c224:	4b8b      	ldr	r3, [pc, #556]	; (800c454 <_dtoa_r+0x2dc>)
 800c226:	9301      	str	r3, [sp, #4]
 800c228:	3303      	adds	r3, #3
 800c22a:	e7f3      	b.n	800c214 <_dtoa_r+0x9c>
 800c22c:	2200      	movs	r2, #0
 800c22e:	2300      	movs	r3, #0
 800c230:	4650      	mov	r0, sl
 800c232:	4659      	mov	r1, fp
 800c234:	f7f4 fc60 	bl	8000af8 <__aeabi_dcmpeq>
 800c238:	ec4b ab19 	vmov	d9, sl, fp
 800c23c:	4680      	mov	r8, r0
 800c23e:	b158      	cbz	r0, 800c258 <_dtoa_r+0xe0>
 800c240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c242:	2301      	movs	r3, #1
 800c244:	6013      	str	r3, [r2, #0]
 800c246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f000 856b 	beq.w	800cd24 <_dtoa_r+0xbac>
 800c24e:	4883      	ldr	r0, [pc, #524]	; (800c45c <_dtoa_r+0x2e4>)
 800c250:	6018      	str	r0, [r3, #0]
 800c252:	1e43      	subs	r3, r0, #1
 800c254:	9301      	str	r3, [sp, #4]
 800c256:	e7df      	b.n	800c218 <_dtoa_r+0xa0>
 800c258:	ec4b ab10 	vmov	d0, sl, fp
 800c25c:	aa10      	add	r2, sp, #64	; 0x40
 800c25e:	a911      	add	r1, sp, #68	; 0x44
 800c260:	4620      	mov	r0, r4
 800c262:	f001 fe19 	bl	800de98 <__d2b>
 800c266:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c26a:	ee08 0a10 	vmov	s16, r0
 800c26e:	2d00      	cmp	r5, #0
 800c270:	f000 8084 	beq.w	800c37c <_dtoa_r+0x204>
 800c274:	ee19 3a90 	vmov	r3, s19
 800c278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c27c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c280:	4656      	mov	r6, sl
 800c282:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c28a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c28e:	4b74      	ldr	r3, [pc, #464]	; (800c460 <_dtoa_r+0x2e8>)
 800c290:	2200      	movs	r2, #0
 800c292:	4630      	mov	r0, r6
 800c294:	4639      	mov	r1, r7
 800c296:	f7f4 f80f 	bl	80002b8 <__aeabi_dsub>
 800c29a:	a365      	add	r3, pc, #404	; (adr r3, 800c430 <_dtoa_r+0x2b8>)
 800c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a0:	f7f4 f9c2 	bl	8000628 <__aeabi_dmul>
 800c2a4:	a364      	add	r3, pc, #400	; (adr r3, 800c438 <_dtoa_r+0x2c0>)
 800c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2aa:	f7f4 f807 	bl	80002bc <__adddf3>
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	460f      	mov	r7, r1
 800c2b4:	f7f4 f94e 	bl	8000554 <__aeabi_i2d>
 800c2b8:	a361      	add	r3, pc, #388	; (adr r3, 800c440 <_dtoa_r+0x2c8>)
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	f7f4 f9b3 	bl	8000628 <__aeabi_dmul>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	f7f3 fff7 	bl	80002bc <__adddf3>
 800c2ce:	4606      	mov	r6, r0
 800c2d0:	460f      	mov	r7, r1
 800c2d2:	f7f4 fc59 	bl	8000b88 <__aeabi_d2iz>
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	9000      	str	r0, [sp, #0]
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4630      	mov	r0, r6
 800c2de:	4639      	mov	r1, r7
 800c2e0:	f7f4 fc14 	bl	8000b0c <__aeabi_dcmplt>
 800c2e4:	b150      	cbz	r0, 800c2fc <_dtoa_r+0x184>
 800c2e6:	9800      	ldr	r0, [sp, #0]
 800c2e8:	f7f4 f934 	bl	8000554 <__aeabi_i2d>
 800c2ec:	4632      	mov	r2, r6
 800c2ee:	463b      	mov	r3, r7
 800c2f0:	f7f4 fc02 	bl	8000af8 <__aeabi_dcmpeq>
 800c2f4:	b910      	cbnz	r0, 800c2fc <_dtoa_r+0x184>
 800c2f6:	9b00      	ldr	r3, [sp, #0]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	9b00      	ldr	r3, [sp, #0]
 800c2fe:	2b16      	cmp	r3, #22
 800c300:	d85a      	bhi.n	800c3b8 <_dtoa_r+0x240>
 800c302:	9a00      	ldr	r2, [sp, #0]
 800c304:	4b57      	ldr	r3, [pc, #348]	; (800c464 <_dtoa_r+0x2ec>)
 800c306:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30e:	ec51 0b19 	vmov	r0, r1, d9
 800c312:	f7f4 fbfb 	bl	8000b0c <__aeabi_dcmplt>
 800c316:	2800      	cmp	r0, #0
 800c318:	d050      	beq.n	800c3bc <_dtoa_r+0x244>
 800c31a:	9b00      	ldr	r3, [sp, #0]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	2300      	movs	r3, #0
 800c322:	930b      	str	r3, [sp, #44]	; 0x2c
 800c324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c326:	1b5d      	subs	r5, r3, r5
 800c328:	1e6b      	subs	r3, r5, #1
 800c32a:	9305      	str	r3, [sp, #20]
 800c32c:	bf45      	ittet	mi
 800c32e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c332:	9304      	strmi	r3, [sp, #16]
 800c334:	2300      	movpl	r3, #0
 800c336:	2300      	movmi	r3, #0
 800c338:	bf4c      	ite	mi
 800c33a:	9305      	strmi	r3, [sp, #20]
 800c33c:	9304      	strpl	r3, [sp, #16]
 800c33e:	9b00      	ldr	r3, [sp, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	db3d      	blt.n	800c3c0 <_dtoa_r+0x248>
 800c344:	9b05      	ldr	r3, [sp, #20]
 800c346:	9a00      	ldr	r2, [sp, #0]
 800c348:	920a      	str	r2, [sp, #40]	; 0x28
 800c34a:	4413      	add	r3, r2
 800c34c:	9305      	str	r3, [sp, #20]
 800c34e:	2300      	movs	r3, #0
 800c350:	9307      	str	r3, [sp, #28]
 800c352:	9b06      	ldr	r3, [sp, #24]
 800c354:	2b09      	cmp	r3, #9
 800c356:	f200 8089 	bhi.w	800c46c <_dtoa_r+0x2f4>
 800c35a:	2b05      	cmp	r3, #5
 800c35c:	bfc4      	itt	gt
 800c35e:	3b04      	subgt	r3, #4
 800c360:	9306      	strgt	r3, [sp, #24]
 800c362:	9b06      	ldr	r3, [sp, #24]
 800c364:	f1a3 0302 	sub.w	r3, r3, #2
 800c368:	bfcc      	ite	gt
 800c36a:	2500      	movgt	r5, #0
 800c36c:	2501      	movle	r5, #1
 800c36e:	2b03      	cmp	r3, #3
 800c370:	f200 8087 	bhi.w	800c482 <_dtoa_r+0x30a>
 800c374:	e8df f003 	tbb	[pc, r3]
 800c378:	59383a2d 	.word	0x59383a2d
 800c37c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c380:	441d      	add	r5, r3
 800c382:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c386:	2b20      	cmp	r3, #32
 800c388:	bfc1      	itttt	gt
 800c38a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c38e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c392:	fa0b f303 	lslgt.w	r3, fp, r3
 800c396:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c39a:	bfda      	itte	le
 800c39c:	f1c3 0320 	rsble	r3, r3, #32
 800c3a0:	fa06 f003 	lslle.w	r0, r6, r3
 800c3a4:	4318      	orrgt	r0, r3
 800c3a6:	f7f4 f8c5 	bl	8000534 <__aeabi_ui2d>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	4606      	mov	r6, r0
 800c3ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c3b2:	3d01      	subs	r5, #1
 800c3b4:	930e      	str	r3, [sp, #56]	; 0x38
 800c3b6:	e76a      	b.n	800c28e <_dtoa_r+0x116>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e7b2      	b.n	800c322 <_dtoa_r+0x1aa>
 800c3bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c3be:	e7b1      	b.n	800c324 <_dtoa_r+0x1ac>
 800c3c0:	9b04      	ldr	r3, [sp, #16]
 800c3c2:	9a00      	ldr	r2, [sp, #0]
 800c3c4:	1a9b      	subs	r3, r3, r2
 800c3c6:	9304      	str	r3, [sp, #16]
 800c3c8:	4253      	negs	r3, r2
 800c3ca:	9307      	str	r3, [sp, #28]
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c3d0:	e7bf      	b.n	800c352 <_dtoa_r+0x1da>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9308      	str	r3, [sp, #32]
 800c3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	dc55      	bgt.n	800c488 <_dtoa_r+0x310>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c3e6:	e00c      	b.n	800c402 <_dtoa_r+0x28a>
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e7f3      	b.n	800c3d4 <_dtoa_r+0x25c>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3f0:	9308      	str	r3, [sp, #32]
 800c3f2:	9b00      	ldr	r3, [sp, #0]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	9302      	str	r3, [sp, #8]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	9303      	str	r3, [sp, #12]
 800c3fe:	bfb8      	it	lt
 800c400:	2301      	movlt	r3, #1
 800c402:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c404:	2200      	movs	r2, #0
 800c406:	6042      	str	r2, [r0, #4]
 800c408:	2204      	movs	r2, #4
 800c40a:	f102 0614 	add.w	r6, r2, #20
 800c40e:	429e      	cmp	r6, r3
 800c410:	6841      	ldr	r1, [r0, #4]
 800c412:	d93d      	bls.n	800c490 <_dtoa_r+0x318>
 800c414:	4620      	mov	r0, r4
 800c416:	f001 f951 	bl	800d6bc <_Balloc>
 800c41a:	9001      	str	r0, [sp, #4]
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d13b      	bne.n	800c498 <_dtoa_r+0x320>
 800c420:	4b11      	ldr	r3, [pc, #68]	; (800c468 <_dtoa_r+0x2f0>)
 800c422:	4602      	mov	r2, r0
 800c424:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c428:	e6c0      	b.n	800c1ac <_dtoa_r+0x34>
 800c42a:	2301      	movs	r3, #1
 800c42c:	e7df      	b.n	800c3ee <_dtoa_r+0x276>
 800c42e:	bf00      	nop
 800c430:	636f4361 	.word	0x636f4361
 800c434:	3fd287a7 	.word	0x3fd287a7
 800c438:	8b60c8b3 	.word	0x8b60c8b3
 800c43c:	3fc68a28 	.word	0x3fc68a28
 800c440:	509f79fb 	.word	0x509f79fb
 800c444:	3fd34413 	.word	0x3fd34413
 800c448:	0800fbdc 	.word	0x0800fbdc
 800c44c:	0801019e 	.word	0x0801019e
 800c450:	7ff00000 	.word	0x7ff00000
 800c454:	0801019a 	.word	0x0801019a
 800c458:	08010191 	.word	0x08010191
 800c45c:	080103f2 	.word	0x080103f2
 800c460:	3ff80000 	.word	0x3ff80000
 800c464:	08010308 	.word	0x08010308
 800c468:	080101f9 	.word	0x080101f9
 800c46c:	2501      	movs	r5, #1
 800c46e:	2300      	movs	r3, #0
 800c470:	9306      	str	r3, [sp, #24]
 800c472:	9508      	str	r5, [sp, #32]
 800c474:	f04f 33ff 	mov.w	r3, #4294967295
 800c478:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c47c:	2200      	movs	r2, #0
 800c47e:	2312      	movs	r3, #18
 800c480:	e7b0      	b.n	800c3e4 <_dtoa_r+0x26c>
 800c482:	2301      	movs	r3, #1
 800c484:	9308      	str	r3, [sp, #32]
 800c486:	e7f5      	b.n	800c474 <_dtoa_r+0x2fc>
 800c488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c48a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c48e:	e7b8      	b.n	800c402 <_dtoa_r+0x28a>
 800c490:	3101      	adds	r1, #1
 800c492:	6041      	str	r1, [r0, #4]
 800c494:	0052      	lsls	r2, r2, #1
 800c496:	e7b8      	b.n	800c40a <_dtoa_r+0x292>
 800c498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c49a:	9a01      	ldr	r2, [sp, #4]
 800c49c:	601a      	str	r2, [r3, #0]
 800c49e:	9b03      	ldr	r3, [sp, #12]
 800c4a0:	2b0e      	cmp	r3, #14
 800c4a2:	f200 809d 	bhi.w	800c5e0 <_dtoa_r+0x468>
 800c4a6:	2d00      	cmp	r5, #0
 800c4a8:	f000 809a 	beq.w	800c5e0 <_dtoa_r+0x468>
 800c4ac:	9b00      	ldr	r3, [sp, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	dd32      	ble.n	800c518 <_dtoa_r+0x3a0>
 800c4b2:	4ab7      	ldr	r2, [pc, #732]	; (800c790 <_dtoa_r+0x618>)
 800c4b4:	f003 030f 	and.w	r3, r3, #15
 800c4b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c4bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4c0:	9b00      	ldr	r3, [sp, #0]
 800c4c2:	05d8      	lsls	r0, r3, #23
 800c4c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c4c8:	d516      	bpl.n	800c4f8 <_dtoa_r+0x380>
 800c4ca:	4bb2      	ldr	r3, [pc, #712]	; (800c794 <_dtoa_r+0x61c>)
 800c4cc:	ec51 0b19 	vmov	r0, r1, d9
 800c4d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c4d4:	f7f4 f9d2 	bl	800087c <__aeabi_ddiv>
 800c4d8:	f007 070f 	and.w	r7, r7, #15
 800c4dc:	4682      	mov	sl, r0
 800c4de:	468b      	mov	fp, r1
 800c4e0:	2503      	movs	r5, #3
 800c4e2:	4eac      	ldr	r6, [pc, #688]	; (800c794 <_dtoa_r+0x61c>)
 800c4e4:	b957      	cbnz	r7, 800c4fc <_dtoa_r+0x384>
 800c4e6:	4642      	mov	r2, r8
 800c4e8:	464b      	mov	r3, r9
 800c4ea:	4650      	mov	r0, sl
 800c4ec:	4659      	mov	r1, fp
 800c4ee:	f7f4 f9c5 	bl	800087c <__aeabi_ddiv>
 800c4f2:	4682      	mov	sl, r0
 800c4f4:	468b      	mov	fp, r1
 800c4f6:	e028      	b.n	800c54a <_dtoa_r+0x3d2>
 800c4f8:	2502      	movs	r5, #2
 800c4fa:	e7f2      	b.n	800c4e2 <_dtoa_r+0x36a>
 800c4fc:	07f9      	lsls	r1, r7, #31
 800c4fe:	d508      	bpl.n	800c512 <_dtoa_r+0x39a>
 800c500:	4640      	mov	r0, r8
 800c502:	4649      	mov	r1, r9
 800c504:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c508:	f7f4 f88e 	bl	8000628 <__aeabi_dmul>
 800c50c:	3501      	adds	r5, #1
 800c50e:	4680      	mov	r8, r0
 800c510:	4689      	mov	r9, r1
 800c512:	107f      	asrs	r7, r7, #1
 800c514:	3608      	adds	r6, #8
 800c516:	e7e5      	b.n	800c4e4 <_dtoa_r+0x36c>
 800c518:	f000 809b 	beq.w	800c652 <_dtoa_r+0x4da>
 800c51c:	9b00      	ldr	r3, [sp, #0]
 800c51e:	4f9d      	ldr	r7, [pc, #628]	; (800c794 <_dtoa_r+0x61c>)
 800c520:	425e      	negs	r6, r3
 800c522:	4b9b      	ldr	r3, [pc, #620]	; (800c790 <_dtoa_r+0x618>)
 800c524:	f006 020f 	and.w	r2, r6, #15
 800c528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c530:	ec51 0b19 	vmov	r0, r1, d9
 800c534:	f7f4 f878 	bl	8000628 <__aeabi_dmul>
 800c538:	1136      	asrs	r6, r6, #4
 800c53a:	4682      	mov	sl, r0
 800c53c:	468b      	mov	fp, r1
 800c53e:	2300      	movs	r3, #0
 800c540:	2502      	movs	r5, #2
 800c542:	2e00      	cmp	r6, #0
 800c544:	d17a      	bne.n	800c63c <_dtoa_r+0x4c4>
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1d3      	bne.n	800c4f2 <_dtoa_r+0x37a>
 800c54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f000 8082 	beq.w	800c656 <_dtoa_r+0x4de>
 800c552:	4b91      	ldr	r3, [pc, #580]	; (800c798 <_dtoa_r+0x620>)
 800c554:	2200      	movs	r2, #0
 800c556:	4650      	mov	r0, sl
 800c558:	4659      	mov	r1, fp
 800c55a:	f7f4 fad7 	bl	8000b0c <__aeabi_dcmplt>
 800c55e:	2800      	cmp	r0, #0
 800c560:	d079      	beq.n	800c656 <_dtoa_r+0x4de>
 800c562:	9b03      	ldr	r3, [sp, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d076      	beq.n	800c656 <_dtoa_r+0x4de>
 800c568:	9b02      	ldr	r3, [sp, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	dd36      	ble.n	800c5dc <_dtoa_r+0x464>
 800c56e:	9b00      	ldr	r3, [sp, #0]
 800c570:	4650      	mov	r0, sl
 800c572:	4659      	mov	r1, fp
 800c574:	1e5f      	subs	r7, r3, #1
 800c576:	2200      	movs	r2, #0
 800c578:	4b88      	ldr	r3, [pc, #544]	; (800c79c <_dtoa_r+0x624>)
 800c57a:	f7f4 f855 	bl	8000628 <__aeabi_dmul>
 800c57e:	9e02      	ldr	r6, [sp, #8]
 800c580:	4682      	mov	sl, r0
 800c582:	468b      	mov	fp, r1
 800c584:	3501      	adds	r5, #1
 800c586:	4628      	mov	r0, r5
 800c588:	f7f3 ffe4 	bl	8000554 <__aeabi_i2d>
 800c58c:	4652      	mov	r2, sl
 800c58e:	465b      	mov	r3, fp
 800c590:	f7f4 f84a 	bl	8000628 <__aeabi_dmul>
 800c594:	4b82      	ldr	r3, [pc, #520]	; (800c7a0 <_dtoa_r+0x628>)
 800c596:	2200      	movs	r2, #0
 800c598:	f7f3 fe90 	bl	80002bc <__adddf3>
 800c59c:	46d0      	mov	r8, sl
 800c59e:	46d9      	mov	r9, fp
 800c5a0:	4682      	mov	sl, r0
 800c5a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c5a6:	2e00      	cmp	r6, #0
 800c5a8:	d158      	bne.n	800c65c <_dtoa_r+0x4e4>
 800c5aa:	4b7e      	ldr	r3, [pc, #504]	; (800c7a4 <_dtoa_r+0x62c>)
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	4640      	mov	r0, r8
 800c5b0:	4649      	mov	r1, r9
 800c5b2:	f7f3 fe81 	bl	80002b8 <__aeabi_dsub>
 800c5b6:	4652      	mov	r2, sl
 800c5b8:	465b      	mov	r3, fp
 800c5ba:	4680      	mov	r8, r0
 800c5bc:	4689      	mov	r9, r1
 800c5be:	f7f4 fac3 	bl	8000b48 <__aeabi_dcmpgt>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	f040 8295 	bne.w	800caf2 <_dtoa_r+0x97a>
 800c5c8:	4652      	mov	r2, sl
 800c5ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c5ce:	4640      	mov	r0, r8
 800c5d0:	4649      	mov	r1, r9
 800c5d2:	f7f4 fa9b 	bl	8000b0c <__aeabi_dcmplt>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	f040 8289 	bne.w	800caee <_dtoa_r+0x976>
 800c5dc:	ec5b ab19 	vmov	sl, fp, d9
 800c5e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f2c0 8148 	blt.w	800c878 <_dtoa_r+0x700>
 800c5e8:	9a00      	ldr	r2, [sp, #0]
 800c5ea:	2a0e      	cmp	r2, #14
 800c5ec:	f300 8144 	bgt.w	800c878 <_dtoa_r+0x700>
 800c5f0:	4b67      	ldr	r3, [pc, #412]	; (800c790 <_dtoa_r+0x618>)
 800c5f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f280 80d5 	bge.w	800c7ac <_dtoa_r+0x634>
 800c602:	9b03      	ldr	r3, [sp, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	f300 80d1 	bgt.w	800c7ac <_dtoa_r+0x634>
 800c60a:	f040 826f 	bne.w	800caec <_dtoa_r+0x974>
 800c60e:	4b65      	ldr	r3, [pc, #404]	; (800c7a4 <_dtoa_r+0x62c>)
 800c610:	2200      	movs	r2, #0
 800c612:	4640      	mov	r0, r8
 800c614:	4649      	mov	r1, r9
 800c616:	f7f4 f807 	bl	8000628 <__aeabi_dmul>
 800c61a:	4652      	mov	r2, sl
 800c61c:	465b      	mov	r3, fp
 800c61e:	f7f4 fa89 	bl	8000b34 <__aeabi_dcmpge>
 800c622:	9e03      	ldr	r6, [sp, #12]
 800c624:	4637      	mov	r7, r6
 800c626:	2800      	cmp	r0, #0
 800c628:	f040 8245 	bne.w	800cab6 <_dtoa_r+0x93e>
 800c62c:	9d01      	ldr	r5, [sp, #4]
 800c62e:	2331      	movs	r3, #49	; 0x31
 800c630:	f805 3b01 	strb.w	r3, [r5], #1
 800c634:	9b00      	ldr	r3, [sp, #0]
 800c636:	3301      	adds	r3, #1
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	e240      	b.n	800cabe <_dtoa_r+0x946>
 800c63c:	07f2      	lsls	r2, r6, #31
 800c63e:	d505      	bpl.n	800c64c <_dtoa_r+0x4d4>
 800c640:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c644:	f7f3 fff0 	bl	8000628 <__aeabi_dmul>
 800c648:	3501      	adds	r5, #1
 800c64a:	2301      	movs	r3, #1
 800c64c:	1076      	asrs	r6, r6, #1
 800c64e:	3708      	adds	r7, #8
 800c650:	e777      	b.n	800c542 <_dtoa_r+0x3ca>
 800c652:	2502      	movs	r5, #2
 800c654:	e779      	b.n	800c54a <_dtoa_r+0x3d2>
 800c656:	9f00      	ldr	r7, [sp, #0]
 800c658:	9e03      	ldr	r6, [sp, #12]
 800c65a:	e794      	b.n	800c586 <_dtoa_r+0x40e>
 800c65c:	9901      	ldr	r1, [sp, #4]
 800c65e:	4b4c      	ldr	r3, [pc, #304]	; (800c790 <_dtoa_r+0x618>)
 800c660:	4431      	add	r1, r6
 800c662:	910d      	str	r1, [sp, #52]	; 0x34
 800c664:	9908      	ldr	r1, [sp, #32]
 800c666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c66a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c66e:	2900      	cmp	r1, #0
 800c670:	d043      	beq.n	800c6fa <_dtoa_r+0x582>
 800c672:	494d      	ldr	r1, [pc, #308]	; (800c7a8 <_dtoa_r+0x630>)
 800c674:	2000      	movs	r0, #0
 800c676:	f7f4 f901 	bl	800087c <__aeabi_ddiv>
 800c67a:	4652      	mov	r2, sl
 800c67c:	465b      	mov	r3, fp
 800c67e:	f7f3 fe1b 	bl	80002b8 <__aeabi_dsub>
 800c682:	9d01      	ldr	r5, [sp, #4]
 800c684:	4682      	mov	sl, r0
 800c686:	468b      	mov	fp, r1
 800c688:	4649      	mov	r1, r9
 800c68a:	4640      	mov	r0, r8
 800c68c:	f7f4 fa7c 	bl	8000b88 <__aeabi_d2iz>
 800c690:	4606      	mov	r6, r0
 800c692:	f7f3 ff5f 	bl	8000554 <__aeabi_i2d>
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	4640      	mov	r0, r8
 800c69c:	4649      	mov	r1, r9
 800c69e:	f7f3 fe0b 	bl	80002b8 <__aeabi_dsub>
 800c6a2:	3630      	adds	r6, #48	; 0x30
 800c6a4:	f805 6b01 	strb.w	r6, [r5], #1
 800c6a8:	4652      	mov	r2, sl
 800c6aa:	465b      	mov	r3, fp
 800c6ac:	4680      	mov	r8, r0
 800c6ae:	4689      	mov	r9, r1
 800c6b0:	f7f4 fa2c 	bl	8000b0c <__aeabi_dcmplt>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	d163      	bne.n	800c780 <_dtoa_r+0x608>
 800c6b8:	4642      	mov	r2, r8
 800c6ba:	464b      	mov	r3, r9
 800c6bc:	4936      	ldr	r1, [pc, #216]	; (800c798 <_dtoa_r+0x620>)
 800c6be:	2000      	movs	r0, #0
 800c6c0:	f7f3 fdfa 	bl	80002b8 <__aeabi_dsub>
 800c6c4:	4652      	mov	r2, sl
 800c6c6:	465b      	mov	r3, fp
 800c6c8:	f7f4 fa20 	bl	8000b0c <__aeabi_dcmplt>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	f040 80b5 	bne.w	800c83c <_dtoa_r+0x6c4>
 800c6d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6d4:	429d      	cmp	r5, r3
 800c6d6:	d081      	beq.n	800c5dc <_dtoa_r+0x464>
 800c6d8:	4b30      	ldr	r3, [pc, #192]	; (800c79c <_dtoa_r+0x624>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	4650      	mov	r0, sl
 800c6de:	4659      	mov	r1, fp
 800c6e0:	f7f3 ffa2 	bl	8000628 <__aeabi_dmul>
 800c6e4:	4b2d      	ldr	r3, [pc, #180]	; (800c79c <_dtoa_r+0x624>)
 800c6e6:	4682      	mov	sl, r0
 800c6e8:	468b      	mov	fp, r1
 800c6ea:	4640      	mov	r0, r8
 800c6ec:	4649      	mov	r1, r9
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f7f3 ff9a 	bl	8000628 <__aeabi_dmul>
 800c6f4:	4680      	mov	r8, r0
 800c6f6:	4689      	mov	r9, r1
 800c6f8:	e7c6      	b.n	800c688 <_dtoa_r+0x510>
 800c6fa:	4650      	mov	r0, sl
 800c6fc:	4659      	mov	r1, fp
 800c6fe:	f7f3 ff93 	bl	8000628 <__aeabi_dmul>
 800c702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c704:	9d01      	ldr	r5, [sp, #4]
 800c706:	930f      	str	r3, [sp, #60]	; 0x3c
 800c708:	4682      	mov	sl, r0
 800c70a:	468b      	mov	fp, r1
 800c70c:	4649      	mov	r1, r9
 800c70e:	4640      	mov	r0, r8
 800c710:	f7f4 fa3a 	bl	8000b88 <__aeabi_d2iz>
 800c714:	4606      	mov	r6, r0
 800c716:	f7f3 ff1d 	bl	8000554 <__aeabi_i2d>
 800c71a:	3630      	adds	r6, #48	; 0x30
 800c71c:	4602      	mov	r2, r0
 800c71e:	460b      	mov	r3, r1
 800c720:	4640      	mov	r0, r8
 800c722:	4649      	mov	r1, r9
 800c724:	f7f3 fdc8 	bl	80002b8 <__aeabi_dsub>
 800c728:	f805 6b01 	strb.w	r6, [r5], #1
 800c72c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c72e:	429d      	cmp	r5, r3
 800c730:	4680      	mov	r8, r0
 800c732:	4689      	mov	r9, r1
 800c734:	f04f 0200 	mov.w	r2, #0
 800c738:	d124      	bne.n	800c784 <_dtoa_r+0x60c>
 800c73a:	4b1b      	ldr	r3, [pc, #108]	; (800c7a8 <_dtoa_r+0x630>)
 800c73c:	4650      	mov	r0, sl
 800c73e:	4659      	mov	r1, fp
 800c740:	f7f3 fdbc 	bl	80002bc <__adddf3>
 800c744:	4602      	mov	r2, r0
 800c746:	460b      	mov	r3, r1
 800c748:	4640      	mov	r0, r8
 800c74a:	4649      	mov	r1, r9
 800c74c:	f7f4 f9fc 	bl	8000b48 <__aeabi_dcmpgt>
 800c750:	2800      	cmp	r0, #0
 800c752:	d173      	bne.n	800c83c <_dtoa_r+0x6c4>
 800c754:	4652      	mov	r2, sl
 800c756:	465b      	mov	r3, fp
 800c758:	4913      	ldr	r1, [pc, #76]	; (800c7a8 <_dtoa_r+0x630>)
 800c75a:	2000      	movs	r0, #0
 800c75c:	f7f3 fdac 	bl	80002b8 <__aeabi_dsub>
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	4640      	mov	r0, r8
 800c766:	4649      	mov	r1, r9
 800c768:	f7f4 f9d0 	bl	8000b0c <__aeabi_dcmplt>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	f43f af35 	beq.w	800c5dc <_dtoa_r+0x464>
 800c772:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c774:	1e6b      	subs	r3, r5, #1
 800c776:	930f      	str	r3, [sp, #60]	; 0x3c
 800c778:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c77c:	2b30      	cmp	r3, #48	; 0x30
 800c77e:	d0f8      	beq.n	800c772 <_dtoa_r+0x5fa>
 800c780:	9700      	str	r7, [sp, #0]
 800c782:	e049      	b.n	800c818 <_dtoa_r+0x6a0>
 800c784:	4b05      	ldr	r3, [pc, #20]	; (800c79c <_dtoa_r+0x624>)
 800c786:	f7f3 ff4f 	bl	8000628 <__aeabi_dmul>
 800c78a:	4680      	mov	r8, r0
 800c78c:	4689      	mov	r9, r1
 800c78e:	e7bd      	b.n	800c70c <_dtoa_r+0x594>
 800c790:	08010308 	.word	0x08010308
 800c794:	080102e0 	.word	0x080102e0
 800c798:	3ff00000 	.word	0x3ff00000
 800c79c:	40240000 	.word	0x40240000
 800c7a0:	401c0000 	.word	0x401c0000
 800c7a4:	40140000 	.word	0x40140000
 800c7a8:	3fe00000 	.word	0x3fe00000
 800c7ac:	9d01      	ldr	r5, [sp, #4]
 800c7ae:	4656      	mov	r6, sl
 800c7b0:	465f      	mov	r7, fp
 800c7b2:	4642      	mov	r2, r8
 800c7b4:	464b      	mov	r3, r9
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	4639      	mov	r1, r7
 800c7ba:	f7f4 f85f 	bl	800087c <__aeabi_ddiv>
 800c7be:	f7f4 f9e3 	bl	8000b88 <__aeabi_d2iz>
 800c7c2:	4682      	mov	sl, r0
 800c7c4:	f7f3 fec6 	bl	8000554 <__aeabi_i2d>
 800c7c8:	4642      	mov	r2, r8
 800c7ca:	464b      	mov	r3, r9
 800c7cc:	f7f3 ff2c 	bl	8000628 <__aeabi_dmul>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	4630      	mov	r0, r6
 800c7d6:	4639      	mov	r1, r7
 800c7d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c7dc:	f7f3 fd6c 	bl	80002b8 <__aeabi_dsub>
 800c7e0:	f805 6b01 	strb.w	r6, [r5], #1
 800c7e4:	9e01      	ldr	r6, [sp, #4]
 800c7e6:	9f03      	ldr	r7, [sp, #12]
 800c7e8:	1bae      	subs	r6, r5, r6
 800c7ea:	42b7      	cmp	r7, r6
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	d135      	bne.n	800c85e <_dtoa_r+0x6e6>
 800c7f2:	f7f3 fd63 	bl	80002bc <__adddf3>
 800c7f6:	4642      	mov	r2, r8
 800c7f8:	464b      	mov	r3, r9
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	460f      	mov	r7, r1
 800c7fe:	f7f4 f9a3 	bl	8000b48 <__aeabi_dcmpgt>
 800c802:	b9d0      	cbnz	r0, 800c83a <_dtoa_r+0x6c2>
 800c804:	4642      	mov	r2, r8
 800c806:	464b      	mov	r3, r9
 800c808:	4630      	mov	r0, r6
 800c80a:	4639      	mov	r1, r7
 800c80c:	f7f4 f974 	bl	8000af8 <__aeabi_dcmpeq>
 800c810:	b110      	cbz	r0, 800c818 <_dtoa_r+0x6a0>
 800c812:	f01a 0f01 	tst.w	sl, #1
 800c816:	d110      	bne.n	800c83a <_dtoa_r+0x6c2>
 800c818:	4620      	mov	r0, r4
 800c81a:	ee18 1a10 	vmov	r1, s16
 800c81e:	f000 ff8d 	bl	800d73c <_Bfree>
 800c822:	2300      	movs	r3, #0
 800c824:	9800      	ldr	r0, [sp, #0]
 800c826:	702b      	strb	r3, [r5, #0]
 800c828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c82a:	3001      	adds	r0, #1
 800c82c:	6018      	str	r0, [r3, #0]
 800c82e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c830:	2b00      	cmp	r3, #0
 800c832:	f43f acf1 	beq.w	800c218 <_dtoa_r+0xa0>
 800c836:	601d      	str	r5, [r3, #0]
 800c838:	e4ee      	b.n	800c218 <_dtoa_r+0xa0>
 800c83a:	9f00      	ldr	r7, [sp, #0]
 800c83c:	462b      	mov	r3, r5
 800c83e:	461d      	mov	r5, r3
 800c840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c844:	2a39      	cmp	r2, #57	; 0x39
 800c846:	d106      	bne.n	800c856 <_dtoa_r+0x6de>
 800c848:	9a01      	ldr	r2, [sp, #4]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d1f7      	bne.n	800c83e <_dtoa_r+0x6c6>
 800c84e:	9901      	ldr	r1, [sp, #4]
 800c850:	2230      	movs	r2, #48	; 0x30
 800c852:	3701      	adds	r7, #1
 800c854:	700a      	strb	r2, [r1, #0]
 800c856:	781a      	ldrb	r2, [r3, #0]
 800c858:	3201      	adds	r2, #1
 800c85a:	701a      	strb	r2, [r3, #0]
 800c85c:	e790      	b.n	800c780 <_dtoa_r+0x608>
 800c85e:	4ba6      	ldr	r3, [pc, #664]	; (800caf8 <_dtoa_r+0x980>)
 800c860:	2200      	movs	r2, #0
 800c862:	f7f3 fee1 	bl	8000628 <__aeabi_dmul>
 800c866:	2200      	movs	r2, #0
 800c868:	2300      	movs	r3, #0
 800c86a:	4606      	mov	r6, r0
 800c86c:	460f      	mov	r7, r1
 800c86e:	f7f4 f943 	bl	8000af8 <__aeabi_dcmpeq>
 800c872:	2800      	cmp	r0, #0
 800c874:	d09d      	beq.n	800c7b2 <_dtoa_r+0x63a>
 800c876:	e7cf      	b.n	800c818 <_dtoa_r+0x6a0>
 800c878:	9a08      	ldr	r2, [sp, #32]
 800c87a:	2a00      	cmp	r2, #0
 800c87c:	f000 80d7 	beq.w	800ca2e <_dtoa_r+0x8b6>
 800c880:	9a06      	ldr	r2, [sp, #24]
 800c882:	2a01      	cmp	r2, #1
 800c884:	f300 80ba 	bgt.w	800c9fc <_dtoa_r+0x884>
 800c888:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c88a:	2a00      	cmp	r2, #0
 800c88c:	f000 80b2 	beq.w	800c9f4 <_dtoa_r+0x87c>
 800c890:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c894:	9e07      	ldr	r6, [sp, #28]
 800c896:	9d04      	ldr	r5, [sp, #16]
 800c898:	9a04      	ldr	r2, [sp, #16]
 800c89a:	441a      	add	r2, r3
 800c89c:	9204      	str	r2, [sp, #16]
 800c89e:	9a05      	ldr	r2, [sp, #20]
 800c8a0:	2101      	movs	r1, #1
 800c8a2:	441a      	add	r2, r3
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	9205      	str	r2, [sp, #20]
 800c8a8:	f001 f84a 	bl	800d940 <__i2b>
 800c8ac:	4607      	mov	r7, r0
 800c8ae:	2d00      	cmp	r5, #0
 800c8b0:	dd0c      	ble.n	800c8cc <_dtoa_r+0x754>
 800c8b2:	9b05      	ldr	r3, [sp, #20]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	dd09      	ble.n	800c8cc <_dtoa_r+0x754>
 800c8b8:	42ab      	cmp	r3, r5
 800c8ba:	9a04      	ldr	r2, [sp, #16]
 800c8bc:	bfa8      	it	ge
 800c8be:	462b      	movge	r3, r5
 800c8c0:	1ad2      	subs	r2, r2, r3
 800c8c2:	9204      	str	r2, [sp, #16]
 800c8c4:	9a05      	ldr	r2, [sp, #20]
 800c8c6:	1aed      	subs	r5, r5, r3
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	9305      	str	r3, [sp, #20]
 800c8cc:	9b07      	ldr	r3, [sp, #28]
 800c8ce:	b31b      	cbz	r3, 800c918 <_dtoa_r+0x7a0>
 800c8d0:	9b08      	ldr	r3, [sp, #32]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f000 80af 	beq.w	800ca36 <_dtoa_r+0x8be>
 800c8d8:	2e00      	cmp	r6, #0
 800c8da:	dd13      	ble.n	800c904 <_dtoa_r+0x78c>
 800c8dc:	4639      	mov	r1, r7
 800c8de:	4632      	mov	r2, r6
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f001 f8ed 	bl	800dac0 <__pow5mult>
 800c8e6:	ee18 2a10 	vmov	r2, s16
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	4607      	mov	r7, r0
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f001 f83c 	bl	800d96c <__multiply>
 800c8f4:	ee18 1a10 	vmov	r1, s16
 800c8f8:	4680      	mov	r8, r0
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f000 ff1e 	bl	800d73c <_Bfree>
 800c900:	ee08 8a10 	vmov	s16, r8
 800c904:	9b07      	ldr	r3, [sp, #28]
 800c906:	1b9a      	subs	r2, r3, r6
 800c908:	d006      	beq.n	800c918 <_dtoa_r+0x7a0>
 800c90a:	ee18 1a10 	vmov	r1, s16
 800c90e:	4620      	mov	r0, r4
 800c910:	f001 f8d6 	bl	800dac0 <__pow5mult>
 800c914:	ee08 0a10 	vmov	s16, r0
 800c918:	2101      	movs	r1, #1
 800c91a:	4620      	mov	r0, r4
 800c91c:	f001 f810 	bl	800d940 <__i2b>
 800c920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c922:	2b00      	cmp	r3, #0
 800c924:	4606      	mov	r6, r0
 800c926:	f340 8088 	ble.w	800ca3a <_dtoa_r+0x8c2>
 800c92a:	461a      	mov	r2, r3
 800c92c:	4601      	mov	r1, r0
 800c92e:	4620      	mov	r0, r4
 800c930:	f001 f8c6 	bl	800dac0 <__pow5mult>
 800c934:	9b06      	ldr	r3, [sp, #24]
 800c936:	2b01      	cmp	r3, #1
 800c938:	4606      	mov	r6, r0
 800c93a:	f340 8081 	ble.w	800ca40 <_dtoa_r+0x8c8>
 800c93e:	f04f 0800 	mov.w	r8, #0
 800c942:	6933      	ldr	r3, [r6, #16]
 800c944:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c948:	6918      	ldr	r0, [r3, #16]
 800c94a:	f000 ffa9 	bl	800d8a0 <__hi0bits>
 800c94e:	f1c0 0020 	rsb	r0, r0, #32
 800c952:	9b05      	ldr	r3, [sp, #20]
 800c954:	4418      	add	r0, r3
 800c956:	f010 001f 	ands.w	r0, r0, #31
 800c95a:	f000 8092 	beq.w	800ca82 <_dtoa_r+0x90a>
 800c95e:	f1c0 0320 	rsb	r3, r0, #32
 800c962:	2b04      	cmp	r3, #4
 800c964:	f340 808a 	ble.w	800ca7c <_dtoa_r+0x904>
 800c968:	f1c0 001c 	rsb	r0, r0, #28
 800c96c:	9b04      	ldr	r3, [sp, #16]
 800c96e:	4403      	add	r3, r0
 800c970:	9304      	str	r3, [sp, #16]
 800c972:	9b05      	ldr	r3, [sp, #20]
 800c974:	4403      	add	r3, r0
 800c976:	4405      	add	r5, r0
 800c978:	9305      	str	r3, [sp, #20]
 800c97a:	9b04      	ldr	r3, [sp, #16]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	dd07      	ble.n	800c990 <_dtoa_r+0x818>
 800c980:	ee18 1a10 	vmov	r1, s16
 800c984:	461a      	mov	r2, r3
 800c986:	4620      	mov	r0, r4
 800c988:	f001 f8f4 	bl	800db74 <__lshift>
 800c98c:	ee08 0a10 	vmov	s16, r0
 800c990:	9b05      	ldr	r3, [sp, #20]
 800c992:	2b00      	cmp	r3, #0
 800c994:	dd05      	ble.n	800c9a2 <_dtoa_r+0x82a>
 800c996:	4631      	mov	r1, r6
 800c998:	461a      	mov	r2, r3
 800c99a:	4620      	mov	r0, r4
 800c99c:	f001 f8ea 	bl	800db74 <__lshift>
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d06e      	beq.n	800ca86 <_dtoa_r+0x90e>
 800c9a8:	ee18 0a10 	vmov	r0, s16
 800c9ac:	4631      	mov	r1, r6
 800c9ae:	f001 f951 	bl	800dc54 <__mcmp>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	da67      	bge.n	800ca86 <_dtoa_r+0x90e>
 800c9b6:	9b00      	ldr	r3, [sp, #0]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	ee18 1a10 	vmov	r1, s16
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	220a      	movs	r2, #10
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f000 fedb 	bl	800d780 <__multadd>
 800c9ca:	9b08      	ldr	r3, [sp, #32]
 800c9cc:	ee08 0a10 	vmov	s16, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f000 81b1 	beq.w	800cd38 <_dtoa_r+0xbc0>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	4639      	mov	r1, r7
 800c9da:	220a      	movs	r2, #10
 800c9dc:	4620      	mov	r0, r4
 800c9de:	f000 fecf 	bl	800d780 <__multadd>
 800c9e2:	9b02      	ldr	r3, [sp, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	4607      	mov	r7, r0
 800c9e8:	f300 808e 	bgt.w	800cb08 <_dtoa_r+0x990>
 800c9ec:	9b06      	ldr	r3, [sp, #24]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	dc51      	bgt.n	800ca96 <_dtoa_r+0x91e>
 800c9f2:	e089      	b.n	800cb08 <_dtoa_r+0x990>
 800c9f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c9fa:	e74b      	b.n	800c894 <_dtoa_r+0x71c>
 800c9fc:	9b03      	ldr	r3, [sp, #12]
 800c9fe:	1e5e      	subs	r6, r3, #1
 800ca00:	9b07      	ldr	r3, [sp, #28]
 800ca02:	42b3      	cmp	r3, r6
 800ca04:	bfbf      	itttt	lt
 800ca06:	9b07      	ldrlt	r3, [sp, #28]
 800ca08:	9607      	strlt	r6, [sp, #28]
 800ca0a:	1af2      	sublt	r2, r6, r3
 800ca0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ca0e:	bfb6      	itet	lt
 800ca10:	189b      	addlt	r3, r3, r2
 800ca12:	1b9e      	subge	r6, r3, r6
 800ca14:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ca16:	9b03      	ldr	r3, [sp, #12]
 800ca18:	bfb8      	it	lt
 800ca1a:	2600      	movlt	r6, #0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	bfb7      	itett	lt
 800ca20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ca24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ca28:	1a9d      	sublt	r5, r3, r2
 800ca2a:	2300      	movlt	r3, #0
 800ca2c:	e734      	b.n	800c898 <_dtoa_r+0x720>
 800ca2e:	9e07      	ldr	r6, [sp, #28]
 800ca30:	9d04      	ldr	r5, [sp, #16]
 800ca32:	9f08      	ldr	r7, [sp, #32]
 800ca34:	e73b      	b.n	800c8ae <_dtoa_r+0x736>
 800ca36:	9a07      	ldr	r2, [sp, #28]
 800ca38:	e767      	b.n	800c90a <_dtoa_r+0x792>
 800ca3a:	9b06      	ldr	r3, [sp, #24]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	dc18      	bgt.n	800ca72 <_dtoa_r+0x8fa>
 800ca40:	f1ba 0f00 	cmp.w	sl, #0
 800ca44:	d115      	bne.n	800ca72 <_dtoa_r+0x8fa>
 800ca46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca4a:	b993      	cbnz	r3, 800ca72 <_dtoa_r+0x8fa>
 800ca4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca50:	0d1b      	lsrs	r3, r3, #20
 800ca52:	051b      	lsls	r3, r3, #20
 800ca54:	b183      	cbz	r3, 800ca78 <_dtoa_r+0x900>
 800ca56:	9b04      	ldr	r3, [sp, #16]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	9304      	str	r3, [sp, #16]
 800ca5c:	9b05      	ldr	r3, [sp, #20]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	9305      	str	r3, [sp, #20]
 800ca62:	f04f 0801 	mov.w	r8, #1
 800ca66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f47f af6a 	bne.w	800c942 <_dtoa_r+0x7ca>
 800ca6e:	2001      	movs	r0, #1
 800ca70:	e76f      	b.n	800c952 <_dtoa_r+0x7da>
 800ca72:	f04f 0800 	mov.w	r8, #0
 800ca76:	e7f6      	b.n	800ca66 <_dtoa_r+0x8ee>
 800ca78:	4698      	mov	r8, r3
 800ca7a:	e7f4      	b.n	800ca66 <_dtoa_r+0x8ee>
 800ca7c:	f43f af7d 	beq.w	800c97a <_dtoa_r+0x802>
 800ca80:	4618      	mov	r0, r3
 800ca82:	301c      	adds	r0, #28
 800ca84:	e772      	b.n	800c96c <_dtoa_r+0x7f4>
 800ca86:	9b03      	ldr	r3, [sp, #12]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	dc37      	bgt.n	800cafc <_dtoa_r+0x984>
 800ca8c:	9b06      	ldr	r3, [sp, #24]
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	dd34      	ble.n	800cafc <_dtoa_r+0x984>
 800ca92:	9b03      	ldr	r3, [sp, #12]
 800ca94:	9302      	str	r3, [sp, #8]
 800ca96:	9b02      	ldr	r3, [sp, #8]
 800ca98:	b96b      	cbnz	r3, 800cab6 <_dtoa_r+0x93e>
 800ca9a:	4631      	mov	r1, r6
 800ca9c:	2205      	movs	r2, #5
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f000 fe6e 	bl	800d780 <__multadd>
 800caa4:	4601      	mov	r1, r0
 800caa6:	4606      	mov	r6, r0
 800caa8:	ee18 0a10 	vmov	r0, s16
 800caac:	f001 f8d2 	bl	800dc54 <__mcmp>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	f73f adbb 	bgt.w	800c62c <_dtoa_r+0x4b4>
 800cab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cab8:	9d01      	ldr	r5, [sp, #4]
 800caba:	43db      	mvns	r3, r3
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	f04f 0800 	mov.w	r8, #0
 800cac2:	4631      	mov	r1, r6
 800cac4:	4620      	mov	r0, r4
 800cac6:	f000 fe39 	bl	800d73c <_Bfree>
 800caca:	2f00      	cmp	r7, #0
 800cacc:	f43f aea4 	beq.w	800c818 <_dtoa_r+0x6a0>
 800cad0:	f1b8 0f00 	cmp.w	r8, #0
 800cad4:	d005      	beq.n	800cae2 <_dtoa_r+0x96a>
 800cad6:	45b8      	cmp	r8, r7
 800cad8:	d003      	beq.n	800cae2 <_dtoa_r+0x96a>
 800cada:	4641      	mov	r1, r8
 800cadc:	4620      	mov	r0, r4
 800cade:	f000 fe2d 	bl	800d73c <_Bfree>
 800cae2:	4639      	mov	r1, r7
 800cae4:	4620      	mov	r0, r4
 800cae6:	f000 fe29 	bl	800d73c <_Bfree>
 800caea:	e695      	b.n	800c818 <_dtoa_r+0x6a0>
 800caec:	2600      	movs	r6, #0
 800caee:	4637      	mov	r7, r6
 800caf0:	e7e1      	b.n	800cab6 <_dtoa_r+0x93e>
 800caf2:	9700      	str	r7, [sp, #0]
 800caf4:	4637      	mov	r7, r6
 800caf6:	e599      	b.n	800c62c <_dtoa_r+0x4b4>
 800caf8:	40240000 	.word	0x40240000
 800cafc:	9b08      	ldr	r3, [sp, #32]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 80ca 	beq.w	800cc98 <_dtoa_r+0xb20>
 800cb04:	9b03      	ldr	r3, [sp, #12]
 800cb06:	9302      	str	r3, [sp, #8]
 800cb08:	2d00      	cmp	r5, #0
 800cb0a:	dd05      	ble.n	800cb18 <_dtoa_r+0x9a0>
 800cb0c:	4639      	mov	r1, r7
 800cb0e:	462a      	mov	r2, r5
 800cb10:	4620      	mov	r0, r4
 800cb12:	f001 f82f 	bl	800db74 <__lshift>
 800cb16:	4607      	mov	r7, r0
 800cb18:	f1b8 0f00 	cmp.w	r8, #0
 800cb1c:	d05b      	beq.n	800cbd6 <_dtoa_r+0xa5e>
 800cb1e:	6879      	ldr	r1, [r7, #4]
 800cb20:	4620      	mov	r0, r4
 800cb22:	f000 fdcb 	bl	800d6bc <_Balloc>
 800cb26:	4605      	mov	r5, r0
 800cb28:	b928      	cbnz	r0, 800cb36 <_dtoa_r+0x9be>
 800cb2a:	4b87      	ldr	r3, [pc, #540]	; (800cd48 <_dtoa_r+0xbd0>)
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cb32:	f7ff bb3b 	b.w	800c1ac <_dtoa_r+0x34>
 800cb36:	693a      	ldr	r2, [r7, #16]
 800cb38:	3202      	adds	r2, #2
 800cb3a:	0092      	lsls	r2, r2, #2
 800cb3c:	f107 010c 	add.w	r1, r7, #12
 800cb40:	300c      	adds	r0, #12
 800cb42:	f7fc f877 	bl	8008c34 <memcpy>
 800cb46:	2201      	movs	r2, #1
 800cb48:	4629      	mov	r1, r5
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f001 f812 	bl	800db74 <__lshift>
 800cb50:	9b01      	ldr	r3, [sp, #4]
 800cb52:	f103 0901 	add.w	r9, r3, #1
 800cb56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	9305      	str	r3, [sp, #20]
 800cb5e:	f00a 0301 	and.w	r3, sl, #1
 800cb62:	46b8      	mov	r8, r7
 800cb64:	9304      	str	r3, [sp, #16]
 800cb66:	4607      	mov	r7, r0
 800cb68:	4631      	mov	r1, r6
 800cb6a:	ee18 0a10 	vmov	r0, s16
 800cb6e:	f7ff fa77 	bl	800c060 <quorem>
 800cb72:	4641      	mov	r1, r8
 800cb74:	9002      	str	r0, [sp, #8]
 800cb76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cb7a:	ee18 0a10 	vmov	r0, s16
 800cb7e:	f001 f869 	bl	800dc54 <__mcmp>
 800cb82:	463a      	mov	r2, r7
 800cb84:	9003      	str	r0, [sp, #12]
 800cb86:	4631      	mov	r1, r6
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f001 f87f 	bl	800dc8c <__mdiff>
 800cb8e:	68c2      	ldr	r2, [r0, #12]
 800cb90:	f109 3bff 	add.w	fp, r9, #4294967295
 800cb94:	4605      	mov	r5, r0
 800cb96:	bb02      	cbnz	r2, 800cbda <_dtoa_r+0xa62>
 800cb98:	4601      	mov	r1, r0
 800cb9a:	ee18 0a10 	vmov	r0, s16
 800cb9e:	f001 f859 	bl	800dc54 <__mcmp>
 800cba2:	4602      	mov	r2, r0
 800cba4:	4629      	mov	r1, r5
 800cba6:	4620      	mov	r0, r4
 800cba8:	9207      	str	r2, [sp, #28]
 800cbaa:	f000 fdc7 	bl	800d73c <_Bfree>
 800cbae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cbb2:	ea43 0102 	orr.w	r1, r3, r2
 800cbb6:	9b04      	ldr	r3, [sp, #16]
 800cbb8:	430b      	orrs	r3, r1
 800cbba:	464d      	mov	r5, r9
 800cbbc:	d10f      	bne.n	800cbde <_dtoa_r+0xa66>
 800cbbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cbc2:	d02a      	beq.n	800cc1a <_dtoa_r+0xaa2>
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	dd02      	ble.n	800cbd0 <_dtoa_r+0xa58>
 800cbca:	9b02      	ldr	r3, [sp, #8]
 800cbcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cbd0:	f88b a000 	strb.w	sl, [fp]
 800cbd4:	e775      	b.n	800cac2 <_dtoa_r+0x94a>
 800cbd6:	4638      	mov	r0, r7
 800cbd8:	e7ba      	b.n	800cb50 <_dtoa_r+0x9d8>
 800cbda:	2201      	movs	r2, #1
 800cbdc:	e7e2      	b.n	800cba4 <_dtoa_r+0xa2c>
 800cbde:	9b03      	ldr	r3, [sp, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	db04      	blt.n	800cbee <_dtoa_r+0xa76>
 800cbe4:	9906      	ldr	r1, [sp, #24]
 800cbe6:	430b      	orrs	r3, r1
 800cbe8:	9904      	ldr	r1, [sp, #16]
 800cbea:	430b      	orrs	r3, r1
 800cbec:	d122      	bne.n	800cc34 <_dtoa_r+0xabc>
 800cbee:	2a00      	cmp	r2, #0
 800cbf0:	ddee      	ble.n	800cbd0 <_dtoa_r+0xa58>
 800cbf2:	ee18 1a10 	vmov	r1, s16
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f000 ffbb 	bl	800db74 <__lshift>
 800cbfe:	4631      	mov	r1, r6
 800cc00:	ee08 0a10 	vmov	s16, r0
 800cc04:	f001 f826 	bl	800dc54 <__mcmp>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	dc03      	bgt.n	800cc14 <_dtoa_r+0xa9c>
 800cc0c:	d1e0      	bne.n	800cbd0 <_dtoa_r+0xa58>
 800cc0e:	f01a 0f01 	tst.w	sl, #1
 800cc12:	d0dd      	beq.n	800cbd0 <_dtoa_r+0xa58>
 800cc14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cc18:	d1d7      	bne.n	800cbca <_dtoa_r+0xa52>
 800cc1a:	2339      	movs	r3, #57	; 0x39
 800cc1c:	f88b 3000 	strb.w	r3, [fp]
 800cc20:	462b      	mov	r3, r5
 800cc22:	461d      	mov	r5, r3
 800cc24:	3b01      	subs	r3, #1
 800cc26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cc2a:	2a39      	cmp	r2, #57	; 0x39
 800cc2c:	d071      	beq.n	800cd12 <_dtoa_r+0xb9a>
 800cc2e:	3201      	adds	r2, #1
 800cc30:	701a      	strb	r2, [r3, #0]
 800cc32:	e746      	b.n	800cac2 <_dtoa_r+0x94a>
 800cc34:	2a00      	cmp	r2, #0
 800cc36:	dd07      	ble.n	800cc48 <_dtoa_r+0xad0>
 800cc38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cc3c:	d0ed      	beq.n	800cc1a <_dtoa_r+0xaa2>
 800cc3e:	f10a 0301 	add.w	r3, sl, #1
 800cc42:	f88b 3000 	strb.w	r3, [fp]
 800cc46:	e73c      	b.n	800cac2 <_dtoa_r+0x94a>
 800cc48:	9b05      	ldr	r3, [sp, #20]
 800cc4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cc4e:	4599      	cmp	r9, r3
 800cc50:	d047      	beq.n	800cce2 <_dtoa_r+0xb6a>
 800cc52:	ee18 1a10 	vmov	r1, s16
 800cc56:	2300      	movs	r3, #0
 800cc58:	220a      	movs	r2, #10
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 fd90 	bl	800d780 <__multadd>
 800cc60:	45b8      	cmp	r8, r7
 800cc62:	ee08 0a10 	vmov	s16, r0
 800cc66:	f04f 0300 	mov.w	r3, #0
 800cc6a:	f04f 020a 	mov.w	r2, #10
 800cc6e:	4641      	mov	r1, r8
 800cc70:	4620      	mov	r0, r4
 800cc72:	d106      	bne.n	800cc82 <_dtoa_r+0xb0a>
 800cc74:	f000 fd84 	bl	800d780 <__multadd>
 800cc78:	4680      	mov	r8, r0
 800cc7a:	4607      	mov	r7, r0
 800cc7c:	f109 0901 	add.w	r9, r9, #1
 800cc80:	e772      	b.n	800cb68 <_dtoa_r+0x9f0>
 800cc82:	f000 fd7d 	bl	800d780 <__multadd>
 800cc86:	4639      	mov	r1, r7
 800cc88:	4680      	mov	r8, r0
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	220a      	movs	r2, #10
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f000 fd76 	bl	800d780 <__multadd>
 800cc94:	4607      	mov	r7, r0
 800cc96:	e7f1      	b.n	800cc7c <_dtoa_r+0xb04>
 800cc98:	9b03      	ldr	r3, [sp, #12]
 800cc9a:	9302      	str	r3, [sp, #8]
 800cc9c:	9d01      	ldr	r5, [sp, #4]
 800cc9e:	ee18 0a10 	vmov	r0, s16
 800cca2:	4631      	mov	r1, r6
 800cca4:	f7ff f9dc 	bl	800c060 <quorem>
 800cca8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ccac:	9b01      	ldr	r3, [sp, #4]
 800ccae:	f805 ab01 	strb.w	sl, [r5], #1
 800ccb2:	1aea      	subs	r2, r5, r3
 800ccb4:	9b02      	ldr	r3, [sp, #8]
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	dd09      	ble.n	800ccce <_dtoa_r+0xb56>
 800ccba:	ee18 1a10 	vmov	r1, s16
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	220a      	movs	r2, #10
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f000 fd5c 	bl	800d780 <__multadd>
 800ccc8:	ee08 0a10 	vmov	s16, r0
 800cccc:	e7e7      	b.n	800cc9e <_dtoa_r+0xb26>
 800ccce:	9b02      	ldr	r3, [sp, #8]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	bfc8      	it	gt
 800ccd4:	461d      	movgt	r5, r3
 800ccd6:	9b01      	ldr	r3, [sp, #4]
 800ccd8:	bfd8      	it	le
 800ccda:	2501      	movle	r5, #1
 800ccdc:	441d      	add	r5, r3
 800ccde:	f04f 0800 	mov.w	r8, #0
 800cce2:	ee18 1a10 	vmov	r1, s16
 800cce6:	2201      	movs	r2, #1
 800cce8:	4620      	mov	r0, r4
 800ccea:	f000 ff43 	bl	800db74 <__lshift>
 800ccee:	4631      	mov	r1, r6
 800ccf0:	ee08 0a10 	vmov	s16, r0
 800ccf4:	f000 ffae 	bl	800dc54 <__mcmp>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	dc91      	bgt.n	800cc20 <_dtoa_r+0xaa8>
 800ccfc:	d102      	bne.n	800cd04 <_dtoa_r+0xb8c>
 800ccfe:	f01a 0f01 	tst.w	sl, #1
 800cd02:	d18d      	bne.n	800cc20 <_dtoa_r+0xaa8>
 800cd04:	462b      	mov	r3, r5
 800cd06:	461d      	mov	r5, r3
 800cd08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd0c:	2a30      	cmp	r2, #48	; 0x30
 800cd0e:	d0fa      	beq.n	800cd06 <_dtoa_r+0xb8e>
 800cd10:	e6d7      	b.n	800cac2 <_dtoa_r+0x94a>
 800cd12:	9a01      	ldr	r2, [sp, #4]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d184      	bne.n	800cc22 <_dtoa_r+0xaaa>
 800cd18:	9b00      	ldr	r3, [sp, #0]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	2331      	movs	r3, #49	; 0x31
 800cd20:	7013      	strb	r3, [r2, #0]
 800cd22:	e6ce      	b.n	800cac2 <_dtoa_r+0x94a>
 800cd24:	4b09      	ldr	r3, [pc, #36]	; (800cd4c <_dtoa_r+0xbd4>)
 800cd26:	f7ff ba95 	b.w	800c254 <_dtoa_r+0xdc>
 800cd2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f47f aa6e 	bne.w	800c20e <_dtoa_r+0x96>
 800cd32:	4b07      	ldr	r3, [pc, #28]	; (800cd50 <_dtoa_r+0xbd8>)
 800cd34:	f7ff ba8e 	b.w	800c254 <_dtoa_r+0xdc>
 800cd38:	9b02      	ldr	r3, [sp, #8]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	dcae      	bgt.n	800cc9c <_dtoa_r+0xb24>
 800cd3e:	9b06      	ldr	r3, [sp, #24]
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	f73f aea8 	bgt.w	800ca96 <_dtoa_r+0x91e>
 800cd46:	e7a9      	b.n	800cc9c <_dtoa_r+0xb24>
 800cd48:	080101f9 	.word	0x080101f9
 800cd4c:	080103f1 	.word	0x080103f1
 800cd50:	08010191 	.word	0x08010191

0800cd54 <fiprintf>:
 800cd54:	b40e      	push	{r1, r2, r3}
 800cd56:	b503      	push	{r0, r1, lr}
 800cd58:	4601      	mov	r1, r0
 800cd5a:	ab03      	add	r3, sp, #12
 800cd5c:	4805      	ldr	r0, [pc, #20]	; (800cd74 <fiprintf+0x20>)
 800cd5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd62:	6800      	ldr	r0, [r0, #0]
 800cd64:	9301      	str	r3, [sp, #4]
 800cd66:	f001 fcd7 	bl	800e718 <_vfiprintf_r>
 800cd6a:	b002      	add	sp, #8
 800cd6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd70:	b003      	add	sp, #12
 800cd72:	4770      	bx	lr
 800cd74:	2000000c 	.word	0x2000000c

0800cd78 <rshift>:
 800cd78:	6903      	ldr	r3, [r0, #16]
 800cd7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd82:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd86:	f100 0414 	add.w	r4, r0, #20
 800cd8a:	dd45      	ble.n	800ce18 <rshift+0xa0>
 800cd8c:	f011 011f 	ands.w	r1, r1, #31
 800cd90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd98:	d10c      	bne.n	800cdb4 <rshift+0x3c>
 800cd9a:	f100 0710 	add.w	r7, r0, #16
 800cd9e:	4629      	mov	r1, r5
 800cda0:	42b1      	cmp	r1, r6
 800cda2:	d334      	bcc.n	800ce0e <rshift+0x96>
 800cda4:	1a9b      	subs	r3, r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	1eea      	subs	r2, r5, #3
 800cdaa:	4296      	cmp	r6, r2
 800cdac:	bf38      	it	cc
 800cdae:	2300      	movcc	r3, #0
 800cdb0:	4423      	add	r3, r4
 800cdb2:	e015      	b.n	800cde0 <rshift+0x68>
 800cdb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cdb8:	f1c1 0820 	rsb	r8, r1, #32
 800cdbc:	40cf      	lsrs	r7, r1
 800cdbe:	f105 0e04 	add.w	lr, r5, #4
 800cdc2:	46a1      	mov	r9, r4
 800cdc4:	4576      	cmp	r6, lr
 800cdc6:	46f4      	mov	ip, lr
 800cdc8:	d815      	bhi.n	800cdf6 <rshift+0x7e>
 800cdca:	1a9a      	subs	r2, r3, r2
 800cdcc:	0092      	lsls	r2, r2, #2
 800cdce:	3a04      	subs	r2, #4
 800cdd0:	3501      	adds	r5, #1
 800cdd2:	42ae      	cmp	r6, r5
 800cdd4:	bf38      	it	cc
 800cdd6:	2200      	movcc	r2, #0
 800cdd8:	18a3      	adds	r3, r4, r2
 800cdda:	50a7      	str	r7, [r4, r2]
 800cddc:	b107      	cbz	r7, 800cde0 <rshift+0x68>
 800cdde:	3304      	adds	r3, #4
 800cde0:	1b1a      	subs	r2, r3, r4
 800cde2:	42a3      	cmp	r3, r4
 800cde4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cde8:	bf08      	it	eq
 800cdea:	2300      	moveq	r3, #0
 800cdec:	6102      	str	r2, [r0, #16]
 800cdee:	bf08      	it	eq
 800cdf0:	6143      	streq	r3, [r0, #20]
 800cdf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdf6:	f8dc c000 	ldr.w	ip, [ip]
 800cdfa:	fa0c fc08 	lsl.w	ip, ip, r8
 800cdfe:	ea4c 0707 	orr.w	r7, ip, r7
 800ce02:	f849 7b04 	str.w	r7, [r9], #4
 800ce06:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce0a:	40cf      	lsrs	r7, r1
 800ce0c:	e7da      	b.n	800cdc4 <rshift+0x4c>
 800ce0e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce12:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce16:	e7c3      	b.n	800cda0 <rshift+0x28>
 800ce18:	4623      	mov	r3, r4
 800ce1a:	e7e1      	b.n	800cde0 <rshift+0x68>

0800ce1c <__hexdig_fun>:
 800ce1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce20:	2b09      	cmp	r3, #9
 800ce22:	d802      	bhi.n	800ce2a <__hexdig_fun+0xe>
 800ce24:	3820      	subs	r0, #32
 800ce26:	b2c0      	uxtb	r0, r0
 800ce28:	4770      	bx	lr
 800ce2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce2e:	2b05      	cmp	r3, #5
 800ce30:	d801      	bhi.n	800ce36 <__hexdig_fun+0x1a>
 800ce32:	3847      	subs	r0, #71	; 0x47
 800ce34:	e7f7      	b.n	800ce26 <__hexdig_fun+0xa>
 800ce36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce3a:	2b05      	cmp	r3, #5
 800ce3c:	d801      	bhi.n	800ce42 <__hexdig_fun+0x26>
 800ce3e:	3827      	subs	r0, #39	; 0x27
 800ce40:	e7f1      	b.n	800ce26 <__hexdig_fun+0xa>
 800ce42:	2000      	movs	r0, #0
 800ce44:	4770      	bx	lr
	...

0800ce48 <__gethex>:
 800ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce4c:	ed2d 8b02 	vpush	{d8}
 800ce50:	b089      	sub	sp, #36	; 0x24
 800ce52:	ee08 0a10 	vmov	s16, r0
 800ce56:	9304      	str	r3, [sp, #16]
 800ce58:	4bb4      	ldr	r3, [pc, #720]	; (800d12c <__gethex+0x2e4>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	9301      	str	r3, [sp, #4]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	468b      	mov	fp, r1
 800ce62:	4690      	mov	r8, r2
 800ce64:	f7f3 f9c6 	bl	80001f4 <strlen>
 800ce68:	9b01      	ldr	r3, [sp, #4]
 800ce6a:	f8db 2000 	ldr.w	r2, [fp]
 800ce6e:	4403      	add	r3, r0
 800ce70:	4682      	mov	sl, r0
 800ce72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ce76:	9305      	str	r3, [sp, #20]
 800ce78:	1c93      	adds	r3, r2, #2
 800ce7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ce7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ce82:	32fe      	adds	r2, #254	; 0xfe
 800ce84:	18d1      	adds	r1, r2, r3
 800ce86:	461f      	mov	r7, r3
 800ce88:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ce8c:	9100      	str	r1, [sp, #0]
 800ce8e:	2830      	cmp	r0, #48	; 0x30
 800ce90:	d0f8      	beq.n	800ce84 <__gethex+0x3c>
 800ce92:	f7ff ffc3 	bl	800ce1c <__hexdig_fun>
 800ce96:	4604      	mov	r4, r0
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d13a      	bne.n	800cf12 <__gethex+0xca>
 800ce9c:	9901      	ldr	r1, [sp, #4]
 800ce9e:	4652      	mov	r2, sl
 800cea0:	4638      	mov	r0, r7
 800cea2:	f7fd fed5 	bl	800ac50 <strncmp>
 800cea6:	4605      	mov	r5, r0
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d168      	bne.n	800cf7e <__gethex+0x136>
 800ceac:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ceb0:	eb07 060a 	add.w	r6, r7, sl
 800ceb4:	f7ff ffb2 	bl	800ce1c <__hexdig_fun>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	d062      	beq.n	800cf82 <__gethex+0x13a>
 800cebc:	4633      	mov	r3, r6
 800cebe:	7818      	ldrb	r0, [r3, #0]
 800cec0:	2830      	cmp	r0, #48	; 0x30
 800cec2:	461f      	mov	r7, r3
 800cec4:	f103 0301 	add.w	r3, r3, #1
 800cec8:	d0f9      	beq.n	800cebe <__gethex+0x76>
 800ceca:	f7ff ffa7 	bl	800ce1c <__hexdig_fun>
 800cece:	2301      	movs	r3, #1
 800ced0:	fab0 f480 	clz	r4, r0
 800ced4:	0964      	lsrs	r4, r4, #5
 800ced6:	4635      	mov	r5, r6
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	463a      	mov	r2, r7
 800cedc:	4616      	mov	r6, r2
 800cede:	3201      	adds	r2, #1
 800cee0:	7830      	ldrb	r0, [r6, #0]
 800cee2:	f7ff ff9b 	bl	800ce1c <__hexdig_fun>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d1f8      	bne.n	800cedc <__gethex+0x94>
 800ceea:	9901      	ldr	r1, [sp, #4]
 800ceec:	4652      	mov	r2, sl
 800ceee:	4630      	mov	r0, r6
 800cef0:	f7fd feae 	bl	800ac50 <strncmp>
 800cef4:	b980      	cbnz	r0, 800cf18 <__gethex+0xd0>
 800cef6:	b94d      	cbnz	r5, 800cf0c <__gethex+0xc4>
 800cef8:	eb06 050a 	add.w	r5, r6, sl
 800cefc:	462a      	mov	r2, r5
 800cefe:	4616      	mov	r6, r2
 800cf00:	3201      	adds	r2, #1
 800cf02:	7830      	ldrb	r0, [r6, #0]
 800cf04:	f7ff ff8a 	bl	800ce1c <__hexdig_fun>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d1f8      	bne.n	800cefe <__gethex+0xb6>
 800cf0c:	1bad      	subs	r5, r5, r6
 800cf0e:	00ad      	lsls	r5, r5, #2
 800cf10:	e004      	b.n	800cf1c <__gethex+0xd4>
 800cf12:	2400      	movs	r4, #0
 800cf14:	4625      	mov	r5, r4
 800cf16:	e7e0      	b.n	800ceda <__gethex+0x92>
 800cf18:	2d00      	cmp	r5, #0
 800cf1a:	d1f7      	bne.n	800cf0c <__gethex+0xc4>
 800cf1c:	7833      	ldrb	r3, [r6, #0]
 800cf1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf22:	2b50      	cmp	r3, #80	; 0x50
 800cf24:	d13b      	bne.n	800cf9e <__gethex+0x156>
 800cf26:	7873      	ldrb	r3, [r6, #1]
 800cf28:	2b2b      	cmp	r3, #43	; 0x2b
 800cf2a:	d02c      	beq.n	800cf86 <__gethex+0x13e>
 800cf2c:	2b2d      	cmp	r3, #45	; 0x2d
 800cf2e:	d02e      	beq.n	800cf8e <__gethex+0x146>
 800cf30:	1c71      	adds	r1, r6, #1
 800cf32:	f04f 0900 	mov.w	r9, #0
 800cf36:	7808      	ldrb	r0, [r1, #0]
 800cf38:	f7ff ff70 	bl	800ce1c <__hexdig_fun>
 800cf3c:	1e43      	subs	r3, r0, #1
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	2b18      	cmp	r3, #24
 800cf42:	d82c      	bhi.n	800cf9e <__gethex+0x156>
 800cf44:	f1a0 0210 	sub.w	r2, r0, #16
 800cf48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf4c:	f7ff ff66 	bl	800ce1c <__hexdig_fun>
 800cf50:	1e43      	subs	r3, r0, #1
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b18      	cmp	r3, #24
 800cf56:	d91d      	bls.n	800cf94 <__gethex+0x14c>
 800cf58:	f1b9 0f00 	cmp.w	r9, #0
 800cf5c:	d000      	beq.n	800cf60 <__gethex+0x118>
 800cf5e:	4252      	negs	r2, r2
 800cf60:	4415      	add	r5, r2
 800cf62:	f8cb 1000 	str.w	r1, [fp]
 800cf66:	b1e4      	cbz	r4, 800cfa2 <__gethex+0x15a>
 800cf68:	9b00      	ldr	r3, [sp, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	bf14      	ite	ne
 800cf6e:	2700      	movne	r7, #0
 800cf70:	2706      	moveq	r7, #6
 800cf72:	4638      	mov	r0, r7
 800cf74:	b009      	add	sp, #36	; 0x24
 800cf76:	ecbd 8b02 	vpop	{d8}
 800cf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7e:	463e      	mov	r6, r7
 800cf80:	4625      	mov	r5, r4
 800cf82:	2401      	movs	r4, #1
 800cf84:	e7ca      	b.n	800cf1c <__gethex+0xd4>
 800cf86:	f04f 0900 	mov.w	r9, #0
 800cf8a:	1cb1      	adds	r1, r6, #2
 800cf8c:	e7d3      	b.n	800cf36 <__gethex+0xee>
 800cf8e:	f04f 0901 	mov.w	r9, #1
 800cf92:	e7fa      	b.n	800cf8a <__gethex+0x142>
 800cf94:	230a      	movs	r3, #10
 800cf96:	fb03 0202 	mla	r2, r3, r2, r0
 800cf9a:	3a10      	subs	r2, #16
 800cf9c:	e7d4      	b.n	800cf48 <__gethex+0x100>
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	e7df      	b.n	800cf62 <__gethex+0x11a>
 800cfa2:	1bf3      	subs	r3, r6, r7
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	2b07      	cmp	r3, #7
 800cfaa:	dc0b      	bgt.n	800cfc4 <__gethex+0x17c>
 800cfac:	ee18 0a10 	vmov	r0, s16
 800cfb0:	f000 fb84 	bl	800d6bc <_Balloc>
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	b940      	cbnz	r0, 800cfca <__gethex+0x182>
 800cfb8:	4b5d      	ldr	r3, [pc, #372]	; (800d130 <__gethex+0x2e8>)
 800cfba:	4602      	mov	r2, r0
 800cfbc:	21de      	movs	r1, #222	; 0xde
 800cfbe:	485d      	ldr	r0, [pc, #372]	; (800d134 <__gethex+0x2ec>)
 800cfc0:	f7ff f80c 	bl	800bfdc <__assert_func>
 800cfc4:	3101      	adds	r1, #1
 800cfc6:	105b      	asrs	r3, r3, #1
 800cfc8:	e7ee      	b.n	800cfa8 <__gethex+0x160>
 800cfca:	f100 0914 	add.w	r9, r0, #20
 800cfce:	f04f 0b00 	mov.w	fp, #0
 800cfd2:	f1ca 0301 	rsb	r3, sl, #1
 800cfd6:	f8cd 9008 	str.w	r9, [sp, #8]
 800cfda:	f8cd b000 	str.w	fp, [sp]
 800cfde:	9306      	str	r3, [sp, #24]
 800cfe0:	42b7      	cmp	r7, r6
 800cfe2:	d340      	bcc.n	800d066 <__gethex+0x21e>
 800cfe4:	9802      	ldr	r0, [sp, #8]
 800cfe6:	9b00      	ldr	r3, [sp, #0]
 800cfe8:	f840 3b04 	str.w	r3, [r0], #4
 800cfec:	eba0 0009 	sub.w	r0, r0, r9
 800cff0:	1080      	asrs	r0, r0, #2
 800cff2:	0146      	lsls	r6, r0, #5
 800cff4:	6120      	str	r0, [r4, #16]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 fc52 	bl	800d8a0 <__hi0bits>
 800cffc:	1a30      	subs	r0, r6, r0
 800cffe:	f8d8 6000 	ldr.w	r6, [r8]
 800d002:	42b0      	cmp	r0, r6
 800d004:	dd63      	ble.n	800d0ce <__gethex+0x286>
 800d006:	1b87      	subs	r7, r0, r6
 800d008:	4639      	mov	r1, r7
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 fff6 	bl	800dffc <__any_on>
 800d010:	4682      	mov	sl, r0
 800d012:	b1a8      	cbz	r0, 800d040 <__gethex+0x1f8>
 800d014:	1e7b      	subs	r3, r7, #1
 800d016:	1159      	asrs	r1, r3, #5
 800d018:	f003 021f 	and.w	r2, r3, #31
 800d01c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d020:	f04f 0a01 	mov.w	sl, #1
 800d024:	fa0a f202 	lsl.w	r2, sl, r2
 800d028:	420a      	tst	r2, r1
 800d02a:	d009      	beq.n	800d040 <__gethex+0x1f8>
 800d02c:	4553      	cmp	r3, sl
 800d02e:	dd05      	ble.n	800d03c <__gethex+0x1f4>
 800d030:	1eb9      	subs	r1, r7, #2
 800d032:	4620      	mov	r0, r4
 800d034:	f000 ffe2 	bl	800dffc <__any_on>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d145      	bne.n	800d0c8 <__gethex+0x280>
 800d03c:	f04f 0a02 	mov.w	sl, #2
 800d040:	4639      	mov	r1, r7
 800d042:	4620      	mov	r0, r4
 800d044:	f7ff fe98 	bl	800cd78 <rshift>
 800d048:	443d      	add	r5, r7
 800d04a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d04e:	42ab      	cmp	r3, r5
 800d050:	da4c      	bge.n	800d0ec <__gethex+0x2a4>
 800d052:	ee18 0a10 	vmov	r0, s16
 800d056:	4621      	mov	r1, r4
 800d058:	f000 fb70 	bl	800d73c <_Bfree>
 800d05c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d05e:	2300      	movs	r3, #0
 800d060:	6013      	str	r3, [r2, #0]
 800d062:	27a3      	movs	r7, #163	; 0xa3
 800d064:	e785      	b.n	800cf72 <__gethex+0x12a>
 800d066:	1e73      	subs	r3, r6, #1
 800d068:	9a05      	ldr	r2, [sp, #20]
 800d06a:	9303      	str	r3, [sp, #12]
 800d06c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d070:	4293      	cmp	r3, r2
 800d072:	d019      	beq.n	800d0a8 <__gethex+0x260>
 800d074:	f1bb 0f20 	cmp.w	fp, #32
 800d078:	d107      	bne.n	800d08a <__gethex+0x242>
 800d07a:	9b02      	ldr	r3, [sp, #8]
 800d07c:	9a00      	ldr	r2, [sp, #0]
 800d07e:	f843 2b04 	str.w	r2, [r3], #4
 800d082:	9302      	str	r3, [sp, #8]
 800d084:	2300      	movs	r3, #0
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	469b      	mov	fp, r3
 800d08a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d08e:	f7ff fec5 	bl	800ce1c <__hexdig_fun>
 800d092:	9b00      	ldr	r3, [sp, #0]
 800d094:	f000 000f 	and.w	r0, r0, #15
 800d098:	fa00 f00b 	lsl.w	r0, r0, fp
 800d09c:	4303      	orrs	r3, r0
 800d09e:	9300      	str	r3, [sp, #0]
 800d0a0:	f10b 0b04 	add.w	fp, fp, #4
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	e00d      	b.n	800d0c4 <__gethex+0x27c>
 800d0a8:	9b03      	ldr	r3, [sp, #12]
 800d0aa:	9a06      	ldr	r2, [sp, #24]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	42bb      	cmp	r3, r7
 800d0b0:	d3e0      	bcc.n	800d074 <__gethex+0x22c>
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	9901      	ldr	r1, [sp, #4]
 800d0b6:	9307      	str	r3, [sp, #28]
 800d0b8:	4652      	mov	r2, sl
 800d0ba:	f7fd fdc9 	bl	800ac50 <strncmp>
 800d0be:	9b07      	ldr	r3, [sp, #28]
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d1d7      	bne.n	800d074 <__gethex+0x22c>
 800d0c4:	461e      	mov	r6, r3
 800d0c6:	e78b      	b.n	800cfe0 <__gethex+0x198>
 800d0c8:	f04f 0a03 	mov.w	sl, #3
 800d0cc:	e7b8      	b.n	800d040 <__gethex+0x1f8>
 800d0ce:	da0a      	bge.n	800d0e6 <__gethex+0x29e>
 800d0d0:	1a37      	subs	r7, r6, r0
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	ee18 0a10 	vmov	r0, s16
 800d0d8:	463a      	mov	r2, r7
 800d0da:	f000 fd4b 	bl	800db74 <__lshift>
 800d0de:	1bed      	subs	r5, r5, r7
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	f100 0914 	add.w	r9, r0, #20
 800d0e6:	f04f 0a00 	mov.w	sl, #0
 800d0ea:	e7ae      	b.n	800d04a <__gethex+0x202>
 800d0ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d0f0:	42a8      	cmp	r0, r5
 800d0f2:	dd72      	ble.n	800d1da <__gethex+0x392>
 800d0f4:	1b45      	subs	r5, r0, r5
 800d0f6:	42ae      	cmp	r6, r5
 800d0f8:	dc36      	bgt.n	800d168 <__gethex+0x320>
 800d0fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	d02a      	beq.n	800d158 <__gethex+0x310>
 800d102:	2b03      	cmp	r3, #3
 800d104:	d02c      	beq.n	800d160 <__gethex+0x318>
 800d106:	2b01      	cmp	r3, #1
 800d108:	d11c      	bne.n	800d144 <__gethex+0x2fc>
 800d10a:	42ae      	cmp	r6, r5
 800d10c:	d11a      	bne.n	800d144 <__gethex+0x2fc>
 800d10e:	2e01      	cmp	r6, #1
 800d110:	d112      	bne.n	800d138 <__gethex+0x2f0>
 800d112:	9a04      	ldr	r2, [sp, #16]
 800d114:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d118:	6013      	str	r3, [r2, #0]
 800d11a:	2301      	movs	r3, #1
 800d11c:	6123      	str	r3, [r4, #16]
 800d11e:	f8c9 3000 	str.w	r3, [r9]
 800d122:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d124:	2762      	movs	r7, #98	; 0x62
 800d126:	601c      	str	r4, [r3, #0]
 800d128:	e723      	b.n	800cf72 <__gethex+0x12a>
 800d12a:	bf00      	nop
 800d12c:	08010270 	.word	0x08010270
 800d130:	080101f9 	.word	0x080101f9
 800d134:	0801020a 	.word	0x0801020a
 800d138:	1e71      	subs	r1, r6, #1
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 ff5e 	bl	800dffc <__any_on>
 800d140:	2800      	cmp	r0, #0
 800d142:	d1e6      	bne.n	800d112 <__gethex+0x2ca>
 800d144:	ee18 0a10 	vmov	r0, s16
 800d148:	4621      	mov	r1, r4
 800d14a:	f000 faf7 	bl	800d73c <_Bfree>
 800d14e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d150:	2300      	movs	r3, #0
 800d152:	6013      	str	r3, [r2, #0]
 800d154:	2750      	movs	r7, #80	; 0x50
 800d156:	e70c      	b.n	800cf72 <__gethex+0x12a>
 800d158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d1f2      	bne.n	800d144 <__gethex+0x2fc>
 800d15e:	e7d8      	b.n	800d112 <__gethex+0x2ca>
 800d160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d162:	2b00      	cmp	r3, #0
 800d164:	d1d5      	bne.n	800d112 <__gethex+0x2ca>
 800d166:	e7ed      	b.n	800d144 <__gethex+0x2fc>
 800d168:	1e6f      	subs	r7, r5, #1
 800d16a:	f1ba 0f00 	cmp.w	sl, #0
 800d16e:	d131      	bne.n	800d1d4 <__gethex+0x38c>
 800d170:	b127      	cbz	r7, 800d17c <__gethex+0x334>
 800d172:	4639      	mov	r1, r7
 800d174:	4620      	mov	r0, r4
 800d176:	f000 ff41 	bl	800dffc <__any_on>
 800d17a:	4682      	mov	sl, r0
 800d17c:	117b      	asrs	r3, r7, #5
 800d17e:	2101      	movs	r1, #1
 800d180:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d184:	f007 071f 	and.w	r7, r7, #31
 800d188:	fa01 f707 	lsl.w	r7, r1, r7
 800d18c:	421f      	tst	r7, r3
 800d18e:	4629      	mov	r1, r5
 800d190:	4620      	mov	r0, r4
 800d192:	bf18      	it	ne
 800d194:	f04a 0a02 	orrne.w	sl, sl, #2
 800d198:	1b76      	subs	r6, r6, r5
 800d19a:	f7ff fded 	bl	800cd78 <rshift>
 800d19e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d1a2:	2702      	movs	r7, #2
 800d1a4:	f1ba 0f00 	cmp.w	sl, #0
 800d1a8:	d048      	beq.n	800d23c <__gethex+0x3f4>
 800d1aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	d015      	beq.n	800d1de <__gethex+0x396>
 800d1b2:	2b03      	cmp	r3, #3
 800d1b4:	d017      	beq.n	800d1e6 <__gethex+0x39e>
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d109      	bne.n	800d1ce <__gethex+0x386>
 800d1ba:	f01a 0f02 	tst.w	sl, #2
 800d1be:	d006      	beq.n	800d1ce <__gethex+0x386>
 800d1c0:	f8d9 0000 	ldr.w	r0, [r9]
 800d1c4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d1c8:	f01a 0f01 	tst.w	sl, #1
 800d1cc:	d10e      	bne.n	800d1ec <__gethex+0x3a4>
 800d1ce:	f047 0710 	orr.w	r7, r7, #16
 800d1d2:	e033      	b.n	800d23c <__gethex+0x3f4>
 800d1d4:	f04f 0a01 	mov.w	sl, #1
 800d1d8:	e7d0      	b.n	800d17c <__gethex+0x334>
 800d1da:	2701      	movs	r7, #1
 800d1dc:	e7e2      	b.n	800d1a4 <__gethex+0x35c>
 800d1de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1e0:	f1c3 0301 	rsb	r3, r3, #1
 800d1e4:	9315      	str	r3, [sp, #84]	; 0x54
 800d1e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d0f0      	beq.n	800d1ce <__gethex+0x386>
 800d1ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d1f0:	f104 0314 	add.w	r3, r4, #20
 800d1f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d1f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d1fc:	f04f 0c00 	mov.w	ip, #0
 800d200:	4618      	mov	r0, r3
 800d202:	f853 2b04 	ldr.w	r2, [r3], #4
 800d206:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d20a:	d01c      	beq.n	800d246 <__gethex+0x3fe>
 800d20c:	3201      	adds	r2, #1
 800d20e:	6002      	str	r2, [r0, #0]
 800d210:	2f02      	cmp	r7, #2
 800d212:	f104 0314 	add.w	r3, r4, #20
 800d216:	d13f      	bne.n	800d298 <__gethex+0x450>
 800d218:	f8d8 2000 	ldr.w	r2, [r8]
 800d21c:	3a01      	subs	r2, #1
 800d21e:	42b2      	cmp	r2, r6
 800d220:	d10a      	bne.n	800d238 <__gethex+0x3f0>
 800d222:	1171      	asrs	r1, r6, #5
 800d224:	2201      	movs	r2, #1
 800d226:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d22a:	f006 061f 	and.w	r6, r6, #31
 800d22e:	fa02 f606 	lsl.w	r6, r2, r6
 800d232:	421e      	tst	r6, r3
 800d234:	bf18      	it	ne
 800d236:	4617      	movne	r7, r2
 800d238:	f047 0720 	orr.w	r7, r7, #32
 800d23c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d23e:	601c      	str	r4, [r3, #0]
 800d240:	9b04      	ldr	r3, [sp, #16]
 800d242:	601d      	str	r5, [r3, #0]
 800d244:	e695      	b.n	800cf72 <__gethex+0x12a>
 800d246:	4299      	cmp	r1, r3
 800d248:	f843 cc04 	str.w	ip, [r3, #-4]
 800d24c:	d8d8      	bhi.n	800d200 <__gethex+0x3b8>
 800d24e:	68a3      	ldr	r3, [r4, #8]
 800d250:	459b      	cmp	fp, r3
 800d252:	db19      	blt.n	800d288 <__gethex+0x440>
 800d254:	6861      	ldr	r1, [r4, #4]
 800d256:	ee18 0a10 	vmov	r0, s16
 800d25a:	3101      	adds	r1, #1
 800d25c:	f000 fa2e 	bl	800d6bc <_Balloc>
 800d260:	4681      	mov	r9, r0
 800d262:	b918      	cbnz	r0, 800d26c <__gethex+0x424>
 800d264:	4b1a      	ldr	r3, [pc, #104]	; (800d2d0 <__gethex+0x488>)
 800d266:	4602      	mov	r2, r0
 800d268:	2184      	movs	r1, #132	; 0x84
 800d26a:	e6a8      	b.n	800cfbe <__gethex+0x176>
 800d26c:	6922      	ldr	r2, [r4, #16]
 800d26e:	3202      	adds	r2, #2
 800d270:	f104 010c 	add.w	r1, r4, #12
 800d274:	0092      	lsls	r2, r2, #2
 800d276:	300c      	adds	r0, #12
 800d278:	f7fb fcdc 	bl	8008c34 <memcpy>
 800d27c:	4621      	mov	r1, r4
 800d27e:	ee18 0a10 	vmov	r0, s16
 800d282:	f000 fa5b 	bl	800d73c <_Bfree>
 800d286:	464c      	mov	r4, r9
 800d288:	6923      	ldr	r3, [r4, #16]
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d290:	6122      	str	r2, [r4, #16]
 800d292:	2201      	movs	r2, #1
 800d294:	615a      	str	r2, [r3, #20]
 800d296:	e7bb      	b.n	800d210 <__gethex+0x3c8>
 800d298:	6922      	ldr	r2, [r4, #16]
 800d29a:	455a      	cmp	r2, fp
 800d29c:	dd0b      	ble.n	800d2b6 <__gethex+0x46e>
 800d29e:	2101      	movs	r1, #1
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f7ff fd69 	bl	800cd78 <rshift>
 800d2a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2aa:	3501      	adds	r5, #1
 800d2ac:	42ab      	cmp	r3, r5
 800d2ae:	f6ff aed0 	blt.w	800d052 <__gethex+0x20a>
 800d2b2:	2701      	movs	r7, #1
 800d2b4:	e7c0      	b.n	800d238 <__gethex+0x3f0>
 800d2b6:	f016 061f 	ands.w	r6, r6, #31
 800d2ba:	d0fa      	beq.n	800d2b2 <__gethex+0x46a>
 800d2bc:	4453      	add	r3, sl
 800d2be:	f1c6 0620 	rsb	r6, r6, #32
 800d2c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d2c6:	f000 faeb 	bl	800d8a0 <__hi0bits>
 800d2ca:	42b0      	cmp	r0, r6
 800d2cc:	dbe7      	blt.n	800d29e <__gethex+0x456>
 800d2ce:	e7f0      	b.n	800d2b2 <__gethex+0x46a>
 800d2d0:	080101f9 	.word	0x080101f9

0800d2d4 <L_shift>:
 800d2d4:	f1c2 0208 	rsb	r2, r2, #8
 800d2d8:	0092      	lsls	r2, r2, #2
 800d2da:	b570      	push	{r4, r5, r6, lr}
 800d2dc:	f1c2 0620 	rsb	r6, r2, #32
 800d2e0:	6843      	ldr	r3, [r0, #4]
 800d2e2:	6804      	ldr	r4, [r0, #0]
 800d2e4:	fa03 f506 	lsl.w	r5, r3, r6
 800d2e8:	432c      	orrs	r4, r5
 800d2ea:	40d3      	lsrs	r3, r2
 800d2ec:	6004      	str	r4, [r0, #0]
 800d2ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800d2f2:	4288      	cmp	r0, r1
 800d2f4:	d3f4      	bcc.n	800d2e0 <L_shift+0xc>
 800d2f6:	bd70      	pop	{r4, r5, r6, pc}

0800d2f8 <__match>:
 800d2f8:	b530      	push	{r4, r5, lr}
 800d2fa:	6803      	ldr	r3, [r0, #0]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d302:	b914      	cbnz	r4, 800d30a <__match+0x12>
 800d304:	6003      	str	r3, [r0, #0]
 800d306:	2001      	movs	r0, #1
 800d308:	bd30      	pop	{r4, r5, pc}
 800d30a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d30e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d312:	2d19      	cmp	r5, #25
 800d314:	bf98      	it	ls
 800d316:	3220      	addls	r2, #32
 800d318:	42a2      	cmp	r2, r4
 800d31a:	d0f0      	beq.n	800d2fe <__match+0x6>
 800d31c:	2000      	movs	r0, #0
 800d31e:	e7f3      	b.n	800d308 <__match+0x10>

0800d320 <__hexnan>:
 800d320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	680b      	ldr	r3, [r1, #0]
 800d326:	115e      	asrs	r6, r3, #5
 800d328:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d32c:	f013 031f 	ands.w	r3, r3, #31
 800d330:	b087      	sub	sp, #28
 800d332:	bf18      	it	ne
 800d334:	3604      	addne	r6, #4
 800d336:	2500      	movs	r5, #0
 800d338:	1f37      	subs	r7, r6, #4
 800d33a:	4690      	mov	r8, r2
 800d33c:	6802      	ldr	r2, [r0, #0]
 800d33e:	9301      	str	r3, [sp, #4]
 800d340:	4682      	mov	sl, r0
 800d342:	f846 5c04 	str.w	r5, [r6, #-4]
 800d346:	46b9      	mov	r9, r7
 800d348:	463c      	mov	r4, r7
 800d34a:	9502      	str	r5, [sp, #8]
 800d34c:	46ab      	mov	fp, r5
 800d34e:	7851      	ldrb	r1, [r2, #1]
 800d350:	1c53      	adds	r3, r2, #1
 800d352:	9303      	str	r3, [sp, #12]
 800d354:	b341      	cbz	r1, 800d3a8 <__hexnan+0x88>
 800d356:	4608      	mov	r0, r1
 800d358:	9205      	str	r2, [sp, #20]
 800d35a:	9104      	str	r1, [sp, #16]
 800d35c:	f7ff fd5e 	bl	800ce1c <__hexdig_fun>
 800d360:	2800      	cmp	r0, #0
 800d362:	d14f      	bne.n	800d404 <__hexnan+0xe4>
 800d364:	9904      	ldr	r1, [sp, #16]
 800d366:	9a05      	ldr	r2, [sp, #20]
 800d368:	2920      	cmp	r1, #32
 800d36a:	d818      	bhi.n	800d39e <__hexnan+0x7e>
 800d36c:	9b02      	ldr	r3, [sp, #8]
 800d36e:	459b      	cmp	fp, r3
 800d370:	dd13      	ble.n	800d39a <__hexnan+0x7a>
 800d372:	454c      	cmp	r4, r9
 800d374:	d206      	bcs.n	800d384 <__hexnan+0x64>
 800d376:	2d07      	cmp	r5, #7
 800d378:	dc04      	bgt.n	800d384 <__hexnan+0x64>
 800d37a:	462a      	mov	r2, r5
 800d37c:	4649      	mov	r1, r9
 800d37e:	4620      	mov	r0, r4
 800d380:	f7ff ffa8 	bl	800d2d4 <L_shift>
 800d384:	4544      	cmp	r4, r8
 800d386:	d950      	bls.n	800d42a <__hexnan+0x10a>
 800d388:	2300      	movs	r3, #0
 800d38a:	f1a4 0904 	sub.w	r9, r4, #4
 800d38e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d392:	f8cd b008 	str.w	fp, [sp, #8]
 800d396:	464c      	mov	r4, r9
 800d398:	461d      	mov	r5, r3
 800d39a:	9a03      	ldr	r2, [sp, #12]
 800d39c:	e7d7      	b.n	800d34e <__hexnan+0x2e>
 800d39e:	2929      	cmp	r1, #41	; 0x29
 800d3a0:	d156      	bne.n	800d450 <__hexnan+0x130>
 800d3a2:	3202      	adds	r2, #2
 800d3a4:	f8ca 2000 	str.w	r2, [sl]
 800d3a8:	f1bb 0f00 	cmp.w	fp, #0
 800d3ac:	d050      	beq.n	800d450 <__hexnan+0x130>
 800d3ae:	454c      	cmp	r4, r9
 800d3b0:	d206      	bcs.n	800d3c0 <__hexnan+0xa0>
 800d3b2:	2d07      	cmp	r5, #7
 800d3b4:	dc04      	bgt.n	800d3c0 <__hexnan+0xa0>
 800d3b6:	462a      	mov	r2, r5
 800d3b8:	4649      	mov	r1, r9
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f7ff ff8a 	bl	800d2d4 <L_shift>
 800d3c0:	4544      	cmp	r4, r8
 800d3c2:	d934      	bls.n	800d42e <__hexnan+0x10e>
 800d3c4:	f1a8 0204 	sub.w	r2, r8, #4
 800d3c8:	4623      	mov	r3, r4
 800d3ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800d3ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800d3d2:	429f      	cmp	r7, r3
 800d3d4:	d2f9      	bcs.n	800d3ca <__hexnan+0xaa>
 800d3d6:	1b3b      	subs	r3, r7, r4
 800d3d8:	f023 0303 	bic.w	r3, r3, #3
 800d3dc:	3304      	adds	r3, #4
 800d3de:	3401      	adds	r4, #1
 800d3e0:	3e03      	subs	r6, #3
 800d3e2:	42b4      	cmp	r4, r6
 800d3e4:	bf88      	it	hi
 800d3e6:	2304      	movhi	r3, #4
 800d3e8:	4443      	add	r3, r8
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f843 2b04 	str.w	r2, [r3], #4
 800d3f0:	429f      	cmp	r7, r3
 800d3f2:	d2fb      	bcs.n	800d3ec <__hexnan+0xcc>
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	b91b      	cbnz	r3, 800d400 <__hexnan+0xe0>
 800d3f8:	4547      	cmp	r7, r8
 800d3fa:	d127      	bne.n	800d44c <__hexnan+0x12c>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	603b      	str	r3, [r7, #0]
 800d400:	2005      	movs	r0, #5
 800d402:	e026      	b.n	800d452 <__hexnan+0x132>
 800d404:	3501      	adds	r5, #1
 800d406:	2d08      	cmp	r5, #8
 800d408:	f10b 0b01 	add.w	fp, fp, #1
 800d40c:	dd06      	ble.n	800d41c <__hexnan+0xfc>
 800d40e:	4544      	cmp	r4, r8
 800d410:	d9c3      	bls.n	800d39a <__hexnan+0x7a>
 800d412:	2300      	movs	r3, #0
 800d414:	f844 3c04 	str.w	r3, [r4, #-4]
 800d418:	2501      	movs	r5, #1
 800d41a:	3c04      	subs	r4, #4
 800d41c:	6822      	ldr	r2, [r4, #0]
 800d41e:	f000 000f 	and.w	r0, r0, #15
 800d422:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d426:	6022      	str	r2, [r4, #0]
 800d428:	e7b7      	b.n	800d39a <__hexnan+0x7a>
 800d42a:	2508      	movs	r5, #8
 800d42c:	e7b5      	b.n	800d39a <__hexnan+0x7a>
 800d42e:	9b01      	ldr	r3, [sp, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d0df      	beq.n	800d3f4 <__hexnan+0xd4>
 800d434:	f04f 32ff 	mov.w	r2, #4294967295
 800d438:	f1c3 0320 	rsb	r3, r3, #32
 800d43c:	fa22 f303 	lsr.w	r3, r2, r3
 800d440:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d444:	401a      	ands	r2, r3
 800d446:	f846 2c04 	str.w	r2, [r6, #-4]
 800d44a:	e7d3      	b.n	800d3f4 <__hexnan+0xd4>
 800d44c:	3f04      	subs	r7, #4
 800d44e:	e7d1      	b.n	800d3f4 <__hexnan+0xd4>
 800d450:	2004      	movs	r0, #4
 800d452:	b007      	add	sp, #28
 800d454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d458 <_findenv_r>:
 800d458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d45c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800d4cc <_findenv_r+0x74>
 800d460:	4607      	mov	r7, r0
 800d462:	4689      	mov	r9, r1
 800d464:	4616      	mov	r6, r2
 800d466:	f001 fd33 	bl	800eed0 <__env_lock>
 800d46a:	f8da 4000 	ldr.w	r4, [sl]
 800d46e:	b134      	cbz	r4, 800d47e <_findenv_r+0x26>
 800d470:	464b      	mov	r3, r9
 800d472:	4698      	mov	r8, r3
 800d474:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d478:	b13a      	cbz	r2, 800d48a <_findenv_r+0x32>
 800d47a:	2a3d      	cmp	r2, #61	; 0x3d
 800d47c:	d1f9      	bne.n	800d472 <_findenv_r+0x1a>
 800d47e:	4638      	mov	r0, r7
 800d480:	f001 fd2c 	bl	800eedc <__env_unlock>
 800d484:	2000      	movs	r0, #0
 800d486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48a:	eba8 0809 	sub.w	r8, r8, r9
 800d48e:	46a3      	mov	fp, r4
 800d490:	f854 0b04 	ldr.w	r0, [r4], #4
 800d494:	2800      	cmp	r0, #0
 800d496:	d0f2      	beq.n	800d47e <_findenv_r+0x26>
 800d498:	4642      	mov	r2, r8
 800d49a:	4649      	mov	r1, r9
 800d49c:	f7fd fbd8 	bl	800ac50 <strncmp>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d1f4      	bne.n	800d48e <_findenv_r+0x36>
 800d4a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d4a8:	eb03 0508 	add.w	r5, r3, r8
 800d4ac:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d4b0:	2b3d      	cmp	r3, #61	; 0x3d
 800d4b2:	d1ec      	bne.n	800d48e <_findenv_r+0x36>
 800d4b4:	f8da 3000 	ldr.w	r3, [sl]
 800d4b8:	ebab 0303 	sub.w	r3, fp, r3
 800d4bc:	109b      	asrs	r3, r3, #2
 800d4be:	4638      	mov	r0, r7
 800d4c0:	6033      	str	r3, [r6, #0]
 800d4c2:	f001 fd0b 	bl	800eedc <__env_unlock>
 800d4c6:	1c68      	adds	r0, r5, #1
 800d4c8:	e7dd      	b.n	800d486 <_findenv_r+0x2e>
 800d4ca:	bf00      	nop
 800d4cc:	20000240 	.word	0x20000240

0800d4d0 <_getenv_r>:
 800d4d0:	b507      	push	{r0, r1, r2, lr}
 800d4d2:	aa01      	add	r2, sp, #4
 800d4d4:	f7ff ffc0 	bl	800d458 <_findenv_r>
 800d4d8:	b003      	add	sp, #12
 800d4da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d4e0 <__gettzinfo>:
 800d4e0:	4800      	ldr	r0, [pc, #0]	; (800d4e4 <__gettzinfo+0x4>)
 800d4e2:	4770      	bx	lr
 800d4e4:	20000078 	.word	0x20000078

0800d4e8 <gmtime_r>:
 800d4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ec:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d4f0:	460c      	mov	r4, r1
 800d4f2:	4a4f      	ldr	r2, [pc, #316]	; (800d630 <gmtime_r+0x148>)
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	4639      	mov	r1, r7
 800d4fa:	f7f3 fbdd 	bl	8000cb8 <__aeabi_ldivmod>
 800d4fe:	4639      	mov	r1, r7
 800d500:	4605      	mov	r5, r0
 800d502:	4a4b      	ldr	r2, [pc, #300]	; (800d630 <gmtime_r+0x148>)
 800d504:	4630      	mov	r0, r6
 800d506:	2300      	movs	r3, #0
 800d508:	f7f3 fbd6 	bl	8000cb8 <__aeabi_ldivmod>
 800d50c:	2a00      	cmp	r2, #0
 800d50e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800d512:	bfb7      	itett	lt
 800d514:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800d518:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800d51c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800d520:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800d524:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800d528:	fbb2 f1f0 	udiv	r1, r2, r0
 800d52c:	fb00 2211 	mls	r2, r0, r1, r2
 800d530:	203c      	movs	r0, #60	; 0x3c
 800d532:	60a1      	str	r1, [r4, #8]
 800d534:	fbb2 f1f0 	udiv	r1, r2, r0
 800d538:	fb00 2211 	mls	r2, r0, r1, r2
 800d53c:	6061      	str	r1, [r4, #4]
 800d53e:	6022      	str	r2, [r4, #0]
 800d540:	2107      	movs	r1, #7
 800d542:	1cda      	adds	r2, r3, #3
 800d544:	fb92 f1f1 	sdiv	r1, r2, r1
 800d548:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d54c:	1a52      	subs	r2, r2, r1
 800d54e:	bf48      	it	mi
 800d550:	3207      	addmi	r2, #7
 800d552:	4d38      	ldr	r5, [pc, #224]	; (800d634 <gmtime_r+0x14c>)
 800d554:	4838      	ldr	r0, [pc, #224]	; (800d638 <gmtime_r+0x150>)
 800d556:	61a2      	str	r2, [r4, #24]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	bfb7      	itett	lt
 800d55c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800d560:	fb93 f5f5 	sdivge	r5, r3, r5
 800d564:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800d568:	fb92 f5f5 	sdivlt	r5, r2, r5
 800d56c:	fb00 3005 	mla	r0, r0, r5, r3
 800d570:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800d574:	fbb0 f2f2 	udiv	r2, r0, r2
 800d578:	4402      	add	r2, r0
 800d57a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800d57e:	fbb0 f1f3 	udiv	r1, r0, r3
 800d582:	1a52      	subs	r2, r2, r1
 800d584:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d588:	492c      	ldr	r1, [pc, #176]	; (800d63c <gmtime_r+0x154>)
 800d58a:	fbb0 f1f1 	udiv	r1, r0, r1
 800d58e:	2764      	movs	r7, #100	; 0x64
 800d590:	1a52      	subs	r2, r2, r1
 800d592:	fbb2 f1fc 	udiv	r1, r2, ip
 800d596:	fbb2 f3f3 	udiv	r3, r2, r3
 800d59a:	fbb1 f6f7 	udiv	r6, r1, r7
 800d59e:	1af3      	subs	r3, r6, r3
 800d5a0:	4403      	add	r3, r0
 800d5a2:	fb0c 3311 	mls	r3, ip, r1, r3
 800d5a6:	2299      	movs	r2, #153	; 0x99
 800d5a8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800d5ac:	f10e 0e02 	add.w	lr, lr, #2
 800d5b0:	f103 0c01 	add.w	ip, r3, #1
 800d5b4:	fbbe f0f2 	udiv	r0, lr, r2
 800d5b8:	4342      	muls	r2, r0
 800d5ba:	3202      	adds	r2, #2
 800d5bc:	f04f 0805 	mov.w	r8, #5
 800d5c0:	fbb2 f2f8 	udiv	r2, r2, r8
 800d5c4:	ebac 0c02 	sub.w	ip, ip, r2
 800d5c8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800d5cc:	4596      	cmp	lr, r2
 800d5ce:	bf94      	ite	ls
 800d5d0:	2202      	movls	r2, #2
 800d5d2:	f06f 0209 	mvnhi.w	r2, #9
 800d5d6:	4410      	add	r0, r2
 800d5d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d5dc:	fb02 1505 	mla	r5, r2, r5, r1
 800d5e0:	2801      	cmp	r0, #1
 800d5e2:	bf98      	it	ls
 800d5e4:	3501      	addls	r5, #1
 800d5e6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800d5ea:	d30d      	bcc.n	800d608 <gmtime_r+0x120>
 800d5ec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d5f0:	61e3      	str	r3, [r4, #28]
 800d5f2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800d5fc:	f8c4 c00c 	str.w	ip, [r4, #12]
 800d600:	6223      	str	r3, [r4, #32]
 800d602:	4620      	mov	r0, r4
 800d604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d608:	078a      	lsls	r2, r1, #30
 800d60a:	d102      	bne.n	800d612 <gmtime_r+0x12a>
 800d60c:	fb07 1616 	mls	r6, r7, r6, r1
 800d610:	b95e      	cbnz	r6, 800d62a <gmtime_r+0x142>
 800d612:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d616:	fbb1 f6f2 	udiv	r6, r1, r2
 800d61a:	fb02 1216 	mls	r2, r2, r6, r1
 800d61e:	fab2 f282 	clz	r2, r2
 800d622:	0952      	lsrs	r2, r2, #5
 800d624:	333b      	adds	r3, #59	; 0x3b
 800d626:	4413      	add	r3, r2
 800d628:	e7e2      	b.n	800d5f0 <gmtime_r+0x108>
 800d62a:	2201      	movs	r2, #1
 800d62c:	e7fa      	b.n	800d624 <gmtime_r+0x13c>
 800d62e:	bf00      	nop
 800d630:	00015180 	.word	0x00015180
 800d634:	00023ab1 	.word	0x00023ab1
 800d638:	fffdc54f 	.word	0xfffdc54f
 800d63c:	00023ab0 	.word	0x00023ab0

0800d640 <labs>:
 800d640:	2800      	cmp	r0, #0
 800d642:	bfb8      	it	lt
 800d644:	4240      	neglt	r0, r0
 800d646:	4770      	bx	lr

0800d648 <_localeconv_r>:
 800d648:	4800      	ldr	r0, [pc, #0]	; (800d64c <_localeconv_r+0x4>)
 800d64a:	4770      	bx	lr
 800d64c:	200001c4 	.word	0x200001c4

0800d650 <__retarget_lock_init_recursive>:
 800d650:	4770      	bx	lr

0800d652 <__retarget_lock_acquire>:
 800d652:	4770      	bx	lr

0800d654 <__retarget_lock_acquire_recursive>:
 800d654:	4770      	bx	lr

0800d656 <__retarget_lock_release>:
 800d656:	4770      	bx	lr

0800d658 <__retarget_lock_release_recursive>:
 800d658:	4770      	bx	lr
	...

0800d65c <_lseek_r>:
 800d65c:	b538      	push	{r3, r4, r5, lr}
 800d65e:	4d07      	ldr	r5, [pc, #28]	; (800d67c <_lseek_r+0x20>)
 800d660:	4604      	mov	r4, r0
 800d662:	4608      	mov	r0, r1
 800d664:	4611      	mov	r1, r2
 800d666:	2200      	movs	r2, #0
 800d668:	602a      	str	r2, [r5, #0]
 800d66a:	461a      	mov	r2, r3
 800d66c:	f001 ff38 	bl	800f4e0 <_lseek>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d102      	bne.n	800d67a <_lseek_r+0x1e>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	b103      	cbz	r3, 800d67a <_lseek_r+0x1e>
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
 800d67c:	20000360 	.word	0x20000360

0800d680 <__ascii_mbtowc>:
 800d680:	b082      	sub	sp, #8
 800d682:	b901      	cbnz	r1, 800d686 <__ascii_mbtowc+0x6>
 800d684:	a901      	add	r1, sp, #4
 800d686:	b142      	cbz	r2, 800d69a <__ascii_mbtowc+0x1a>
 800d688:	b14b      	cbz	r3, 800d69e <__ascii_mbtowc+0x1e>
 800d68a:	7813      	ldrb	r3, [r2, #0]
 800d68c:	600b      	str	r3, [r1, #0]
 800d68e:	7812      	ldrb	r2, [r2, #0]
 800d690:	1e10      	subs	r0, r2, #0
 800d692:	bf18      	it	ne
 800d694:	2001      	movne	r0, #1
 800d696:	b002      	add	sp, #8
 800d698:	4770      	bx	lr
 800d69a:	4610      	mov	r0, r2
 800d69c:	e7fb      	b.n	800d696 <__ascii_mbtowc+0x16>
 800d69e:	f06f 0001 	mvn.w	r0, #1
 800d6a2:	e7f8      	b.n	800d696 <__ascii_mbtowc+0x16>

0800d6a4 <__malloc_lock>:
 800d6a4:	4801      	ldr	r0, [pc, #4]	; (800d6ac <__malloc_lock+0x8>)
 800d6a6:	f7ff bfd5 	b.w	800d654 <__retarget_lock_acquire_recursive>
 800d6aa:	bf00      	nop
 800d6ac:	20000359 	.word	0x20000359

0800d6b0 <__malloc_unlock>:
 800d6b0:	4801      	ldr	r0, [pc, #4]	; (800d6b8 <__malloc_unlock+0x8>)
 800d6b2:	f7ff bfd1 	b.w	800d658 <__retarget_lock_release_recursive>
 800d6b6:	bf00      	nop
 800d6b8:	20000359 	.word	0x20000359

0800d6bc <_Balloc>:
 800d6bc:	b570      	push	{r4, r5, r6, lr}
 800d6be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	460d      	mov	r5, r1
 800d6c4:	b976      	cbnz	r6, 800d6e4 <_Balloc+0x28>
 800d6c6:	2010      	movs	r0, #16
 800d6c8:	f7fb faa4 	bl	8008c14 <malloc>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	6260      	str	r0, [r4, #36]	; 0x24
 800d6d0:	b920      	cbnz	r0, 800d6dc <_Balloc+0x20>
 800d6d2:	4b18      	ldr	r3, [pc, #96]	; (800d734 <_Balloc+0x78>)
 800d6d4:	4818      	ldr	r0, [pc, #96]	; (800d738 <_Balloc+0x7c>)
 800d6d6:	2166      	movs	r1, #102	; 0x66
 800d6d8:	f7fe fc80 	bl	800bfdc <__assert_func>
 800d6dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6e0:	6006      	str	r6, [r0, #0]
 800d6e2:	60c6      	str	r6, [r0, #12]
 800d6e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d6e6:	68f3      	ldr	r3, [r6, #12]
 800d6e8:	b183      	cbz	r3, 800d70c <_Balloc+0x50>
 800d6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6f2:	b9b8      	cbnz	r0, 800d724 <_Balloc+0x68>
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	fa01 f605 	lsl.w	r6, r1, r5
 800d6fa:	1d72      	adds	r2, r6, #5
 800d6fc:	0092      	lsls	r2, r2, #2
 800d6fe:	4620      	mov	r0, r4
 800d700:	f000 fc9d 	bl	800e03e <_calloc_r>
 800d704:	b160      	cbz	r0, 800d720 <_Balloc+0x64>
 800d706:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d70a:	e00e      	b.n	800d72a <_Balloc+0x6e>
 800d70c:	2221      	movs	r2, #33	; 0x21
 800d70e:	2104      	movs	r1, #4
 800d710:	4620      	mov	r0, r4
 800d712:	f000 fc94 	bl	800e03e <_calloc_r>
 800d716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d718:	60f0      	str	r0, [r6, #12]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1e4      	bne.n	800d6ea <_Balloc+0x2e>
 800d720:	2000      	movs	r0, #0
 800d722:	bd70      	pop	{r4, r5, r6, pc}
 800d724:	6802      	ldr	r2, [r0, #0]
 800d726:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d72a:	2300      	movs	r3, #0
 800d72c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d730:	e7f7      	b.n	800d722 <_Balloc+0x66>
 800d732:	bf00      	nop
 800d734:	0800fbdc 	.word	0x0800fbdc
 800d738:	08010284 	.word	0x08010284

0800d73c <_Bfree>:
 800d73c:	b570      	push	{r4, r5, r6, lr}
 800d73e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d740:	4605      	mov	r5, r0
 800d742:	460c      	mov	r4, r1
 800d744:	b976      	cbnz	r6, 800d764 <_Bfree+0x28>
 800d746:	2010      	movs	r0, #16
 800d748:	f7fb fa64 	bl	8008c14 <malloc>
 800d74c:	4602      	mov	r2, r0
 800d74e:	6268      	str	r0, [r5, #36]	; 0x24
 800d750:	b920      	cbnz	r0, 800d75c <_Bfree+0x20>
 800d752:	4b09      	ldr	r3, [pc, #36]	; (800d778 <_Bfree+0x3c>)
 800d754:	4809      	ldr	r0, [pc, #36]	; (800d77c <_Bfree+0x40>)
 800d756:	218a      	movs	r1, #138	; 0x8a
 800d758:	f7fe fc40 	bl	800bfdc <__assert_func>
 800d75c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d760:	6006      	str	r6, [r0, #0]
 800d762:	60c6      	str	r6, [r0, #12]
 800d764:	b13c      	cbz	r4, 800d776 <_Bfree+0x3a>
 800d766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d768:	6862      	ldr	r2, [r4, #4]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d770:	6021      	str	r1, [r4, #0]
 800d772:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d776:	bd70      	pop	{r4, r5, r6, pc}
 800d778:	0800fbdc 	.word	0x0800fbdc
 800d77c:	08010284 	.word	0x08010284

0800d780 <__multadd>:
 800d780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d784:	690d      	ldr	r5, [r1, #16]
 800d786:	4607      	mov	r7, r0
 800d788:	460c      	mov	r4, r1
 800d78a:	461e      	mov	r6, r3
 800d78c:	f101 0c14 	add.w	ip, r1, #20
 800d790:	2000      	movs	r0, #0
 800d792:	f8dc 3000 	ldr.w	r3, [ip]
 800d796:	b299      	uxth	r1, r3
 800d798:	fb02 6101 	mla	r1, r2, r1, r6
 800d79c:	0c1e      	lsrs	r6, r3, #16
 800d79e:	0c0b      	lsrs	r3, r1, #16
 800d7a0:	fb02 3306 	mla	r3, r2, r6, r3
 800d7a4:	b289      	uxth	r1, r1
 800d7a6:	3001      	adds	r0, #1
 800d7a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7ac:	4285      	cmp	r5, r0
 800d7ae:	f84c 1b04 	str.w	r1, [ip], #4
 800d7b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7b6:	dcec      	bgt.n	800d792 <__multadd+0x12>
 800d7b8:	b30e      	cbz	r6, 800d7fe <__multadd+0x7e>
 800d7ba:	68a3      	ldr	r3, [r4, #8]
 800d7bc:	42ab      	cmp	r3, r5
 800d7be:	dc19      	bgt.n	800d7f4 <__multadd+0x74>
 800d7c0:	6861      	ldr	r1, [r4, #4]
 800d7c2:	4638      	mov	r0, r7
 800d7c4:	3101      	adds	r1, #1
 800d7c6:	f7ff ff79 	bl	800d6bc <_Balloc>
 800d7ca:	4680      	mov	r8, r0
 800d7cc:	b928      	cbnz	r0, 800d7da <__multadd+0x5a>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	4b0c      	ldr	r3, [pc, #48]	; (800d804 <__multadd+0x84>)
 800d7d2:	480d      	ldr	r0, [pc, #52]	; (800d808 <__multadd+0x88>)
 800d7d4:	21b5      	movs	r1, #181	; 0xb5
 800d7d6:	f7fe fc01 	bl	800bfdc <__assert_func>
 800d7da:	6922      	ldr	r2, [r4, #16]
 800d7dc:	3202      	adds	r2, #2
 800d7de:	f104 010c 	add.w	r1, r4, #12
 800d7e2:	0092      	lsls	r2, r2, #2
 800d7e4:	300c      	adds	r0, #12
 800d7e6:	f7fb fa25 	bl	8008c34 <memcpy>
 800d7ea:	4621      	mov	r1, r4
 800d7ec:	4638      	mov	r0, r7
 800d7ee:	f7ff ffa5 	bl	800d73c <_Bfree>
 800d7f2:	4644      	mov	r4, r8
 800d7f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7f8:	3501      	adds	r5, #1
 800d7fa:	615e      	str	r6, [r3, #20]
 800d7fc:	6125      	str	r5, [r4, #16]
 800d7fe:	4620      	mov	r0, r4
 800d800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d804:	080101f9 	.word	0x080101f9
 800d808:	08010284 	.word	0x08010284

0800d80c <__s2b>:
 800d80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d810:	460c      	mov	r4, r1
 800d812:	4615      	mov	r5, r2
 800d814:	461f      	mov	r7, r3
 800d816:	2209      	movs	r2, #9
 800d818:	3308      	adds	r3, #8
 800d81a:	4606      	mov	r6, r0
 800d81c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d820:	2100      	movs	r1, #0
 800d822:	2201      	movs	r2, #1
 800d824:	429a      	cmp	r2, r3
 800d826:	db09      	blt.n	800d83c <__s2b+0x30>
 800d828:	4630      	mov	r0, r6
 800d82a:	f7ff ff47 	bl	800d6bc <_Balloc>
 800d82e:	b940      	cbnz	r0, 800d842 <__s2b+0x36>
 800d830:	4602      	mov	r2, r0
 800d832:	4b19      	ldr	r3, [pc, #100]	; (800d898 <__s2b+0x8c>)
 800d834:	4819      	ldr	r0, [pc, #100]	; (800d89c <__s2b+0x90>)
 800d836:	21ce      	movs	r1, #206	; 0xce
 800d838:	f7fe fbd0 	bl	800bfdc <__assert_func>
 800d83c:	0052      	lsls	r2, r2, #1
 800d83e:	3101      	adds	r1, #1
 800d840:	e7f0      	b.n	800d824 <__s2b+0x18>
 800d842:	9b08      	ldr	r3, [sp, #32]
 800d844:	6143      	str	r3, [r0, #20]
 800d846:	2d09      	cmp	r5, #9
 800d848:	f04f 0301 	mov.w	r3, #1
 800d84c:	6103      	str	r3, [r0, #16]
 800d84e:	dd16      	ble.n	800d87e <__s2b+0x72>
 800d850:	f104 0909 	add.w	r9, r4, #9
 800d854:	46c8      	mov	r8, r9
 800d856:	442c      	add	r4, r5
 800d858:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d85c:	4601      	mov	r1, r0
 800d85e:	3b30      	subs	r3, #48	; 0x30
 800d860:	220a      	movs	r2, #10
 800d862:	4630      	mov	r0, r6
 800d864:	f7ff ff8c 	bl	800d780 <__multadd>
 800d868:	45a0      	cmp	r8, r4
 800d86a:	d1f5      	bne.n	800d858 <__s2b+0x4c>
 800d86c:	f1a5 0408 	sub.w	r4, r5, #8
 800d870:	444c      	add	r4, r9
 800d872:	1b2d      	subs	r5, r5, r4
 800d874:	1963      	adds	r3, r4, r5
 800d876:	42bb      	cmp	r3, r7
 800d878:	db04      	blt.n	800d884 <__s2b+0x78>
 800d87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d87e:	340a      	adds	r4, #10
 800d880:	2509      	movs	r5, #9
 800d882:	e7f6      	b.n	800d872 <__s2b+0x66>
 800d884:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d888:	4601      	mov	r1, r0
 800d88a:	3b30      	subs	r3, #48	; 0x30
 800d88c:	220a      	movs	r2, #10
 800d88e:	4630      	mov	r0, r6
 800d890:	f7ff ff76 	bl	800d780 <__multadd>
 800d894:	e7ee      	b.n	800d874 <__s2b+0x68>
 800d896:	bf00      	nop
 800d898:	080101f9 	.word	0x080101f9
 800d89c:	08010284 	.word	0x08010284

0800d8a0 <__hi0bits>:
 800d8a0:	0c03      	lsrs	r3, r0, #16
 800d8a2:	041b      	lsls	r3, r3, #16
 800d8a4:	b9d3      	cbnz	r3, 800d8dc <__hi0bits+0x3c>
 800d8a6:	0400      	lsls	r0, r0, #16
 800d8a8:	2310      	movs	r3, #16
 800d8aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8ae:	bf04      	itt	eq
 800d8b0:	0200      	lsleq	r0, r0, #8
 800d8b2:	3308      	addeq	r3, #8
 800d8b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d8b8:	bf04      	itt	eq
 800d8ba:	0100      	lsleq	r0, r0, #4
 800d8bc:	3304      	addeq	r3, #4
 800d8be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d8c2:	bf04      	itt	eq
 800d8c4:	0080      	lsleq	r0, r0, #2
 800d8c6:	3302      	addeq	r3, #2
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	db05      	blt.n	800d8d8 <__hi0bits+0x38>
 800d8cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d8d0:	f103 0301 	add.w	r3, r3, #1
 800d8d4:	bf08      	it	eq
 800d8d6:	2320      	moveq	r3, #32
 800d8d8:	4618      	mov	r0, r3
 800d8da:	4770      	bx	lr
 800d8dc:	2300      	movs	r3, #0
 800d8de:	e7e4      	b.n	800d8aa <__hi0bits+0xa>

0800d8e0 <__lo0bits>:
 800d8e0:	6803      	ldr	r3, [r0, #0]
 800d8e2:	f013 0207 	ands.w	r2, r3, #7
 800d8e6:	4601      	mov	r1, r0
 800d8e8:	d00b      	beq.n	800d902 <__lo0bits+0x22>
 800d8ea:	07da      	lsls	r2, r3, #31
 800d8ec:	d423      	bmi.n	800d936 <__lo0bits+0x56>
 800d8ee:	0798      	lsls	r0, r3, #30
 800d8f0:	bf49      	itett	mi
 800d8f2:	085b      	lsrmi	r3, r3, #1
 800d8f4:	089b      	lsrpl	r3, r3, #2
 800d8f6:	2001      	movmi	r0, #1
 800d8f8:	600b      	strmi	r3, [r1, #0]
 800d8fa:	bf5c      	itt	pl
 800d8fc:	600b      	strpl	r3, [r1, #0]
 800d8fe:	2002      	movpl	r0, #2
 800d900:	4770      	bx	lr
 800d902:	b298      	uxth	r0, r3
 800d904:	b9a8      	cbnz	r0, 800d932 <__lo0bits+0x52>
 800d906:	0c1b      	lsrs	r3, r3, #16
 800d908:	2010      	movs	r0, #16
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	b90a      	cbnz	r2, 800d912 <__lo0bits+0x32>
 800d90e:	3008      	adds	r0, #8
 800d910:	0a1b      	lsrs	r3, r3, #8
 800d912:	071a      	lsls	r2, r3, #28
 800d914:	bf04      	itt	eq
 800d916:	091b      	lsreq	r3, r3, #4
 800d918:	3004      	addeq	r0, #4
 800d91a:	079a      	lsls	r2, r3, #30
 800d91c:	bf04      	itt	eq
 800d91e:	089b      	lsreq	r3, r3, #2
 800d920:	3002      	addeq	r0, #2
 800d922:	07da      	lsls	r2, r3, #31
 800d924:	d403      	bmi.n	800d92e <__lo0bits+0x4e>
 800d926:	085b      	lsrs	r3, r3, #1
 800d928:	f100 0001 	add.w	r0, r0, #1
 800d92c:	d005      	beq.n	800d93a <__lo0bits+0x5a>
 800d92e:	600b      	str	r3, [r1, #0]
 800d930:	4770      	bx	lr
 800d932:	4610      	mov	r0, r2
 800d934:	e7e9      	b.n	800d90a <__lo0bits+0x2a>
 800d936:	2000      	movs	r0, #0
 800d938:	4770      	bx	lr
 800d93a:	2020      	movs	r0, #32
 800d93c:	4770      	bx	lr
	...

0800d940 <__i2b>:
 800d940:	b510      	push	{r4, lr}
 800d942:	460c      	mov	r4, r1
 800d944:	2101      	movs	r1, #1
 800d946:	f7ff feb9 	bl	800d6bc <_Balloc>
 800d94a:	4602      	mov	r2, r0
 800d94c:	b928      	cbnz	r0, 800d95a <__i2b+0x1a>
 800d94e:	4b05      	ldr	r3, [pc, #20]	; (800d964 <__i2b+0x24>)
 800d950:	4805      	ldr	r0, [pc, #20]	; (800d968 <__i2b+0x28>)
 800d952:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d956:	f7fe fb41 	bl	800bfdc <__assert_func>
 800d95a:	2301      	movs	r3, #1
 800d95c:	6144      	str	r4, [r0, #20]
 800d95e:	6103      	str	r3, [r0, #16]
 800d960:	bd10      	pop	{r4, pc}
 800d962:	bf00      	nop
 800d964:	080101f9 	.word	0x080101f9
 800d968:	08010284 	.word	0x08010284

0800d96c <__multiply>:
 800d96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d970:	4691      	mov	r9, r2
 800d972:	690a      	ldr	r2, [r1, #16]
 800d974:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d978:	429a      	cmp	r2, r3
 800d97a:	bfb8      	it	lt
 800d97c:	460b      	movlt	r3, r1
 800d97e:	460c      	mov	r4, r1
 800d980:	bfbc      	itt	lt
 800d982:	464c      	movlt	r4, r9
 800d984:	4699      	movlt	r9, r3
 800d986:	6927      	ldr	r7, [r4, #16]
 800d988:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d98c:	68a3      	ldr	r3, [r4, #8]
 800d98e:	6861      	ldr	r1, [r4, #4]
 800d990:	eb07 060a 	add.w	r6, r7, sl
 800d994:	42b3      	cmp	r3, r6
 800d996:	b085      	sub	sp, #20
 800d998:	bfb8      	it	lt
 800d99a:	3101      	addlt	r1, #1
 800d99c:	f7ff fe8e 	bl	800d6bc <_Balloc>
 800d9a0:	b930      	cbnz	r0, 800d9b0 <__multiply+0x44>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	4b44      	ldr	r3, [pc, #272]	; (800dab8 <__multiply+0x14c>)
 800d9a6:	4845      	ldr	r0, [pc, #276]	; (800dabc <__multiply+0x150>)
 800d9a8:	f240 115d 	movw	r1, #349	; 0x15d
 800d9ac:	f7fe fb16 	bl	800bfdc <__assert_func>
 800d9b0:	f100 0514 	add.w	r5, r0, #20
 800d9b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d9b8:	462b      	mov	r3, r5
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	4543      	cmp	r3, r8
 800d9be:	d321      	bcc.n	800da04 <__multiply+0x98>
 800d9c0:	f104 0314 	add.w	r3, r4, #20
 800d9c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d9c8:	f109 0314 	add.w	r3, r9, #20
 800d9cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d9d0:	9202      	str	r2, [sp, #8]
 800d9d2:	1b3a      	subs	r2, r7, r4
 800d9d4:	3a15      	subs	r2, #21
 800d9d6:	f022 0203 	bic.w	r2, r2, #3
 800d9da:	3204      	adds	r2, #4
 800d9dc:	f104 0115 	add.w	r1, r4, #21
 800d9e0:	428f      	cmp	r7, r1
 800d9e2:	bf38      	it	cc
 800d9e4:	2204      	movcc	r2, #4
 800d9e6:	9201      	str	r2, [sp, #4]
 800d9e8:	9a02      	ldr	r2, [sp, #8]
 800d9ea:	9303      	str	r3, [sp, #12]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d80c      	bhi.n	800da0a <__multiply+0x9e>
 800d9f0:	2e00      	cmp	r6, #0
 800d9f2:	dd03      	ble.n	800d9fc <__multiply+0x90>
 800d9f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d05a      	beq.n	800dab2 <__multiply+0x146>
 800d9fc:	6106      	str	r6, [r0, #16]
 800d9fe:	b005      	add	sp, #20
 800da00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da04:	f843 2b04 	str.w	r2, [r3], #4
 800da08:	e7d8      	b.n	800d9bc <__multiply+0x50>
 800da0a:	f8b3 a000 	ldrh.w	sl, [r3]
 800da0e:	f1ba 0f00 	cmp.w	sl, #0
 800da12:	d024      	beq.n	800da5e <__multiply+0xf2>
 800da14:	f104 0e14 	add.w	lr, r4, #20
 800da18:	46a9      	mov	r9, r5
 800da1a:	f04f 0c00 	mov.w	ip, #0
 800da1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800da22:	f8d9 1000 	ldr.w	r1, [r9]
 800da26:	fa1f fb82 	uxth.w	fp, r2
 800da2a:	b289      	uxth	r1, r1
 800da2c:	fb0a 110b 	mla	r1, sl, fp, r1
 800da30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800da34:	f8d9 2000 	ldr.w	r2, [r9]
 800da38:	4461      	add	r1, ip
 800da3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da3e:	fb0a c20b 	mla	r2, sl, fp, ip
 800da42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da46:	b289      	uxth	r1, r1
 800da48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800da4c:	4577      	cmp	r7, lr
 800da4e:	f849 1b04 	str.w	r1, [r9], #4
 800da52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da56:	d8e2      	bhi.n	800da1e <__multiply+0xb2>
 800da58:	9a01      	ldr	r2, [sp, #4]
 800da5a:	f845 c002 	str.w	ip, [r5, r2]
 800da5e:	9a03      	ldr	r2, [sp, #12]
 800da60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da64:	3304      	adds	r3, #4
 800da66:	f1b9 0f00 	cmp.w	r9, #0
 800da6a:	d020      	beq.n	800daae <__multiply+0x142>
 800da6c:	6829      	ldr	r1, [r5, #0]
 800da6e:	f104 0c14 	add.w	ip, r4, #20
 800da72:	46ae      	mov	lr, r5
 800da74:	f04f 0a00 	mov.w	sl, #0
 800da78:	f8bc b000 	ldrh.w	fp, [ip]
 800da7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800da80:	fb09 220b 	mla	r2, r9, fp, r2
 800da84:	4492      	add	sl, r2
 800da86:	b289      	uxth	r1, r1
 800da88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800da8c:	f84e 1b04 	str.w	r1, [lr], #4
 800da90:	f85c 2b04 	ldr.w	r2, [ip], #4
 800da94:	f8be 1000 	ldrh.w	r1, [lr]
 800da98:	0c12      	lsrs	r2, r2, #16
 800da9a:	fb09 1102 	mla	r1, r9, r2, r1
 800da9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800daa2:	4567      	cmp	r7, ip
 800daa4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800daa8:	d8e6      	bhi.n	800da78 <__multiply+0x10c>
 800daaa:	9a01      	ldr	r2, [sp, #4]
 800daac:	50a9      	str	r1, [r5, r2]
 800daae:	3504      	adds	r5, #4
 800dab0:	e79a      	b.n	800d9e8 <__multiply+0x7c>
 800dab2:	3e01      	subs	r6, #1
 800dab4:	e79c      	b.n	800d9f0 <__multiply+0x84>
 800dab6:	bf00      	nop
 800dab8:	080101f9 	.word	0x080101f9
 800dabc:	08010284 	.word	0x08010284

0800dac0 <__pow5mult>:
 800dac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dac4:	4615      	mov	r5, r2
 800dac6:	f012 0203 	ands.w	r2, r2, #3
 800daca:	4606      	mov	r6, r0
 800dacc:	460f      	mov	r7, r1
 800dace:	d007      	beq.n	800dae0 <__pow5mult+0x20>
 800dad0:	4c25      	ldr	r4, [pc, #148]	; (800db68 <__pow5mult+0xa8>)
 800dad2:	3a01      	subs	r2, #1
 800dad4:	2300      	movs	r3, #0
 800dad6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dada:	f7ff fe51 	bl	800d780 <__multadd>
 800dade:	4607      	mov	r7, r0
 800dae0:	10ad      	asrs	r5, r5, #2
 800dae2:	d03d      	beq.n	800db60 <__pow5mult+0xa0>
 800dae4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dae6:	b97c      	cbnz	r4, 800db08 <__pow5mult+0x48>
 800dae8:	2010      	movs	r0, #16
 800daea:	f7fb f893 	bl	8008c14 <malloc>
 800daee:	4602      	mov	r2, r0
 800daf0:	6270      	str	r0, [r6, #36]	; 0x24
 800daf2:	b928      	cbnz	r0, 800db00 <__pow5mult+0x40>
 800daf4:	4b1d      	ldr	r3, [pc, #116]	; (800db6c <__pow5mult+0xac>)
 800daf6:	481e      	ldr	r0, [pc, #120]	; (800db70 <__pow5mult+0xb0>)
 800daf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dafc:	f7fe fa6e 	bl	800bfdc <__assert_func>
 800db00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db04:	6004      	str	r4, [r0, #0]
 800db06:	60c4      	str	r4, [r0, #12]
 800db08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800db0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db10:	b94c      	cbnz	r4, 800db26 <__pow5mult+0x66>
 800db12:	f240 2171 	movw	r1, #625	; 0x271
 800db16:	4630      	mov	r0, r6
 800db18:	f7ff ff12 	bl	800d940 <__i2b>
 800db1c:	2300      	movs	r3, #0
 800db1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800db22:	4604      	mov	r4, r0
 800db24:	6003      	str	r3, [r0, #0]
 800db26:	f04f 0900 	mov.w	r9, #0
 800db2a:	07eb      	lsls	r3, r5, #31
 800db2c:	d50a      	bpl.n	800db44 <__pow5mult+0x84>
 800db2e:	4639      	mov	r1, r7
 800db30:	4622      	mov	r2, r4
 800db32:	4630      	mov	r0, r6
 800db34:	f7ff ff1a 	bl	800d96c <__multiply>
 800db38:	4639      	mov	r1, r7
 800db3a:	4680      	mov	r8, r0
 800db3c:	4630      	mov	r0, r6
 800db3e:	f7ff fdfd 	bl	800d73c <_Bfree>
 800db42:	4647      	mov	r7, r8
 800db44:	106d      	asrs	r5, r5, #1
 800db46:	d00b      	beq.n	800db60 <__pow5mult+0xa0>
 800db48:	6820      	ldr	r0, [r4, #0]
 800db4a:	b938      	cbnz	r0, 800db5c <__pow5mult+0x9c>
 800db4c:	4622      	mov	r2, r4
 800db4e:	4621      	mov	r1, r4
 800db50:	4630      	mov	r0, r6
 800db52:	f7ff ff0b 	bl	800d96c <__multiply>
 800db56:	6020      	str	r0, [r4, #0]
 800db58:	f8c0 9000 	str.w	r9, [r0]
 800db5c:	4604      	mov	r4, r0
 800db5e:	e7e4      	b.n	800db2a <__pow5mult+0x6a>
 800db60:	4638      	mov	r0, r7
 800db62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db66:	bf00      	nop
 800db68:	080103d0 	.word	0x080103d0
 800db6c:	0800fbdc 	.word	0x0800fbdc
 800db70:	08010284 	.word	0x08010284

0800db74 <__lshift>:
 800db74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db78:	460c      	mov	r4, r1
 800db7a:	6849      	ldr	r1, [r1, #4]
 800db7c:	6923      	ldr	r3, [r4, #16]
 800db7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db82:	68a3      	ldr	r3, [r4, #8]
 800db84:	4607      	mov	r7, r0
 800db86:	4691      	mov	r9, r2
 800db88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db8c:	f108 0601 	add.w	r6, r8, #1
 800db90:	42b3      	cmp	r3, r6
 800db92:	db0b      	blt.n	800dbac <__lshift+0x38>
 800db94:	4638      	mov	r0, r7
 800db96:	f7ff fd91 	bl	800d6bc <_Balloc>
 800db9a:	4605      	mov	r5, r0
 800db9c:	b948      	cbnz	r0, 800dbb2 <__lshift+0x3e>
 800db9e:	4602      	mov	r2, r0
 800dba0:	4b2a      	ldr	r3, [pc, #168]	; (800dc4c <__lshift+0xd8>)
 800dba2:	482b      	ldr	r0, [pc, #172]	; (800dc50 <__lshift+0xdc>)
 800dba4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dba8:	f7fe fa18 	bl	800bfdc <__assert_func>
 800dbac:	3101      	adds	r1, #1
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	e7ee      	b.n	800db90 <__lshift+0x1c>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f100 0114 	add.w	r1, r0, #20
 800dbb8:	f100 0210 	add.w	r2, r0, #16
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	4553      	cmp	r3, sl
 800dbc0:	db37      	blt.n	800dc32 <__lshift+0xbe>
 800dbc2:	6920      	ldr	r0, [r4, #16]
 800dbc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbc8:	f104 0314 	add.w	r3, r4, #20
 800dbcc:	f019 091f 	ands.w	r9, r9, #31
 800dbd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dbd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dbd8:	d02f      	beq.n	800dc3a <__lshift+0xc6>
 800dbda:	f1c9 0e20 	rsb	lr, r9, #32
 800dbde:	468a      	mov	sl, r1
 800dbe0:	f04f 0c00 	mov.w	ip, #0
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	fa02 f209 	lsl.w	r2, r2, r9
 800dbea:	ea42 020c 	orr.w	r2, r2, ip
 800dbee:	f84a 2b04 	str.w	r2, [sl], #4
 800dbf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbf6:	4298      	cmp	r0, r3
 800dbf8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dbfc:	d8f2      	bhi.n	800dbe4 <__lshift+0x70>
 800dbfe:	1b03      	subs	r3, r0, r4
 800dc00:	3b15      	subs	r3, #21
 800dc02:	f023 0303 	bic.w	r3, r3, #3
 800dc06:	3304      	adds	r3, #4
 800dc08:	f104 0215 	add.w	r2, r4, #21
 800dc0c:	4290      	cmp	r0, r2
 800dc0e:	bf38      	it	cc
 800dc10:	2304      	movcc	r3, #4
 800dc12:	f841 c003 	str.w	ip, [r1, r3]
 800dc16:	f1bc 0f00 	cmp.w	ip, #0
 800dc1a:	d001      	beq.n	800dc20 <__lshift+0xac>
 800dc1c:	f108 0602 	add.w	r6, r8, #2
 800dc20:	3e01      	subs	r6, #1
 800dc22:	4638      	mov	r0, r7
 800dc24:	612e      	str	r6, [r5, #16]
 800dc26:	4621      	mov	r1, r4
 800dc28:	f7ff fd88 	bl	800d73c <_Bfree>
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc32:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc36:	3301      	adds	r3, #1
 800dc38:	e7c1      	b.n	800dbbe <__lshift+0x4a>
 800dc3a:	3904      	subs	r1, #4
 800dc3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc40:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc44:	4298      	cmp	r0, r3
 800dc46:	d8f9      	bhi.n	800dc3c <__lshift+0xc8>
 800dc48:	e7ea      	b.n	800dc20 <__lshift+0xac>
 800dc4a:	bf00      	nop
 800dc4c:	080101f9 	.word	0x080101f9
 800dc50:	08010284 	.word	0x08010284

0800dc54 <__mcmp>:
 800dc54:	b530      	push	{r4, r5, lr}
 800dc56:	6902      	ldr	r2, [r0, #16]
 800dc58:	690c      	ldr	r4, [r1, #16]
 800dc5a:	1b12      	subs	r2, r2, r4
 800dc5c:	d10e      	bne.n	800dc7c <__mcmp+0x28>
 800dc5e:	f100 0314 	add.w	r3, r0, #20
 800dc62:	3114      	adds	r1, #20
 800dc64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc74:	42a5      	cmp	r5, r4
 800dc76:	d003      	beq.n	800dc80 <__mcmp+0x2c>
 800dc78:	d305      	bcc.n	800dc86 <__mcmp+0x32>
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	4610      	mov	r0, r2
 800dc7e:	bd30      	pop	{r4, r5, pc}
 800dc80:	4283      	cmp	r3, r0
 800dc82:	d3f3      	bcc.n	800dc6c <__mcmp+0x18>
 800dc84:	e7fa      	b.n	800dc7c <__mcmp+0x28>
 800dc86:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8a:	e7f7      	b.n	800dc7c <__mcmp+0x28>

0800dc8c <__mdiff>:
 800dc8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc90:	460c      	mov	r4, r1
 800dc92:	4606      	mov	r6, r0
 800dc94:	4611      	mov	r1, r2
 800dc96:	4620      	mov	r0, r4
 800dc98:	4690      	mov	r8, r2
 800dc9a:	f7ff ffdb 	bl	800dc54 <__mcmp>
 800dc9e:	1e05      	subs	r5, r0, #0
 800dca0:	d110      	bne.n	800dcc4 <__mdiff+0x38>
 800dca2:	4629      	mov	r1, r5
 800dca4:	4630      	mov	r0, r6
 800dca6:	f7ff fd09 	bl	800d6bc <_Balloc>
 800dcaa:	b930      	cbnz	r0, 800dcba <__mdiff+0x2e>
 800dcac:	4b3a      	ldr	r3, [pc, #232]	; (800dd98 <__mdiff+0x10c>)
 800dcae:	4602      	mov	r2, r0
 800dcb0:	f240 2132 	movw	r1, #562	; 0x232
 800dcb4:	4839      	ldr	r0, [pc, #228]	; (800dd9c <__mdiff+0x110>)
 800dcb6:	f7fe f991 	bl	800bfdc <__assert_func>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc4:	bfa4      	itt	ge
 800dcc6:	4643      	movge	r3, r8
 800dcc8:	46a0      	movge	r8, r4
 800dcca:	4630      	mov	r0, r6
 800dccc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dcd0:	bfa6      	itte	ge
 800dcd2:	461c      	movge	r4, r3
 800dcd4:	2500      	movge	r5, #0
 800dcd6:	2501      	movlt	r5, #1
 800dcd8:	f7ff fcf0 	bl	800d6bc <_Balloc>
 800dcdc:	b920      	cbnz	r0, 800dce8 <__mdiff+0x5c>
 800dcde:	4b2e      	ldr	r3, [pc, #184]	; (800dd98 <__mdiff+0x10c>)
 800dce0:	4602      	mov	r2, r0
 800dce2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dce6:	e7e5      	b.n	800dcb4 <__mdiff+0x28>
 800dce8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dcec:	6926      	ldr	r6, [r4, #16]
 800dcee:	60c5      	str	r5, [r0, #12]
 800dcf0:	f104 0914 	add.w	r9, r4, #20
 800dcf4:	f108 0514 	add.w	r5, r8, #20
 800dcf8:	f100 0e14 	add.w	lr, r0, #20
 800dcfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dd00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dd04:	f108 0210 	add.w	r2, r8, #16
 800dd08:	46f2      	mov	sl, lr
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd14:	fa1f f883 	uxth.w	r8, r3
 800dd18:	fa11 f18b 	uxtah	r1, r1, fp
 800dd1c:	0c1b      	lsrs	r3, r3, #16
 800dd1e:	eba1 0808 	sub.w	r8, r1, r8
 800dd22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd2a:	fa1f f888 	uxth.w	r8, r8
 800dd2e:	1419      	asrs	r1, r3, #16
 800dd30:	454e      	cmp	r6, r9
 800dd32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dd36:	f84a 3b04 	str.w	r3, [sl], #4
 800dd3a:	d8e7      	bhi.n	800dd0c <__mdiff+0x80>
 800dd3c:	1b33      	subs	r3, r6, r4
 800dd3e:	3b15      	subs	r3, #21
 800dd40:	f023 0303 	bic.w	r3, r3, #3
 800dd44:	3304      	adds	r3, #4
 800dd46:	3415      	adds	r4, #21
 800dd48:	42a6      	cmp	r6, r4
 800dd4a:	bf38      	it	cc
 800dd4c:	2304      	movcc	r3, #4
 800dd4e:	441d      	add	r5, r3
 800dd50:	4473      	add	r3, lr
 800dd52:	469e      	mov	lr, r3
 800dd54:	462e      	mov	r6, r5
 800dd56:	4566      	cmp	r6, ip
 800dd58:	d30e      	bcc.n	800dd78 <__mdiff+0xec>
 800dd5a:	f10c 0203 	add.w	r2, ip, #3
 800dd5e:	1b52      	subs	r2, r2, r5
 800dd60:	f022 0203 	bic.w	r2, r2, #3
 800dd64:	3d03      	subs	r5, #3
 800dd66:	45ac      	cmp	ip, r5
 800dd68:	bf38      	it	cc
 800dd6a:	2200      	movcc	r2, #0
 800dd6c:	441a      	add	r2, r3
 800dd6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dd72:	b17b      	cbz	r3, 800dd94 <__mdiff+0x108>
 800dd74:	6107      	str	r7, [r0, #16]
 800dd76:	e7a3      	b.n	800dcc0 <__mdiff+0x34>
 800dd78:	f856 8b04 	ldr.w	r8, [r6], #4
 800dd7c:	fa11 f288 	uxtah	r2, r1, r8
 800dd80:	1414      	asrs	r4, r2, #16
 800dd82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dd86:	b292      	uxth	r2, r2
 800dd88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dd8c:	f84e 2b04 	str.w	r2, [lr], #4
 800dd90:	1421      	asrs	r1, r4, #16
 800dd92:	e7e0      	b.n	800dd56 <__mdiff+0xca>
 800dd94:	3f01      	subs	r7, #1
 800dd96:	e7ea      	b.n	800dd6e <__mdiff+0xe2>
 800dd98:	080101f9 	.word	0x080101f9
 800dd9c:	08010284 	.word	0x08010284

0800dda0 <__ulp>:
 800dda0:	b082      	sub	sp, #8
 800dda2:	ed8d 0b00 	vstr	d0, [sp]
 800dda6:	9b01      	ldr	r3, [sp, #4]
 800dda8:	4912      	ldr	r1, [pc, #72]	; (800ddf4 <__ulp+0x54>)
 800ddaa:	4019      	ands	r1, r3
 800ddac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ddb0:	2900      	cmp	r1, #0
 800ddb2:	dd05      	ble.n	800ddc0 <__ulp+0x20>
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	ec43 2b10 	vmov	d0, r2, r3
 800ddbc:	b002      	add	sp, #8
 800ddbe:	4770      	bx	lr
 800ddc0:	4249      	negs	r1, r1
 800ddc2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ddc6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ddca:	f04f 0200 	mov.w	r2, #0
 800ddce:	f04f 0300 	mov.w	r3, #0
 800ddd2:	da04      	bge.n	800ddde <__ulp+0x3e>
 800ddd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ddd8:	fa41 f300 	asr.w	r3, r1, r0
 800dddc:	e7ec      	b.n	800ddb8 <__ulp+0x18>
 800ddde:	f1a0 0114 	sub.w	r1, r0, #20
 800dde2:	291e      	cmp	r1, #30
 800dde4:	bfda      	itte	le
 800dde6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ddea:	fa20 f101 	lsrle.w	r1, r0, r1
 800ddee:	2101      	movgt	r1, #1
 800ddf0:	460a      	mov	r2, r1
 800ddf2:	e7e1      	b.n	800ddb8 <__ulp+0x18>
 800ddf4:	7ff00000 	.word	0x7ff00000

0800ddf8 <__b2d>:
 800ddf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddfa:	6905      	ldr	r5, [r0, #16]
 800ddfc:	f100 0714 	add.w	r7, r0, #20
 800de00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800de04:	1f2e      	subs	r6, r5, #4
 800de06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800de0a:	4620      	mov	r0, r4
 800de0c:	f7ff fd48 	bl	800d8a0 <__hi0bits>
 800de10:	f1c0 0320 	rsb	r3, r0, #32
 800de14:	280a      	cmp	r0, #10
 800de16:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800de94 <__b2d+0x9c>
 800de1a:	600b      	str	r3, [r1, #0]
 800de1c:	dc14      	bgt.n	800de48 <__b2d+0x50>
 800de1e:	f1c0 0e0b 	rsb	lr, r0, #11
 800de22:	fa24 f10e 	lsr.w	r1, r4, lr
 800de26:	42b7      	cmp	r7, r6
 800de28:	ea41 030c 	orr.w	r3, r1, ip
 800de2c:	bf34      	ite	cc
 800de2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de32:	2100      	movcs	r1, #0
 800de34:	3015      	adds	r0, #21
 800de36:	fa04 f000 	lsl.w	r0, r4, r0
 800de3a:	fa21 f10e 	lsr.w	r1, r1, lr
 800de3e:	ea40 0201 	orr.w	r2, r0, r1
 800de42:	ec43 2b10 	vmov	d0, r2, r3
 800de46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de48:	42b7      	cmp	r7, r6
 800de4a:	bf3a      	itte	cc
 800de4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de50:	f1a5 0608 	subcc.w	r6, r5, #8
 800de54:	2100      	movcs	r1, #0
 800de56:	380b      	subs	r0, #11
 800de58:	d017      	beq.n	800de8a <__b2d+0x92>
 800de5a:	f1c0 0c20 	rsb	ip, r0, #32
 800de5e:	fa04 f500 	lsl.w	r5, r4, r0
 800de62:	42be      	cmp	r6, r7
 800de64:	fa21 f40c 	lsr.w	r4, r1, ip
 800de68:	ea45 0504 	orr.w	r5, r5, r4
 800de6c:	bf8c      	ite	hi
 800de6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800de72:	2400      	movls	r4, #0
 800de74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800de78:	fa01 f000 	lsl.w	r0, r1, r0
 800de7c:	fa24 f40c 	lsr.w	r4, r4, ip
 800de80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800de84:	ea40 0204 	orr.w	r2, r0, r4
 800de88:	e7db      	b.n	800de42 <__b2d+0x4a>
 800de8a:	ea44 030c 	orr.w	r3, r4, ip
 800de8e:	460a      	mov	r2, r1
 800de90:	e7d7      	b.n	800de42 <__b2d+0x4a>
 800de92:	bf00      	nop
 800de94:	3ff00000 	.word	0x3ff00000

0800de98 <__d2b>:
 800de98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de9c:	4689      	mov	r9, r1
 800de9e:	2101      	movs	r1, #1
 800dea0:	ec57 6b10 	vmov	r6, r7, d0
 800dea4:	4690      	mov	r8, r2
 800dea6:	f7ff fc09 	bl	800d6bc <_Balloc>
 800deaa:	4604      	mov	r4, r0
 800deac:	b930      	cbnz	r0, 800debc <__d2b+0x24>
 800deae:	4602      	mov	r2, r0
 800deb0:	4b25      	ldr	r3, [pc, #148]	; (800df48 <__d2b+0xb0>)
 800deb2:	4826      	ldr	r0, [pc, #152]	; (800df4c <__d2b+0xb4>)
 800deb4:	f240 310a 	movw	r1, #778	; 0x30a
 800deb8:	f7fe f890 	bl	800bfdc <__assert_func>
 800debc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dec4:	bb35      	cbnz	r5, 800df14 <__d2b+0x7c>
 800dec6:	2e00      	cmp	r6, #0
 800dec8:	9301      	str	r3, [sp, #4]
 800deca:	d028      	beq.n	800df1e <__d2b+0x86>
 800decc:	4668      	mov	r0, sp
 800dece:	9600      	str	r6, [sp, #0]
 800ded0:	f7ff fd06 	bl	800d8e0 <__lo0bits>
 800ded4:	9900      	ldr	r1, [sp, #0]
 800ded6:	b300      	cbz	r0, 800df1a <__d2b+0x82>
 800ded8:	9a01      	ldr	r2, [sp, #4]
 800deda:	f1c0 0320 	rsb	r3, r0, #32
 800dede:	fa02 f303 	lsl.w	r3, r2, r3
 800dee2:	430b      	orrs	r3, r1
 800dee4:	40c2      	lsrs	r2, r0
 800dee6:	6163      	str	r3, [r4, #20]
 800dee8:	9201      	str	r2, [sp, #4]
 800deea:	9b01      	ldr	r3, [sp, #4]
 800deec:	61a3      	str	r3, [r4, #24]
 800deee:	2b00      	cmp	r3, #0
 800def0:	bf14      	ite	ne
 800def2:	2202      	movne	r2, #2
 800def4:	2201      	moveq	r2, #1
 800def6:	6122      	str	r2, [r4, #16]
 800def8:	b1d5      	cbz	r5, 800df30 <__d2b+0x98>
 800defa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800defe:	4405      	add	r5, r0
 800df00:	f8c9 5000 	str.w	r5, [r9]
 800df04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df08:	f8c8 0000 	str.w	r0, [r8]
 800df0c:	4620      	mov	r0, r4
 800df0e:	b003      	add	sp, #12
 800df10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df18:	e7d5      	b.n	800dec6 <__d2b+0x2e>
 800df1a:	6161      	str	r1, [r4, #20]
 800df1c:	e7e5      	b.n	800deea <__d2b+0x52>
 800df1e:	a801      	add	r0, sp, #4
 800df20:	f7ff fcde 	bl	800d8e0 <__lo0bits>
 800df24:	9b01      	ldr	r3, [sp, #4]
 800df26:	6163      	str	r3, [r4, #20]
 800df28:	2201      	movs	r2, #1
 800df2a:	6122      	str	r2, [r4, #16]
 800df2c:	3020      	adds	r0, #32
 800df2e:	e7e3      	b.n	800def8 <__d2b+0x60>
 800df30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df38:	f8c9 0000 	str.w	r0, [r9]
 800df3c:	6918      	ldr	r0, [r3, #16]
 800df3e:	f7ff fcaf 	bl	800d8a0 <__hi0bits>
 800df42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df46:	e7df      	b.n	800df08 <__d2b+0x70>
 800df48:	080101f9 	.word	0x080101f9
 800df4c:	08010284 	.word	0x08010284

0800df50 <__ratio>:
 800df50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	4688      	mov	r8, r1
 800df56:	4669      	mov	r1, sp
 800df58:	4681      	mov	r9, r0
 800df5a:	f7ff ff4d 	bl	800ddf8 <__b2d>
 800df5e:	a901      	add	r1, sp, #4
 800df60:	4640      	mov	r0, r8
 800df62:	ec55 4b10 	vmov	r4, r5, d0
 800df66:	f7ff ff47 	bl	800ddf8 <__b2d>
 800df6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800df72:	eba3 0c02 	sub.w	ip, r3, r2
 800df76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800df7a:	1a9b      	subs	r3, r3, r2
 800df7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800df80:	ec51 0b10 	vmov	r0, r1, d0
 800df84:	2b00      	cmp	r3, #0
 800df86:	bfd6      	itet	le
 800df88:	460a      	movle	r2, r1
 800df8a:	462a      	movgt	r2, r5
 800df8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df90:	468b      	mov	fp, r1
 800df92:	462f      	mov	r7, r5
 800df94:	bfd4      	ite	le
 800df96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800df9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800df9e:	4620      	mov	r0, r4
 800dfa0:	ee10 2a10 	vmov	r2, s0
 800dfa4:	465b      	mov	r3, fp
 800dfa6:	4639      	mov	r1, r7
 800dfa8:	f7f2 fc68 	bl	800087c <__aeabi_ddiv>
 800dfac:	ec41 0b10 	vmov	d0, r0, r1
 800dfb0:	b003      	add	sp, #12
 800dfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfb6 <__copybits>:
 800dfb6:	3901      	subs	r1, #1
 800dfb8:	b570      	push	{r4, r5, r6, lr}
 800dfba:	1149      	asrs	r1, r1, #5
 800dfbc:	6914      	ldr	r4, [r2, #16]
 800dfbe:	3101      	adds	r1, #1
 800dfc0:	f102 0314 	add.w	r3, r2, #20
 800dfc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dfc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dfcc:	1f05      	subs	r5, r0, #4
 800dfce:	42a3      	cmp	r3, r4
 800dfd0:	d30c      	bcc.n	800dfec <__copybits+0x36>
 800dfd2:	1aa3      	subs	r3, r4, r2
 800dfd4:	3b11      	subs	r3, #17
 800dfd6:	f023 0303 	bic.w	r3, r3, #3
 800dfda:	3211      	adds	r2, #17
 800dfdc:	42a2      	cmp	r2, r4
 800dfde:	bf88      	it	hi
 800dfe0:	2300      	movhi	r3, #0
 800dfe2:	4418      	add	r0, r3
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	4288      	cmp	r0, r1
 800dfe8:	d305      	bcc.n	800dff6 <__copybits+0x40>
 800dfea:	bd70      	pop	{r4, r5, r6, pc}
 800dfec:	f853 6b04 	ldr.w	r6, [r3], #4
 800dff0:	f845 6f04 	str.w	r6, [r5, #4]!
 800dff4:	e7eb      	b.n	800dfce <__copybits+0x18>
 800dff6:	f840 3b04 	str.w	r3, [r0], #4
 800dffa:	e7f4      	b.n	800dfe6 <__copybits+0x30>

0800dffc <__any_on>:
 800dffc:	f100 0214 	add.w	r2, r0, #20
 800e000:	6900      	ldr	r0, [r0, #16]
 800e002:	114b      	asrs	r3, r1, #5
 800e004:	4298      	cmp	r0, r3
 800e006:	b510      	push	{r4, lr}
 800e008:	db11      	blt.n	800e02e <__any_on+0x32>
 800e00a:	dd0a      	ble.n	800e022 <__any_on+0x26>
 800e00c:	f011 011f 	ands.w	r1, r1, #31
 800e010:	d007      	beq.n	800e022 <__any_on+0x26>
 800e012:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e016:	fa24 f001 	lsr.w	r0, r4, r1
 800e01a:	fa00 f101 	lsl.w	r1, r0, r1
 800e01e:	428c      	cmp	r4, r1
 800e020:	d10b      	bne.n	800e03a <__any_on+0x3e>
 800e022:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e026:	4293      	cmp	r3, r2
 800e028:	d803      	bhi.n	800e032 <__any_on+0x36>
 800e02a:	2000      	movs	r0, #0
 800e02c:	bd10      	pop	{r4, pc}
 800e02e:	4603      	mov	r3, r0
 800e030:	e7f7      	b.n	800e022 <__any_on+0x26>
 800e032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e036:	2900      	cmp	r1, #0
 800e038:	d0f5      	beq.n	800e026 <__any_on+0x2a>
 800e03a:	2001      	movs	r0, #1
 800e03c:	e7f6      	b.n	800e02c <__any_on+0x30>

0800e03e <_calloc_r>:
 800e03e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e040:	fba1 2402 	umull	r2, r4, r1, r2
 800e044:	b94c      	cbnz	r4, 800e05a <_calloc_r+0x1c>
 800e046:	4611      	mov	r1, r2
 800e048:	9201      	str	r2, [sp, #4]
 800e04a:	f7fb f8e7 	bl	800921c <_malloc_r>
 800e04e:	9a01      	ldr	r2, [sp, #4]
 800e050:	4605      	mov	r5, r0
 800e052:	b930      	cbnz	r0, 800e062 <_calloc_r+0x24>
 800e054:	4628      	mov	r0, r5
 800e056:	b003      	add	sp, #12
 800e058:	bd30      	pop	{r4, r5, pc}
 800e05a:	220c      	movs	r2, #12
 800e05c:	6002      	str	r2, [r0, #0]
 800e05e:	2500      	movs	r5, #0
 800e060:	e7f8      	b.n	800e054 <_calloc_r+0x16>
 800e062:	4621      	mov	r1, r4
 800e064:	f7fa fdf4 	bl	8008c50 <memset>
 800e068:	e7f4      	b.n	800e054 <_calloc_r+0x16>

0800e06a <__ssputs_r>:
 800e06a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e06e:	688e      	ldr	r6, [r1, #8]
 800e070:	429e      	cmp	r6, r3
 800e072:	4682      	mov	sl, r0
 800e074:	460c      	mov	r4, r1
 800e076:	4690      	mov	r8, r2
 800e078:	461f      	mov	r7, r3
 800e07a:	d838      	bhi.n	800e0ee <__ssputs_r+0x84>
 800e07c:	898a      	ldrh	r2, [r1, #12]
 800e07e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e082:	d032      	beq.n	800e0ea <__ssputs_r+0x80>
 800e084:	6825      	ldr	r5, [r4, #0]
 800e086:	6909      	ldr	r1, [r1, #16]
 800e088:	eba5 0901 	sub.w	r9, r5, r1
 800e08c:	6965      	ldr	r5, [r4, #20]
 800e08e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e092:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e096:	3301      	adds	r3, #1
 800e098:	444b      	add	r3, r9
 800e09a:	106d      	asrs	r5, r5, #1
 800e09c:	429d      	cmp	r5, r3
 800e09e:	bf38      	it	cc
 800e0a0:	461d      	movcc	r5, r3
 800e0a2:	0553      	lsls	r3, r2, #21
 800e0a4:	d531      	bpl.n	800e10a <__ssputs_r+0xa0>
 800e0a6:	4629      	mov	r1, r5
 800e0a8:	f7fb f8b8 	bl	800921c <_malloc_r>
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	b950      	cbnz	r0, 800e0c6 <__ssputs_r+0x5c>
 800e0b0:	230c      	movs	r3, #12
 800e0b2:	f8ca 3000 	str.w	r3, [sl]
 800e0b6:	89a3      	ldrh	r3, [r4, #12]
 800e0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0bc:	81a3      	strh	r3, [r4, #12]
 800e0be:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0c6:	6921      	ldr	r1, [r4, #16]
 800e0c8:	464a      	mov	r2, r9
 800e0ca:	f7fa fdb3 	bl	8008c34 <memcpy>
 800e0ce:	89a3      	ldrh	r3, [r4, #12]
 800e0d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0d8:	81a3      	strh	r3, [r4, #12]
 800e0da:	6126      	str	r6, [r4, #16]
 800e0dc:	6165      	str	r5, [r4, #20]
 800e0de:	444e      	add	r6, r9
 800e0e0:	eba5 0509 	sub.w	r5, r5, r9
 800e0e4:	6026      	str	r6, [r4, #0]
 800e0e6:	60a5      	str	r5, [r4, #8]
 800e0e8:	463e      	mov	r6, r7
 800e0ea:	42be      	cmp	r6, r7
 800e0ec:	d900      	bls.n	800e0f0 <__ssputs_r+0x86>
 800e0ee:	463e      	mov	r6, r7
 800e0f0:	6820      	ldr	r0, [r4, #0]
 800e0f2:	4632      	mov	r2, r6
 800e0f4:	4641      	mov	r1, r8
 800e0f6:	f001 f913 	bl	800f320 <memmove>
 800e0fa:	68a3      	ldr	r3, [r4, #8]
 800e0fc:	1b9b      	subs	r3, r3, r6
 800e0fe:	60a3      	str	r3, [r4, #8]
 800e100:	6823      	ldr	r3, [r4, #0]
 800e102:	4433      	add	r3, r6
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	2000      	movs	r0, #0
 800e108:	e7db      	b.n	800e0c2 <__ssputs_r+0x58>
 800e10a:	462a      	mov	r2, r5
 800e10c:	f001 f922 	bl	800f354 <_realloc_r>
 800e110:	4606      	mov	r6, r0
 800e112:	2800      	cmp	r0, #0
 800e114:	d1e1      	bne.n	800e0da <__ssputs_r+0x70>
 800e116:	6921      	ldr	r1, [r4, #16]
 800e118:	4650      	mov	r0, sl
 800e11a:	f7fb f813 	bl	8009144 <_free_r>
 800e11e:	e7c7      	b.n	800e0b0 <__ssputs_r+0x46>

0800e120 <_svfiprintf_r>:
 800e120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e124:	4698      	mov	r8, r3
 800e126:	898b      	ldrh	r3, [r1, #12]
 800e128:	061b      	lsls	r3, r3, #24
 800e12a:	b09d      	sub	sp, #116	; 0x74
 800e12c:	4607      	mov	r7, r0
 800e12e:	460d      	mov	r5, r1
 800e130:	4614      	mov	r4, r2
 800e132:	d50e      	bpl.n	800e152 <_svfiprintf_r+0x32>
 800e134:	690b      	ldr	r3, [r1, #16]
 800e136:	b963      	cbnz	r3, 800e152 <_svfiprintf_r+0x32>
 800e138:	2140      	movs	r1, #64	; 0x40
 800e13a:	f7fb f86f 	bl	800921c <_malloc_r>
 800e13e:	6028      	str	r0, [r5, #0]
 800e140:	6128      	str	r0, [r5, #16]
 800e142:	b920      	cbnz	r0, 800e14e <_svfiprintf_r+0x2e>
 800e144:	230c      	movs	r3, #12
 800e146:	603b      	str	r3, [r7, #0]
 800e148:	f04f 30ff 	mov.w	r0, #4294967295
 800e14c:	e0d1      	b.n	800e2f2 <_svfiprintf_r+0x1d2>
 800e14e:	2340      	movs	r3, #64	; 0x40
 800e150:	616b      	str	r3, [r5, #20]
 800e152:	2300      	movs	r3, #0
 800e154:	9309      	str	r3, [sp, #36]	; 0x24
 800e156:	2320      	movs	r3, #32
 800e158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e15c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e160:	2330      	movs	r3, #48	; 0x30
 800e162:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e30c <_svfiprintf_r+0x1ec>
 800e166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e16a:	f04f 0901 	mov.w	r9, #1
 800e16e:	4623      	mov	r3, r4
 800e170:	469a      	mov	sl, r3
 800e172:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e176:	b10a      	cbz	r2, 800e17c <_svfiprintf_r+0x5c>
 800e178:	2a25      	cmp	r2, #37	; 0x25
 800e17a:	d1f9      	bne.n	800e170 <_svfiprintf_r+0x50>
 800e17c:	ebba 0b04 	subs.w	fp, sl, r4
 800e180:	d00b      	beq.n	800e19a <_svfiprintf_r+0x7a>
 800e182:	465b      	mov	r3, fp
 800e184:	4622      	mov	r2, r4
 800e186:	4629      	mov	r1, r5
 800e188:	4638      	mov	r0, r7
 800e18a:	f7ff ff6e 	bl	800e06a <__ssputs_r>
 800e18e:	3001      	adds	r0, #1
 800e190:	f000 80aa 	beq.w	800e2e8 <_svfiprintf_r+0x1c8>
 800e194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e196:	445a      	add	r2, fp
 800e198:	9209      	str	r2, [sp, #36]	; 0x24
 800e19a:	f89a 3000 	ldrb.w	r3, [sl]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f000 80a2 	beq.w	800e2e8 <_svfiprintf_r+0x1c8>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1ae:	f10a 0a01 	add.w	sl, sl, #1
 800e1b2:	9304      	str	r3, [sp, #16]
 800e1b4:	9307      	str	r3, [sp, #28]
 800e1b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1ba:	931a      	str	r3, [sp, #104]	; 0x68
 800e1bc:	4654      	mov	r4, sl
 800e1be:	2205      	movs	r2, #5
 800e1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1c4:	4851      	ldr	r0, [pc, #324]	; (800e30c <_svfiprintf_r+0x1ec>)
 800e1c6:	f7f2 f823 	bl	8000210 <memchr>
 800e1ca:	9a04      	ldr	r2, [sp, #16]
 800e1cc:	b9d8      	cbnz	r0, 800e206 <_svfiprintf_r+0xe6>
 800e1ce:	06d0      	lsls	r0, r2, #27
 800e1d0:	bf44      	itt	mi
 800e1d2:	2320      	movmi	r3, #32
 800e1d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1d8:	0711      	lsls	r1, r2, #28
 800e1da:	bf44      	itt	mi
 800e1dc:	232b      	movmi	r3, #43	; 0x2b
 800e1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1e6:	2b2a      	cmp	r3, #42	; 0x2a
 800e1e8:	d015      	beq.n	800e216 <_svfiprintf_r+0xf6>
 800e1ea:	9a07      	ldr	r2, [sp, #28]
 800e1ec:	4654      	mov	r4, sl
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	f04f 0c0a 	mov.w	ip, #10
 800e1f4:	4621      	mov	r1, r4
 800e1f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1fa:	3b30      	subs	r3, #48	; 0x30
 800e1fc:	2b09      	cmp	r3, #9
 800e1fe:	d94e      	bls.n	800e29e <_svfiprintf_r+0x17e>
 800e200:	b1b0      	cbz	r0, 800e230 <_svfiprintf_r+0x110>
 800e202:	9207      	str	r2, [sp, #28]
 800e204:	e014      	b.n	800e230 <_svfiprintf_r+0x110>
 800e206:	eba0 0308 	sub.w	r3, r0, r8
 800e20a:	fa09 f303 	lsl.w	r3, r9, r3
 800e20e:	4313      	orrs	r3, r2
 800e210:	9304      	str	r3, [sp, #16]
 800e212:	46a2      	mov	sl, r4
 800e214:	e7d2      	b.n	800e1bc <_svfiprintf_r+0x9c>
 800e216:	9b03      	ldr	r3, [sp, #12]
 800e218:	1d19      	adds	r1, r3, #4
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	9103      	str	r1, [sp, #12]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	bfbb      	ittet	lt
 800e222:	425b      	neglt	r3, r3
 800e224:	f042 0202 	orrlt.w	r2, r2, #2
 800e228:	9307      	strge	r3, [sp, #28]
 800e22a:	9307      	strlt	r3, [sp, #28]
 800e22c:	bfb8      	it	lt
 800e22e:	9204      	strlt	r2, [sp, #16]
 800e230:	7823      	ldrb	r3, [r4, #0]
 800e232:	2b2e      	cmp	r3, #46	; 0x2e
 800e234:	d10c      	bne.n	800e250 <_svfiprintf_r+0x130>
 800e236:	7863      	ldrb	r3, [r4, #1]
 800e238:	2b2a      	cmp	r3, #42	; 0x2a
 800e23a:	d135      	bne.n	800e2a8 <_svfiprintf_r+0x188>
 800e23c:	9b03      	ldr	r3, [sp, #12]
 800e23e:	1d1a      	adds	r2, r3, #4
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	9203      	str	r2, [sp, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	bfb8      	it	lt
 800e248:	f04f 33ff 	movlt.w	r3, #4294967295
 800e24c:	3402      	adds	r4, #2
 800e24e:	9305      	str	r3, [sp, #20]
 800e250:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e31c <_svfiprintf_r+0x1fc>
 800e254:	7821      	ldrb	r1, [r4, #0]
 800e256:	2203      	movs	r2, #3
 800e258:	4650      	mov	r0, sl
 800e25a:	f7f1 ffd9 	bl	8000210 <memchr>
 800e25e:	b140      	cbz	r0, 800e272 <_svfiprintf_r+0x152>
 800e260:	2340      	movs	r3, #64	; 0x40
 800e262:	eba0 000a 	sub.w	r0, r0, sl
 800e266:	fa03 f000 	lsl.w	r0, r3, r0
 800e26a:	9b04      	ldr	r3, [sp, #16]
 800e26c:	4303      	orrs	r3, r0
 800e26e:	3401      	adds	r4, #1
 800e270:	9304      	str	r3, [sp, #16]
 800e272:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e276:	4826      	ldr	r0, [pc, #152]	; (800e310 <_svfiprintf_r+0x1f0>)
 800e278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e27c:	2206      	movs	r2, #6
 800e27e:	f7f1 ffc7 	bl	8000210 <memchr>
 800e282:	2800      	cmp	r0, #0
 800e284:	d038      	beq.n	800e2f8 <_svfiprintf_r+0x1d8>
 800e286:	4b23      	ldr	r3, [pc, #140]	; (800e314 <_svfiprintf_r+0x1f4>)
 800e288:	bb1b      	cbnz	r3, 800e2d2 <_svfiprintf_r+0x1b2>
 800e28a:	9b03      	ldr	r3, [sp, #12]
 800e28c:	3307      	adds	r3, #7
 800e28e:	f023 0307 	bic.w	r3, r3, #7
 800e292:	3308      	adds	r3, #8
 800e294:	9303      	str	r3, [sp, #12]
 800e296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e298:	4433      	add	r3, r6
 800e29a:	9309      	str	r3, [sp, #36]	; 0x24
 800e29c:	e767      	b.n	800e16e <_svfiprintf_r+0x4e>
 800e29e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	2001      	movs	r0, #1
 800e2a6:	e7a5      	b.n	800e1f4 <_svfiprintf_r+0xd4>
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	3401      	adds	r4, #1
 800e2ac:	9305      	str	r3, [sp, #20]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	f04f 0c0a 	mov.w	ip, #10
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2ba:	3a30      	subs	r2, #48	; 0x30
 800e2bc:	2a09      	cmp	r2, #9
 800e2be:	d903      	bls.n	800e2c8 <_svfiprintf_r+0x1a8>
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d0c5      	beq.n	800e250 <_svfiprintf_r+0x130>
 800e2c4:	9105      	str	r1, [sp, #20]
 800e2c6:	e7c3      	b.n	800e250 <_svfiprintf_r+0x130>
 800e2c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e7f0      	b.n	800e2b4 <_svfiprintf_r+0x194>
 800e2d2:	ab03      	add	r3, sp, #12
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	462a      	mov	r2, r5
 800e2d8:	4b0f      	ldr	r3, [pc, #60]	; (800e318 <_svfiprintf_r+0x1f8>)
 800e2da:	a904      	add	r1, sp, #16
 800e2dc:	4638      	mov	r0, r7
 800e2de:	f7fb f8b1 	bl	8009444 <_printf_float>
 800e2e2:	1c42      	adds	r2, r0, #1
 800e2e4:	4606      	mov	r6, r0
 800e2e6:	d1d6      	bne.n	800e296 <_svfiprintf_r+0x176>
 800e2e8:	89ab      	ldrh	r3, [r5, #12]
 800e2ea:	065b      	lsls	r3, r3, #25
 800e2ec:	f53f af2c 	bmi.w	800e148 <_svfiprintf_r+0x28>
 800e2f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2f2:	b01d      	add	sp, #116	; 0x74
 800e2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f8:	ab03      	add	r3, sp, #12
 800e2fa:	9300      	str	r3, [sp, #0]
 800e2fc:	462a      	mov	r2, r5
 800e2fe:	4b06      	ldr	r3, [pc, #24]	; (800e318 <_svfiprintf_r+0x1f8>)
 800e300:	a904      	add	r1, sp, #16
 800e302:	4638      	mov	r0, r7
 800e304:	f7fb fb42 	bl	800998c <_printf_i>
 800e308:	e7eb      	b.n	800e2e2 <_svfiprintf_r+0x1c2>
 800e30a:	bf00      	nop
 800e30c:	080103dc 	.word	0x080103dc
 800e310:	080103e6 	.word	0x080103e6
 800e314:	08009445 	.word	0x08009445
 800e318:	0800e06b 	.word	0x0800e06b
 800e31c:	080103e2 	.word	0x080103e2

0800e320 <_sungetc_r>:
 800e320:	b538      	push	{r3, r4, r5, lr}
 800e322:	1c4b      	adds	r3, r1, #1
 800e324:	4614      	mov	r4, r2
 800e326:	d103      	bne.n	800e330 <_sungetc_r+0x10>
 800e328:	f04f 35ff 	mov.w	r5, #4294967295
 800e32c:	4628      	mov	r0, r5
 800e32e:	bd38      	pop	{r3, r4, r5, pc}
 800e330:	8993      	ldrh	r3, [r2, #12]
 800e332:	f023 0320 	bic.w	r3, r3, #32
 800e336:	8193      	strh	r3, [r2, #12]
 800e338:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e33a:	6852      	ldr	r2, [r2, #4]
 800e33c:	b2cd      	uxtb	r5, r1
 800e33e:	b18b      	cbz	r3, 800e364 <_sungetc_r+0x44>
 800e340:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e342:	4293      	cmp	r3, r2
 800e344:	dd08      	ble.n	800e358 <_sungetc_r+0x38>
 800e346:	6823      	ldr	r3, [r4, #0]
 800e348:	1e5a      	subs	r2, r3, #1
 800e34a:	6022      	str	r2, [r4, #0]
 800e34c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e350:	6863      	ldr	r3, [r4, #4]
 800e352:	3301      	adds	r3, #1
 800e354:	6063      	str	r3, [r4, #4]
 800e356:	e7e9      	b.n	800e32c <_sungetc_r+0xc>
 800e358:	4621      	mov	r1, r4
 800e35a:	f000 fca9 	bl	800ecb0 <__submore>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d0f1      	beq.n	800e346 <_sungetc_r+0x26>
 800e362:	e7e1      	b.n	800e328 <_sungetc_r+0x8>
 800e364:	6921      	ldr	r1, [r4, #16]
 800e366:	6823      	ldr	r3, [r4, #0]
 800e368:	b151      	cbz	r1, 800e380 <_sungetc_r+0x60>
 800e36a:	4299      	cmp	r1, r3
 800e36c:	d208      	bcs.n	800e380 <_sungetc_r+0x60>
 800e36e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e372:	42a9      	cmp	r1, r5
 800e374:	d104      	bne.n	800e380 <_sungetc_r+0x60>
 800e376:	3b01      	subs	r3, #1
 800e378:	3201      	adds	r2, #1
 800e37a:	6023      	str	r3, [r4, #0]
 800e37c:	6062      	str	r2, [r4, #4]
 800e37e:	e7d5      	b.n	800e32c <_sungetc_r+0xc>
 800e380:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e388:	6363      	str	r3, [r4, #52]	; 0x34
 800e38a:	2303      	movs	r3, #3
 800e38c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e38e:	4623      	mov	r3, r4
 800e390:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e394:	6023      	str	r3, [r4, #0]
 800e396:	2301      	movs	r3, #1
 800e398:	e7dc      	b.n	800e354 <_sungetc_r+0x34>

0800e39a <__ssrefill_r>:
 800e39a:	b510      	push	{r4, lr}
 800e39c:	460c      	mov	r4, r1
 800e39e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e3a0:	b169      	cbz	r1, 800e3be <__ssrefill_r+0x24>
 800e3a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3a6:	4299      	cmp	r1, r3
 800e3a8:	d001      	beq.n	800e3ae <__ssrefill_r+0x14>
 800e3aa:	f7fa fecb 	bl	8009144 <_free_r>
 800e3ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3b0:	6063      	str	r3, [r4, #4]
 800e3b2:	2000      	movs	r0, #0
 800e3b4:	6360      	str	r0, [r4, #52]	; 0x34
 800e3b6:	b113      	cbz	r3, 800e3be <__ssrefill_r+0x24>
 800e3b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3ba:	6023      	str	r3, [r4, #0]
 800e3bc:	bd10      	pop	{r4, pc}
 800e3be:	6923      	ldr	r3, [r4, #16]
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	6063      	str	r3, [r4, #4]
 800e3c6:	89a3      	ldrh	r3, [r4, #12]
 800e3c8:	f043 0320 	orr.w	r3, r3, #32
 800e3cc:	81a3      	strh	r3, [r4, #12]
 800e3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d2:	e7f3      	b.n	800e3bc <__ssrefill_r+0x22>

0800e3d4 <__ssvfiscanf_r>:
 800e3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d8:	460c      	mov	r4, r1
 800e3da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e3de:	2100      	movs	r1, #0
 800e3e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e3e4:	49a6      	ldr	r1, [pc, #664]	; (800e680 <__ssvfiscanf_r+0x2ac>)
 800e3e6:	91a0      	str	r1, [sp, #640]	; 0x280
 800e3e8:	f10d 0804 	add.w	r8, sp, #4
 800e3ec:	49a5      	ldr	r1, [pc, #660]	; (800e684 <__ssvfiscanf_r+0x2b0>)
 800e3ee:	4fa6      	ldr	r7, [pc, #664]	; (800e688 <__ssvfiscanf_r+0x2b4>)
 800e3f0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e68c <__ssvfiscanf_r+0x2b8>
 800e3f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e3f8:	4606      	mov	r6, r0
 800e3fa:	91a1      	str	r1, [sp, #644]	; 0x284
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	7813      	ldrb	r3, [r2, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	f000 815a 	beq.w	800e6ba <__ssvfiscanf_r+0x2e6>
 800e406:	5dd9      	ldrb	r1, [r3, r7]
 800e408:	f011 0108 	ands.w	r1, r1, #8
 800e40c:	f102 0501 	add.w	r5, r2, #1
 800e410:	d019      	beq.n	800e446 <__ssvfiscanf_r+0x72>
 800e412:	6863      	ldr	r3, [r4, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	dd0f      	ble.n	800e438 <__ssvfiscanf_r+0x64>
 800e418:	6823      	ldr	r3, [r4, #0]
 800e41a:	781a      	ldrb	r2, [r3, #0]
 800e41c:	5cba      	ldrb	r2, [r7, r2]
 800e41e:	0712      	lsls	r2, r2, #28
 800e420:	d401      	bmi.n	800e426 <__ssvfiscanf_r+0x52>
 800e422:	462a      	mov	r2, r5
 800e424:	e7eb      	b.n	800e3fe <__ssvfiscanf_r+0x2a>
 800e426:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e428:	3201      	adds	r2, #1
 800e42a:	9245      	str	r2, [sp, #276]	; 0x114
 800e42c:	6862      	ldr	r2, [r4, #4]
 800e42e:	3301      	adds	r3, #1
 800e430:	3a01      	subs	r2, #1
 800e432:	6062      	str	r2, [r4, #4]
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	e7ec      	b.n	800e412 <__ssvfiscanf_r+0x3e>
 800e438:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e43a:	4621      	mov	r1, r4
 800e43c:	4630      	mov	r0, r6
 800e43e:	4798      	blx	r3
 800e440:	2800      	cmp	r0, #0
 800e442:	d0e9      	beq.n	800e418 <__ssvfiscanf_r+0x44>
 800e444:	e7ed      	b.n	800e422 <__ssvfiscanf_r+0x4e>
 800e446:	2b25      	cmp	r3, #37	; 0x25
 800e448:	d012      	beq.n	800e470 <__ssvfiscanf_r+0x9c>
 800e44a:	469a      	mov	sl, r3
 800e44c:	6863      	ldr	r3, [r4, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f340 8091 	ble.w	800e576 <__ssvfiscanf_r+0x1a2>
 800e454:	6822      	ldr	r2, [r4, #0]
 800e456:	7813      	ldrb	r3, [r2, #0]
 800e458:	4553      	cmp	r3, sl
 800e45a:	f040 812e 	bne.w	800e6ba <__ssvfiscanf_r+0x2e6>
 800e45e:	6863      	ldr	r3, [r4, #4]
 800e460:	3b01      	subs	r3, #1
 800e462:	6063      	str	r3, [r4, #4]
 800e464:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e466:	3201      	adds	r2, #1
 800e468:	3301      	adds	r3, #1
 800e46a:	6022      	str	r2, [r4, #0]
 800e46c:	9345      	str	r3, [sp, #276]	; 0x114
 800e46e:	e7d8      	b.n	800e422 <__ssvfiscanf_r+0x4e>
 800e470:	9141      	str	r1, [sp, #260]	; 0x104
 800e472:	9143      	str	r1, [sp, #268]	; 0x10c
 800e474:	7853      	ldrb	r3, [r2, #1]
 800e476:	2b2a      	cmp	r3, #42	; 0x2a
 800e478:	bf02      	ittt	eq
 800e47a:	2310      	moveq	r3, #16
 800e47c:	1c95      	addeq	r5, r2, #2
 800e47e:	9341      	streq	r3, [sp, #260]	; 0x104
 800e480:	220a      	movs	r2, #10
 800e482:	46aa      	mov	sl, r5
 800e484:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e488:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e48c:	2b09      	cmp	r3, #9
 800e48e:	d91d      	bls.n	800e4cc <__ssvfiscanf_r+0xf8>
 800e490:	487e      	ldr	r0, [pc, #504]	; (800e68c <__ssvfiscanf_r+0x2b8>)
 800e492:	2203      	movs	r2, #3
 800e494:	f7f1 febc 	bl	8000210 <memchr>
 800e498:	b140      	cbz	r0, 800e4ac <__ssvfiscanf_r+0xd8>
 800e49a:	2301      	movs	r3, #1
 800e49c:	eba0 0009 	sub.w	r0, r0, r9
 800e4a0:	fa03 f000 	lsl.w	r0, r3, r0
 800e4a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e4a6:	4318      	orrs	r0, r3
 800e4a8:	9041      	str	r0, [sp, #260]	; 0x104
 800e4aa:	4655      	mov	r5, sl
 800e4ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e4b0:	2b78      	cmp	r3, #120	; 0x78
 800e4b2:	d806      	bhi.n	800e4c2 <__ssvfiscanf_r+0xee>
 800e4b4:	2b57      	cmp	r3, #87	; 0x57
 800e4b6:	d810      	bhi.n	800e4da <__ssvfiscanf_r+0x106>
 800e4b8:	2b25      	cmp	r3, #37	; 0x25
 800e4ba:	d0c6      	beq.n	800e44a <__ssvfiscanf_r+0x76>
 800e4bc:	d856      	bhi.n	800e56c <__ssvfiscanf_r+0x198>
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d064      	beq.n	800e58c <__ssvfiscanf_r+0x1b8>
 800e4c2:	2303      	movs	r3, #3
 800e4c4:	9347      	str	r3, [sp, #284]	; 0x11c
 800e4c6:	230a      	movs	r3, #10
 800e4c8:	9342      	str	r3, [sp, #264]	; 0x108
 800e4ca:	e071      	b.n	800e5b0 <__ssvfiscanf_r+0x1dc>
 800e4cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e4ce:	fb02 1103 	mla	r1, r2, r3, r1
 800e4d2:	3930      	subs	r1, #48	; 0x30
 800e4d4:	9143      	str	r1, [sp, #268]	; 0x10c
 800e4d6:	4655      	mov	r5, sl
 800e4d8:	e7d3      	b.n	800e482 <__ssvfiscanf_r+0xae>
 800e4da:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e4de:	2a20      	cmp	r2, #32
 800e4e0:	d8ef      	bhi.n	800e4c2 <__ssvfiscanf_r+0xee>
 800e4e2:	a101      	add	r1, pc, #4	; (adr r1, 800e4e8 <__ssvfiscanf_r+0x114>)
 800e4e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e4e8:	0800e59b 	.word	0x0800e59b
 800e4ec:	0800e4c3 	.word	0x0800e4c3
 800e4f0:	0800e4c3 	.word	0x0800e4c3
 800e4f4:	0800e5f9 	.word	0x0800e5f9
 800e4f8:	0800e4c3 	.word	0x0800e4c3
 800e4fc:	0800e4c3 	.word	0x0800e4c3
 800e500:	0800e4c3 	.word	0x0800e4c3
 800e504:	0800e4c3 	.word	0x0800e4c3
 800e508:	0800e4c3 	.word	0x0800e4c3
 800e50c:	0800e4c3 	.word	0x0800e4c3
 800e510:	0800e4c3 	.word	0x0800e4c3
 800e514:	0800e60f 	.word	0x0800e60f
 800e518:	0800e5e5 	.word	0x0800e5e5
 800e51c:	0800e573 	.word	0x0800e573
 800e520:	0800e573 	.word	0x0800e573
 800e524:	0800e573 	.word	0x0800e573
 800e528:	0800e4c3 	.word	0x0800e4c3
 800e52c:	0800e5e9 	.word	0x0800e5e9
 800e530:	0800e4c3 	.word	0x0800e4c3
 800e534:	0800e4c3 	.word	0x0800e4c3
 800e538:	0800e4c3 	.word	0x0800e4c3
 800e53c:	0800e4c3 	.word	0x0800e4c3
 800e540:	0800e61f 	.word	0x0800e61f
 800e544:	0800e5f1 	.word	0x0800e5f1
 800e548:	0800e593 	.word	0x0800e593
 800e54c:	0800e4c3 	.word	0x0800e4c3
 800e550:	0800e4c3 	.word	0x0800e4c3
 800e554:	0800e61b 	.word	0x0800e61b
 800e558:	0800e4c3 	.word	0x0800e4c3
 800e55c:	0800e5e5 	.word	0x0800e5e5
 800e560:	0800e4c3 	.word	0x0800e4c3
 800e564:	0800e4c3 	.word	0x0800e4c3
 800e568:	0800e59b 	.word	0x0800e59b
 800e56c:	3b45      	subs	r3, #69	; 0x45
 800e56e:	2b02      	cmp	r3, #2
 800e570:	d8a7      	bhi.n	800e4c2 <__ssvfiscanf_r+0xee>
 800e572:	2305      	movs	r3, #5
 800e574:	e01b      	b.n	800e5ae <__ssvfiscanf_r+0x1da>
 800e576:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e578:	4621      	mov	r1, r4
 800e57a:	4630      	mov	r0, r6
 800e57c:	4798      	blx	r3
 800e57e:	2800      	cmp	r0, #0
 800e580:	f43f af68 	beq.w	800e454 <__ssvfiscanf_r+0x80>
 800e584:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e586:	2800      	cmp	r0, #0
 800e588:	f040 808d 	bne.w	800e6a6 <__ssvfiscanf_r+0x2d2>
 800e58c:	f04f 30ff 	mov.w	r0, #4294967295
 800e590:	e08f      	b.n	800e6b2 <__ssvfiscanf_r+0x2de>
 800e592:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e594:	f042 0220 	orr.w	r2, r2, #32
 800e598:	9241      	str	r2, [sp, #260]	; 0x104
 800e59a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e59c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5a0:	9241      	str	r2, [sp, #260]	; 0x104
 800e5a2:	2210      	movs	r2, #16
 800e5a4:	2b6f      	cmp	r3, #111	; 0x6f
 800e5a6:	9242      	str	r2, [sp, #264]	; 0x108
 800e5a8:	bf34      	ite	cc
 800e5aa:	2303      	movcc	r3, #3
 800e5ac:	2304      	movcs	r3, #4
 800e5ae:	9347      	str	r3, [sp, #284]	; 0x11c
 800e5b0:	6863      	ldr	r3, [r4, #4]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	dd42      	ble.n	800e63c <__ssvfiscanf_r+0x268>
 800e5b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5b8:	0659      	lsls	r1, r3, #25
 800e5ba:	d404      	bmi.n	800e5c6 <__ssvfiscanf_r+0x1f2>
 800e5bc:	6823      	ldr	r3, [r4, #0]
 800e5be:	781a      	ldrb	r2, [r3, #0]
 800e5c0:	5cba      	ldrb	r2, [r7, r2]
 800e5c2:	0712      	lsls	r2, r2, #28
 800e5c4:	d441      	bmi.n	800e64a <__ssvfiscanf_r+0x276>
 800e5c6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e5c8:	2b02      	cmp	r3, #2
 800e5ca:	dc50      	bgt.n	800e66e <__ssvfiscanf_r+0x29a>
 800e5cc:	466b      	mov	r3, sp
 800e5ce:	4622      	mov	r2, r4
 800e5d0:	a941      	add	r1, sp, #260	; 0x104
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	f000 f9d0 	bl	800e978 <_scanf_chars>
 800e5d8:	2801      	cmp	r0, #1
 800e5da:	d06e      	beq.n	800e6ba <__ssvfiscanf_r+0x2e6>
 800e5dc:	2802      	cmp	r0, #2
 800e5de:	f47f af20 	bne.w	800e422 <__ssvfiscanf_r+0x4e>
 800e5e2:	e7cf      	b.n	800e584 <__ssvfiscanf_r+0x1b0>
 800e5e4:	220a      	movs	r2, #10
 800e5e6:	e7dd      	b.n	800e5a4 <__ssvfiscanf_r+0x1d0>
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	9342      	str	r3, [sp, #264]	; 0x108
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	e7de      	b.n	800e5ae <__ssvfiscanf_r+0x1da>
 800e5f0:	2308      	movs	r3, #8
 800e5f2:	9342      	str	r3, [sp, #264]	; 0x108
 800e5f4:	2304      	movs	r3, #4
 800e5f6:	e7da      	b.n	800e5ae <__ssvfiscanf_r+0x1da>
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	4640      	mov	r0, r8
 800e5fc:	f000 fb20 	bl	800ec40 <__sccl>
 800e600:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e606:	9341      	str	r3, [sp, #260]	; 0x104
 800e608:	4605      	mov	r5, r0
 800e60a:	2301      	movs	r3, #1
 800e60c:	e7cf      	b.n	800e5ae <__ssvfiscanf_r+0x1da>
 800e60e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e614:	9341      	str	r3, [sp, #260]	; 0x104
 800e616:	2300      	movs	r3, #0
 800e618:	e7c9      	b.n	800e5ae <__ssvfiscanf_r+0x1da>
 800e61a:	2302      	movs	r3, #2
 800e61c:	e7c7      	b.n	800e5ae <__ssvfiscanf_r+0x1da>
 800e61e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e620:	06c3      	lsls	r3, r0, #27
 800e622:	f53f aefe 	bmi.w	800e422 <__ssvfiscanf_r+0x4e>
 800e626:	9b00      	ldr	r3, [sp, #0]
 800e628:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e62a:	1d19      	adds	r1, r3, #4
 800e62c:	9100      	str	r1, [sp, #0]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f010 0f01 	tst.w	r0, #1
 800e634:	bf14      	ite	ne
 800e636:	801a      	strhne	r2, [r3, #0]
 800e638:	601a      	streq	r2, [r3, #0]
 800e63a:	e6f2      	b.n	800e422 <__ssvfiscanf_r+0x4e>
 800e63c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e63e:	4621      	mov	r1, r4
 800e640:	4630      	mov	r0, r6
 800e642:	4798      	blx	r3
 800e644:	2800      	cmp	r0, #0
 800e646:	d0b6      	beq.n	800e5b6 <__ssvfiscanf_r+0x1e2>
 800e648:	e79c      	b.n	800e584 <__ssvfiscanf_r+0x1b0>
 800e64a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e64c:	3201      	adds	r2, #1
 800e64e:	9245      	str	r2, [sp, #276]	; 0x114
 800e650:	6862      	ldr	r2, [r4, #4]
 800e652:	3a01      	subs	r2, #1
 800e654:	2a00      	cmp	r2, #0
 800e656:	6062      	str	r2, [r4, #4]
 800e658:	dd02      	ble.n	800e660 <__ssvfiscanf_r+0x28c>
 800e65a:	3301      	adds	r3, #1
 800e65c:	6023      	str	r3, [r4, #0]
 800e65e:	e7ad      	b.n	800e5bc <__ssvfiscanf_r+0x1e8>
 800e660:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e662:	4621      	mov	r1, r4
 800e664:	4630      	mov	r0, r6
 800e666:	4798      	blx	r3
 800e668:	2800      	cmp	r0, #0
 800e66a:	d0a7      	beq.n	800e5bc <__ssvfiscanf_r+0x1e8>
 800e66c:	e78a      	b.n	800e584 <__ssvfiscanf_r+0x1b0>
 800e66e:	2b04      	cmp	r3, #4
 800e670:	dc0e      	bgt.n	800e690 <__ssvfiscanf_r+0x2bc>
 800e672:	466b      	mov	r3, sp
 800e674:	4622      	mov	r2, r4
 800e676:	a941      	add	r1, sp, #260	; 0x104
 800e678:	4630      	mov	r0, r6
 800e67a:	f000 f9d7 	bl	800ea2c <_scanf_i>
 800e67e:	e7ab      	b.n	800e5d8 <__ssvfiscanf_r+0x204>
 800e680:	0800e321 	.word	0x0800e321
 800e684:	0800e39b 	.word	0x0800e39b
 800e688:	08010091 	.word	0x08010091
 800e68c:	080103e2 	.word	0x080103e2
 800e690:	4b0b      	ldr	r3, [pc, #44]	; (800e6c0 <__ssvfiscanf_r+0x2ec>)
 800e692:	2b00      	cmp	r3, #0
 800e694:	f43f aec5 	beq.w	800e422 <__ssvfiscanf_r+0x4e>
 800e698:	466b      	mov	r3, sp
 800e69a:	4622      	mov	r2, r4
 800e69c:	a941      	add	r1, sp, #260	; 0x104
 800e69e:	4630      	mov	r0, r6
 800e6a0:	f7fb fa9a 	bl	8009bd8 <_scanf_float>
 800e6a4:	e798      	b.n	800e5d8 <__ssvfiscanf_r+0x204>
 800e6a6:	89a3      	ldrh	r3, [r4, #12]
 800e6a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e6ac:	bf18      	it	ne
 800e6ae:	f04f 30ff 	movne.w	r0, #4294967295
 800e6b2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e6bc:	e7f9      	b.n	800e6b2 <__ssvfiscanf_r+0x2de>
 800e6be:	bf00      	nop
 800e6c0:	08009bd9 	.word	0x08009bd9

0800e6c4 <__sfputc_r>:
 800e6c4:	6893      	ldr	r3, [r2, #8]
 800e6c6:	3b01      	subs	r3, #1
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	b410      	push	{r4}
 800e6cc:	6093      	str	r3, [r2, #8]
 800e6ce:	da08      	bge.n	800e6e2 <__sfputc_r+0x1e>
 800e6d0:	6994      	ldr	r4, [r2, #24]
 800e6d2:	42a3      	cmp	r3, r4
 800e6d4:	db01      	blt.n	800e6da <__sfputc_r+0x16>
 800e6d6:	290a      	cmp	r1, #10
 800e6d8:	d103      	bne.n	800e6e2 <__sfputc_r+0x1e>
 800e6da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6de:	f000 bb21 	b.w	800ed24 <__swbuf_r>
 800e6e2:	6813      	ldr	r3, [r2, #0]
 800e6e4:	1c58      	adds	r0, r3, #1
 800e6e6:	6010      	str	r0, [r2, #0]
 800e6e8:	7019      	strb	r1, [r3, #0]
 800e6ea:	4608      	mov	r0, r1
 800e6ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6f0:	4770      	bx	lr

0800e6f2 <__sfputs_r>:
 800e6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f4:	4606      	mov	r6, r0
 800e6f6:	460f      	mov	r7, r1
 800e6f8:	4614      	mov	r4, r2
 800e6fa:	18d5      	adds	r5, r2, r3
 800e6fc:	42ac      	cmp	r4, r5
 800e6fe:	d101      	bne.n	800e704 <__sfputs_r+0x12>
 800e700:	2000      	movs	r0, #0
 800e702:	e007      	b.n	800e714 <__sfputs_r+0x22>
 800e704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e708:	463a      	mov	r2, r7
 800e70a:	4630      	mov	r0, r6
 800e70c:	f7ff ffda 	bl	800e6c4 <__sfputc_r>
 800e710:	1c43      	adds	r3, r0, #1
 800e712:	d1f3      	bne.n	800e6fc <__sfputs_r+0xa>
 800e714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e718 <_vfiprintf_r>:
 800e718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71c:	460d      	mov	r5, r1
 800e71e:	b09d      	sub	sp, #116	; 0x74
 800e720:	4614      	mov	r4, r2
 800e722:	4698      	mov	r8, r3
 800e724:	4606      	mov	r6, r0
 800e726:	b118      	cbz	r0, 800e730 <_vfiprintf_r+0x18>
 800e728:	6983      	ldr	r3, [r0, #24]
 800e72a:	b90b      	cbnz	r3, 800e730 <_vfiprintf_r+0x18>
 800e72c:	f000 fcf6 	bl	800f11c <__sinit>
 800e730:	4b89      	ldr	r3, [pc, #548]	; (800e958 <_vfiprintf_r+0x240>)
 800e732:	429d      	cmp	r5, r3
 800e734:	d11b      	bne.n	800e76e <_vfiprintf_r+0x56>
 800e736:	6875      	ldr	r5, [r6, #4]
 800e738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e73a:	07d9      	lsls	r1, r3, #31
 800e73c:	d405      	bmi.n	800e74a <_vfiprintf_r+0x32>
 800e73e:	89ab      	ldrh	r3, [r5, #12]
 800e740:	059a      	lsls	r2, r3, #22
 800e742:	d402      	bmi.n	800e74a <_vfiprintf_r+0x32>
 800e744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e746:	f7fe ff85 	bl	800d654 <__retarget_lock_acquire_recursive>
 800e74a:	89ab      	ldrh	r3, [r5, #12]
 800e74c:	071b      	lsls	r3, r3, #28
 800e74e:	d501      	bpl.n	800e754 <_vfiprintf_r+0x3c>
 800e750:	692b      	ldr	r3, [r5, #16]
 800e752:	b9eb      	cbnz	r3, 800e790 <_vfiprintf_r+0x78>
 800e754:	4629      	mov	r1, r5
 800e756:	4630      	mov	r0, r6
 800e758:	f000 fb44 	bl	800ede4 <__swsetup_r>
 800e75c:	b1c0      	cbz	r0, 800e790 <_vfiprintf_r+0x78>
 800e75e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e760:	07dc      	lsls	r4, r3, #31
 800e762:	d50e      	bpl.n	800e782 <_vfiprintf_r+0x6a>
 800e764:	f04f 30ff 	mov.w	r0, #4294967295
 800e768:	b01d      	add	sp, #116	; 0x74
 800e76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e76e:	4b7b      	ldr	r3, [pc, #492]	; (800e95c <_vfiprintf_r+0x244>)
 800e770:	429d      	cmp	r5, r3
 800e772:	d101      	bne.n	800e778 <_vfiprintf_r+0x60>
 800e774:	68b5      	ldr	r5, [r6, #8]
 800e776:	e7df      	b.n	800e738 <_vfiprintf_r+0x20>
 800e778:	4b79      	ldr	r3, [pc, #484]	; (800e960 <_vfiprintf_r+0x248>)
 800e77a:	429d      	cmp	r5, r3
 800e77c:	bf08      	it	eq
 800e77e:	68f5      	ldreq	r5, [r6, #12]
 800e780:	e7da      	b.n	800e738 <_vfiprintf_r+0x20>
 800e782:	89ab      	ldrh	r3, [r5, #12]
 800e784:	0598      	lsls	r0, r3, #22
 800e786:	d4ed      	bmi.n	800e764 <_vfiprintf_r+0x4c>
 800e788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e78a:	f7fe ff65 	bl	800d658 <__retarget_lock_release_recursive>
 800e78e:	e7e9      	b.n	800e764 <_vfiprintf_r+0x4c>
 800e790:	2300      	movs	r3, #0
 800e792:	9309      	str	r3, [sp, #36]	; 0x24
 800e794:	2320      	movs	r3, #32
 800e796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e79a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e79e:	2330      	movs	r3, #48	; 0x30
 800e7a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e964 <_vfiprintf_r+0x24c>
 800e7a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7a8:	f04f 0901 	mov.w	r9, #1
 800e7ac:	4623      	mov	r3, r4
 800e7ae:	469a      	mov	sl, r3
 800e7b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7b4:	b10a      	cbz	r2, 800e7ba <_vfiprintf_r+0xa2>
 800e7b6:	2a25      	cmp	r2, #37	; 0x25
 800e7b8:	d1f9      	bne.n	800e7ae <_vfiprintf_r+0x96>
 800e7ba:	ebba 0b04 	subs.w	fp, sl, r4
 800e7be:	d00b      	beq.n	800e7d8 <_vfiprintf_r+0xc0>
 800e7c0:	465b      	mov	r3, fp
 800e7c2:	4622      	mov	r2, r4
 800e7c4:	4629      	mov	r1, r5
 800e7c6:	4630      	mov	r0, r6
 800e7c8:	f7ff ff93 	bl	800e6f2 <__sfputs_r>
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	f000 80aa 	beq.w	800e926 <_vfiprintf_r+0x20e>
 800e7d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7d4:	445a      	add	r2, fp
 800e7d6:	9209      	str	r2, [sp, #36]	; 0x24
 800e7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f000 80a2 	beq.w	800e926 <_vfiprintf_r+0x20e>
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7ec:	f10a 0a01 	add.w	sl, sl, #1
 800e7f0:	9304      	str	r3, [sp, #16]
 800e7f2:	9307      	str	r3, [sp, #28]
 800e7f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7f8:	931a      	str	r3, [sp, #104]	; 0x68
 800e7fa:	4654      	mov	r4, sl
 800e7fc:	2205      	movs	r2, #5
 800e7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e802:	4858      	ldr	r0, [pc, #352]	; (800e964 <_vfiprintf_r+0x24c>)
 800e804:	f7f1 fd04 	bl	8000210 <memchr>
 800e808:	9a04      	ldr	r2, [sp, #16]
 800e80a:	b9d8      	cbnz	r0, 800e844 <_vfiprintf_r+0x12c>
 800e80c:	06d1      	lsls	r1, r2, #27
 800e80e:	bf44      	itt	mi
 800e810:	2320      	movmi	r3, #32
 800e812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e816:	0713      	lsls	r3, r2, #28
 800e818:	bf44      	itt	mi
 800e81a:	232b      	movmi	r3, #43	; 0x2b
 800e81c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e820:	f89a 3000 	ldrb.w	r3, [sl]
 800e824:	2b2a      	cmp	r3, #42	; 0x2a
 800e826:	d015      	beq.n	800e854 <_vfiprintf_r+0x13c>
 800e828:	9a07      	ldr	r2, [sp, #28]
 800e82a:	4654      	mov	r4, sl
 800e82c:	2000      	movs	r0, #0
 800e82e:	f04f 0c0a 	mov.w	ip, #10
 800e832:	4621      	mov	r1, r4
 800e834:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e838:	3b30      	subs	r3, #48	; 0x30
 800e83a:	2b09      	cmp	r3, #9
 800e83c:	d94e      	bls.n	800e8dc <_vfiprintf_r+0x1c4>
 800e83e:	b1b0      	cbz	r0, 800e86e <_vfiprintf_r+0x156>
 800e840:	9207      	str	r2, [sp, #28]
 800e842:	e014      	b.n	800e86e <_vfiprintf_r+0x156>
 800e844:	eba0 0308 	sub.w	r3, r0, r8
 800e848:	fa09 f303 	lsl.w	r3, r9, r3
 800e84c:	4313      	orrs	r3, r2
 800e84e:	9304      	str	r3, [sp, #16]
 800e850:	46a2      	mov	sl, r4
 800e852:	e7d2      	b.n	800e7fa <_vfiprintf_r+0xe2>
 800e854:	9b03      	ldr	r3, [sp, #12]
 800e856:	1d19      	adds	r1, r3, #4
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	9103      	str	r1, [sp, #12]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	bfbb      	ittet	lt
 800e860:	425b      	neglt	r3, r3
 800e862:	f042 0202 	orrlt.w	r2, r2, #2
 800e866:	9307      	strge	r3, [sp, #28]
 800e868:	9307      	strlt	r3, [sp, #28]
 800e86a:	bfb8      	it	lt
 800e86c:	9204      	strlt	r2, [sp, #16]
 800e86e:	7823      	ldrb	r3, [r4, #0]
 800e870:	2b2e      	cmp	r3, #46	; 0x2e
 800e872:	d10c      	bne.n	800e88e <_vfiprintf_r+0x176>
 800e874:	7863      	ldrb	r3, [r4, #1]
 800e876:	2b2a      	cmp	r3, #42	; 0x2a
 800e878:	d135      	bne.n	800e8e6 <_vfiprintf_r+0x1ce>
 800e87a:	9b03      	ldr	r3, [sp, #12]
 800e87c:	1d1a      	adds	r2, r3, #4
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	9203      	str	r2, [sp, #12]
 800e882:	2b00      	cmp	r3, #0
 800e884:	bfb8      	it	lt
 800e886:	f04f 33ff 	movlt.w	r3, #4294967295
 800e88a:	3402      	adds	r4, #2
 800e88c:	9305      	str	r3, [sp, #20]
 800e88e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e974 <_vfiprintf_r+0x25c>
 800e892:	7821      	ldrb	r1, [r4, #0]
 800e894:	2203      	movs	r2, #3
 800e896:	4650      	mov	r0, sl
 800e898:	f7f1 fcba 	bl	8000210 <memchr>
 800e89c:	b140      	cbz	r0, 800e8b0 <_vfiprintf_r+0x198>
 800e89e:	2340      	movs	r3, #64	; 0x40
 800e8a0:	eba0 000a 	sub.w	r0, r0, sl
 800e8a4:	fa03 f000 	lsl.w	r0, r3, r0
 800e8a8:	9b04      	ldr	r3, [sp, #16]
 800e8aa:	4303      	orrs	r3, r0
 800e8ac:	3401      	adds	r4, #1
 800e8ae:	9304      	str	r3, [sp, #16]
 800e8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8b4:	482c      	ldr	r0, [pc, #176]	; (800e968 <_vfiprintf_r+0x250>)
 800e8b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8ba:	2206      	movs	r2, #6
 800e8bc:	f7f1 fca8 	bl	8000210 <memchr>
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d03f      	beq.n	800e944 <_vfiprintf_r+0x22c>
 800e8c4:	4b29      	ldr	r3, [pc, #164]	; (800e96c <_vfiprintf_r+0x254>)
 800e8c6:	bb1b      	cbnz	r3, 800e910 <_vfiprintf_r+0x1f8>
 800e8c8:	9b03      	ldr	r3, [sp, #12]
 800e8ca:	3307      	adds	r3, #7
 800e8cc:	f023 0307 	bic.w	r3, r3, #7
 800e8d0:	3308      	adds	r3, #8
 800e8d2:	9303      	str	r3, [sp, #12]
 800e8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8d6:	443b      	add	r3, r7
 800e8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e8da:	e767      	b.n	800e7ac <_vfiprintf_r+0x94>
 800e8dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8e0:	460c      	mov	r4, r1
 800e8e2:	2001      	movs	r0, #1
 800e8e4:	e7a5      	b.n	800e832 <_vfiprintf_r+0x11a>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	3401      	adds	r4, #1
 800e8ea:	9305      	str	r3, [sp, #20]
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	f04f 0c0a 	mov.w	ip, #10
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8f8:	3a30      	subs	r2, #48	; 0x30
 800e8fa:	2a09      	cmp	r2, #9
 800e8fc:	d903      	bls.n	800e906 <_vfiprintf_r+0x1ee>
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d0c5      	beq.n	800e88e <_vfiprintf_r+0x176>
 800e902:	9105      	str	r1, [sp, #20]
 800e904:	e7c3      	b.n	800e88e <_vfiprintf_r+0x176>
 800e906:	fb0c 2101 	mla	r1, ip, r1, r2
 800e90a:	4604      	mov	r4, r0
 800e90c:	2301      	movs	r3, #1
 800e90e:	e7f0      	b.n	800e8f2 <_vfiprintf_r+0x1da>
 800e910:	ab03      	add	r3, sp, #12
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	462a      	mov	r2, r5
 800e916:	4b16      	ldr	r3, [pc, #88]	; (800e970 <_vfiprintf_r+0x258>)
 800e918:	a904      	add	r1, sp, #16
 800e91a:	4630      	mov	r0, r6
 800e91c:	f7fa fd92 	bl	8009444 <_printf_float>
 800e920:	4607      	mov	r7, r0
 800e922:	1c78      	adds	r0, r7, #1
 800e924:	d1d6      	bne.n	800e8d4 <_vfiprintf_r+0x1bc>
 800e926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e928:	07d9      	lsls	r1, r3, #31
 800e92a:	d405      	bmi.n	800e938 <_vfiprintf_r+0x220>
 800e92c:	89ab      	ldrh	r3, [r5, #12]
 800e92e:	059a      	lsls	r2, r3, #22
 800e930:	d402      	bmi.n	800e938 <_vfiprintf_r+0x220>
 800e932:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e934:	f7fe fe90 	bl	800d658 <__retarget_lock_release_recursive>
 800e938:	89ab      	ldrh	r3, [r5, #12]
 800e93a:	065b      	lsls	r3, r3, #25
 800e93c:	f53f af12 	bmi.w	800e764 <_vfiprintf_r+0x4c>
 800e940:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e942:	e711      	b.n	800e768 <_vfiprintf_r+0x50>
 800e944:	ab03      	add	r3, sp, #12
 800e946:	9300      	str	r3, [sp, #0]
 800e948:	462a      	mov	r2, r5
 800e94a:	4b09      	ldr	r3, [pc, #36]	; (800e970 <_vfiprintf_r+0x258>)
 800e94c:	a904      	add	r1, sp, #16
 800e94e:	4630      	mov	r0, r6
 800e950:	f7fb f81c 	bl	800998c <_printf_i>
 800e954:	e7e4      	b.n	800e920 <_vfiprintf_r+0x208>
 800e956:	bf00      	nop
 800e958:	08010428 	.word	0x08010428
 800e95c:	08010448 	.word	0x08010448
 800e960:	08010408 	.word	0x08010408
 800e964:	080103dc 	.word	0x080103dc
 800e968:	080103e6 	.word	0x080103e6
 800e96c:	08009445 	.word	0x08009445
 800e970:	0800e6f3 	.word	0x0800e6f3
 800e974:	080103e2 	.word	0x080103e2

0800e978 <_scanf_chars>:
 800e978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e97c:	4615      	mov	r5, r2
 800e97e:	688a      	ldr	r2, [r1, #8]
 800e980:	4680      	mov	r8, r0
 800e982:	460c      	mov	r4, r1
 800e984:	b932      	cbnz	r2, 800e994 <_scanf_chars+0x1c>
 800e986:	698a      	ldr	r2, [r1, #24]
 800e988:	2a00      	cmp	r2, #0
 800e98a:	bf0c      	ite	eq
 800e98c:	2201      	moveq	r2, #1
 800e98e:	f04f 32ff 	movne.w	r2, #4294967295
 800e992:	608a      	str	r2, [r1, #8]
 800e994:	6822      	ldr	r2, [r4, #0]
 800e996:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ea28 <_scanf_chars+0xb0>
 800e99a:	06d1      	lsls	r1, r2, #27
 800e99c:	bf5f      	itttt	pl
 800e99e:	681a      	ldrpl	r2, [r3, #0]
 800e9a0:	1d11      	addpl	r1, r2, #4
 800e9a2:	6019      	strpl	r1, [r3, #0]
 800e9a4:	6816      	ldrpl	r6, [r2, #0]
 800e9a6:	2700      	movs	r7, #0
 800e9a8:	69a0      	ldr	r0, [r4, #24]
 800e9aa:	b188      	cbz	r0, 800e9d0 <_scanf_chars+0x58>
 800e9ac:	2801      	cmp	r0, #1
 800e9ae:	d107      	bne.n	800e9c0 <_scanf_chars+0x48>
 800e9b0:	682a      	ldr	r2, [r5, #0]
 800e9b2:	7811      	ldrb	r1, [r2, #0]
 800e9b4:	6962      	ldr	r2, [r4, #20]
 800e9b6:	5c52      	ldrb	r2, [r2, r1]
 800e9b8:	b952      	cbnz	r2, 800e9d0 <_scanf_chars+0x58>
 800e9ba:	2f00      	cmp	r7, #0
 800e9bc:	d031      	beq.n	800ea22 <_scanf_chars+0xaa>
 800e9be:	e022      	b.n	800ea06 <_scanf_chars+0x8e>
 800e9c0:	2802      	cmp	r0, #2
 800e9c2:	d120      	bne.n	800ea06 <_scanf_chars+0x8e>
 800e9c4:	682b      	ldr	r3, [r5, #0]
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e9cc:	071b      	lsls	r3, r3, #28
 800e9ce:	d41a      	bmi.n	800ea06 <_scanf_chars+0x8e>
 800e9d0:	6823      	ldr	r3, [r4, #0]
 800e9d2:	06da      	lsls	r2, r3, #27
 800e9d4:	bf5e      	ittt	pl
 800e9d6:	682b      	ldrpl	r3, [r5, #0]
 800e9d8:	781b      	ldrbpl	r3, [r3, #0]
 800e9da:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e9de:	682a      	ldr	r2, [r5, #0]
 800e9e0:	686b      	ldr	r3, [r5, #4]
 800e9e2:	3201      	adds	r2, #1
 800e9e4:	602a      	str	r2, [r5, #0]
 800e9e6:	68a2      	ldr	r2, [r4, #8]
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	3a01      	subs	r2, #1
 800e9ec:	606b      	str	r3, [r5, #4]
 800e9ee:	3701      	adds	r7, #1
 800e9f0:	60a2      	str	r2, [r4, #8]
 800e9f2:	b142      	cbz	r2, 800ea06 <_scanf_chars+0x8e>
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	dcd7      	bgt.n	800e9a8 <_scanf_chars+0x30>
 800e9f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	4640      	mov	r0, r8
 800ea00:	4798      	blx	r3
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d0d0      	beq.n	800e9a8 <_scanf_chars+0x30>
 800ea06:	6823      	ldr	r3, [r4, #0]
 800ea08:	f013 0310 	ands.w	r3, r3, #16
 800ea0c:	d105      	bne.n	800ea1a <_scanf_chars+0xa2>
 800ea0e:	68e2      	ldr	r2, [r4, #12]
 800ea10:	3201      	adds	r2, #1
 800ea12:	60e2      	str	r2, [r4, #12]
 800ea14:	69a2      	ldr	r2, [r4, #24]
 800ea16:	b102      	cbz	r2, 800ea1a <_scanf_chars+0xa2>
 800ea18:	7033      	strb	r3, [r6, #0]
 800ea1a:	6923      	ldr	r3, [r4, #16]
 800ea1c:	443b      	add	r3, r7
 800ea1e:	6123      	str	r3, [r4, #16]
 800ea20:	2000      	movs	r0, #0
 800ea22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea26:	bf00      	nop
 800ea28:	08010091 	.word	0x08010091

0800ea2c <_scanf_i>:
 800ea2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea30:	4698      	mov	r8, r3
 800ea32:	4b76      	ldr	r3, [pc, #472]	; (800ec0c <_scanf_i+0x1e0>)
 800ea34:	460c      	mov	r4, r1
 800ea36:	4682      	mov	sl, r0
 800ea38:	4616      	mov	r6, r2
 800ea3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea3e:	b087      	sub	sp, #28
 800ea40:	ab03      	add	r3, sp, #12
 800ea42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ea46:	4b72      	ldr	r3, [pc, #456]	; (800ec10 <_scanf_i+0x1e4>)
 800ea48:	69a1      	ldr	r1, [r4, #24]
 800ea4a:	4a72      	ldr	r2, [pc, #456]	; (800ec14 <_scanf_i+0x1e8>)
 800ea4c:	2903      	cmp	r1, #3
 800ea4e:	bf18      	it	ne
 800ea50:	461a      	movne	r2, r3
 800ea52:	68a3      	ldr	r3, [r4, #8]
 800ea54:	9201      	str	r2, [sp, #4]
 800ea56:	1e5a      	subs	r2, r3, #1
 800ea58:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ea5c:	bf88      	it	hi
 800ea5e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ea62:	4627      	mov	r7, r4
 800ea64:	bf82      	ittt	hi
 800ea66:	eb03 0905 	addhi.w	r9, r3, r5
 800ea6a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ea6e:	60a3      	strhi	r3, [r4, #8]
 800ea70:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ea74:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ea78:	bf98      	it	ls
 800ea7a:	f04f 0900 	movls.w	r9, #0
 800ea7e:	6023      	str	r3, [r4, #0]
 800ea80:	463d      	mov	r5, r7
 800ea82:	f04f 0b00 	mov.w	fp, #0
 800ea86:	6831      	ldr	r1, [r6, #0]
 800ea88:	ab03      	add	r3, sp, #12
 800ea8a:	7809      	ldrb	r1, [r1, #0]
 800ea8c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ea90:	2202      	movs	r2, #2
 800ea92:	f7f1 fbbd 	bl	8000210 <memchr>
 800ea96:	b328      	cbz	r0, 800eae4 <_scanf_i+0xb8>
 800ea98:	f1bb 0f01 	cmp.w	fp, #1
 800ea9c:	d159      	bne.n	800eb52 <_scanf_i+0x126>
 800ea9e:	6862      	ldr	r2, [r4, #4]
 800eaa0:	b92a      	cbnz	r2, 800eaae <_scanf_i+0x82>
 800eaa2:	6822      	ldr	r2, [r4, #0]
 800eaa4:	2308      	movs	r3, #8
 800eaa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eaaa:	6063      	str	r3, [r4, #4]
 800eaac:	6022      	str	r2, [r4, #0]
 800eaae:	6822      	ldr	r2, [r4, #0]
 800eab0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800eab4:	6022      	str	r2, [r4, #0]
 800eab6:	68a2      	ldr	r2, [r4, #8]
 800eab8:	1e51      	subs	r1, r2, #1
 800eaba:	60a1      	str	r1, [r4, #8]
 800eabc:	b192      	cbz	r2, 800eae4 <_scanf_i+0xb8>
 800eabe:	6832      	ldr	r2, [r6, #0]
 800eac0:	1c51      	adds	r1, r2, #1
 800eac2:	6031      	str	r1, [r6, #0]
 800eac4:	7812      	ldrb	r2, [r2, #0]
 800eac6:	f805 2b01 	strb.w	r2, [r5], #1
 800eaca:	6872      	ldr	r2, [r6, #4]
 800eacc:	3a01      	subs	r2, #1
 800eace:	2a00      	cmp	r2, #0
 800ead0:	6072      	str	r2, [r6, #4]
 800ead2:	dc07      	bgt.n	800eae4 <_scanf_i+0xb8>
 800ead4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ead8:	4631      	mov	r1, r6
 800eada:	4650      	mov	r0, sl
 800eadc:	4790      	blx	r2
 800eade:	2800      	cmp	r0, #0
 800eae0:	f040 8085 	bne.w	800ebee <_scanf_i+0x1c2>
 800eae4:	f10b 0b01 	add.w	fp, fp, #1
 800eae8:	f1bb 0f03 	cmp.w	fp, #3
 800eaec:	d1cb      	bne.n	800ea86 <_scanf_i+0x5a>
 800eaee:	6863      	ldr	r3, [r4, #4]
 800eaf0:	b90b      	cbnz	r3, 800eaf6 <_scanf_i+0xca>
 800eaf2:	230a      	movs	r3, #10
 800eaf4:	6063      	str	r3, [r4, #4]
 800eaf6:	6863      	ldr	r3, [r4, #4]
 800eaf8:	4947      	ldr	r1, [pc, #284]	; (800ec18 <_scanf_i+0x1ec>)
 800eafa:	6960      	ldr	r0, [r4, #20]
 800eafc:	1ac9      	subs	r1, r1, r3
 800eafe:	f000 f89f 	bl	800ec40 <__sccl>
 800eb02:	f04f 0b00 	mov.w	fp, #0
 800eb06:	68a3      	ldr	r3, [r4, #8]
 800eb08:	6822      	ldr	r2, [r4, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d03d      	beq.n	800eb8a <_scanf_i+0x15e>
 800eb0e:	6831      	ldr	r1, [r6, #0]
 800eb10:	6960      	ldr	r0, [r4, #20]
 800eb12:	f891 c000 	ldrb.w	ip, [r1]
 800eb16:	f810 000c 	ldrb.w	r0, [r0, ip]
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	d035      	beq.n	800eb8a <_scanf_i+0x15e>
 800eb1e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800eb22:	d124      	bne.n	800eb6e <_scanf_i+0x142>
 800eb24:	0510      	lsls	r0, r2, #20
 800eb26:	d522      	bpl.n	800eb6e <_scanf_i+0x142>
 800eb28:	f10b 0b01 	add.w	fp, fp, #1
 800eb2c:	f1b9 0f00 	cmp.w	r9, #0
 800eb30:	d003      	beq.n	800eb3a <_scanf_i+0x10e>
 800eb32:	3301      	adds	r3, #1
 800eb34:	f109 39ff 	add.w	r9, r9, #4294967295
 800eb38:	60a3      	str	r3, [r4, #8]
 800eb3a:	6873      	ldr	r3, [r6, #4]
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	6073      	str	r3, [r6, #4]
 800eb42:	dd1b      	ble.n	800eb7c <_scanf_i+0x150>
 800eb44:	6833      	ldr	r3, [r6, #0]
 800eb46:	3301      	adds	r3, #1
 800eb48:	6033      	str	r3, [r6, #0]
 800eb4a:	68a3      	ldr	r3, [r4, #8]
 800eb4c:	3b01      	subs	r3, #1
 800eb4e:	60a3      	str	r3, [r4, #8]
 800eb50:	e7d9      	b.n	800eb06 <_scanf_i+0xda>
 800eb52:	f1bb 0f02 	cmp.w	fp, #2
 800eb56:	d1ae      	bne.n	800eab6 <_scanf_i+0x8a>
 800eb58:	6822      	ldr	r2, [r4, #0]
 800eb5a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800eb5e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800eb62:	d1bf      	bne.n	800eae4 <_scanf_i+0xb8>
 800eb64:	2310      	movs	r3, #16
 800eb66:	6063      	str	r3, [r4, #4]
 800eb68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eb6c:	e7a2      	b.n	800eab4 <_scanf_i+0x88>
 800eb6e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800eb72:	6022      	str	r2, [r4, #0]
 800eb74:	780b      	ldrb	r3, [r1, #0]
 800eb76:	f805 3b01 	strb.w	r3, [r5], #1
 800eb7a:	e7de      	b.n	800eb3a <_scanf_i+0x10e>
 800eb7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eb80:	4631      	mov	r1, r6
 800eb82:	4650      	mov	r0, sl
 800eb84:	4798      	blx	r3
 800eb86:	2800      	cmp	r0, #0
 800eb88:	d0df      	beq.n	800eb4a <_scanf_i+0x11e>
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	05db      	lsls	r3, r3, #23
 800eb8e:	d50d      	bpl.n	800ebac <_scanf_i+0x180>
 800eb90:	42bd      	cmp	r5, r7
 800eb92:	d909      	bls.n	800eba8 <_scanf_i+0x17c>
 800eb94:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eb98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb9c:	4632      	mov	r2, r6
 800eb9e:	4650      	mov	r0, sl
 800eba0:	4798      	blx	r3
 800eba2:	f105 39ff 	add.w	r9, r5, #4294967295
 800eba6:	464d      	mov	r5, r9
 800eba8:	42bd      	cmp	r5, r7
 800ebaa:	d02d      	beq.n	800ec08 <_scanf_i+0x1dc>
 800ebac:	6822      	ldr	r2, [r4, #0]
 800ebae:	f012 0210 	ands.w	r2, r2, #16
 800ebb2:	d113      	bne.n	800ebdc <_scanf_i+0x1b0>
 800ebb4:	702a      	strb	r2, [r5, #0]
 800ebb6:	6863      	ldr	r3, [r4, #4]
 800ebb8:	9e01      	ldr	r6, [sp, #4]
 800ebba:	4639      	mov	r1, r7
 800ebbc:	4650      	mov	r0, sl
 800ebbe:	47b0      	blx	r6
 800ebc0:	6821      	ldr	r1, [r4, #0]
 800ebc2:	f8d8 3000 	ldr.w	r3, [r8]
 800ebc6:	f011 0f20 	tst.w	r1, #32
 800ebca:	d013      	beq.n	800ebf4 <_scanf_i+0x1c8>
 800ebcc:	1d1a      	adds	r2, r3, #4
 800ebce:	f8c8 2000 	str.w	r2, [r8]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6018      	str	r0, [r3, #0]
 800ebd6:	68e3      	ldr	r3, [r4, #12]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	60e3      	str	r3, [r4, #12]
 800ebdc:	1bed      	subs	r5, r5, r7
 800ebde:	44ab      	add	fp, r5
 800ebe0:	6925      	ldr	r5, [r4, #16]
 800ebe2:	445d      	add	r5, fp
 800ebe4:	6125      	str	r5, [r4, #16]
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	b007      	add	sp, #28
 800ebea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebee:	f04f 0b00 	mov.w	fp, #0
 800ebf2:	e7ca      	b.n	800eb8a <_scanf_i+0x15e>
 800ebf4:	1d1a      	adds	r2, r3, #4
 800ebf6:	f8c8 2000 	str.w	r2, [r8]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f011 0f01 	tst.w	r1, #1
 800ec00:	bf14      	ite	ne
 800ec02:	8018      	strhne	r0, [r3, #0]
 800ec04:	6018      	streq	r0, [r3, #0]
 800ec06:	e7e6      	b.n	800ebd6 <_scanf_i+0x1aa>
 800ec08:	2001      	movs	r0, #1
 800ec0a:	e7ed      	b.n	800ebe8 <_scanf_i+0x1bc>
 800ec0c:	0800f9d0 	.word	0x0800f9d0
 800ec10:	0800bb21 	.word	0x0800bb21
 800ec14:	0800ba25 	.word	0x0800ba25
 800ec18:	08010406 	.word	0x08010406

0800ec1c <_read_r>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	4d07      	ldr	r5, [pc, #28]	; (800ec3c <_read_r+0x20>)
 800ec20:	4604      	mov	r4, r0
 800ec22:	4608      	mov	r0, r1
 800ec24:	4611      	mov	r1, r2
 800ec26:	2200      	movs	r2, #0
 800ec28:	602a      	str	r2, [r5, #0]
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	f000 fc60 	bl	800f4f0 <_read>
 800ec30:	1c43      	adds	r3, r0, #1
 800ec32:	d102      	bne.n	800ec3a <_read_r+0x1e>
 800ec34:	682b      	ldr	r3, [r5, #0]
 800ec36:	b103      	cbz	r3, 800ec3a <_read_r+0x1e>
 800ec38:	6023      	str	r3, [r4, #0]
 800ec3a:	bd38      	pop	{r3, r4, r5, pc}
 800ec3c:	20000360 	.word	0x20000360

0800ec40 <__sccl>:
 800ec40:	b570      	push	{r4, r5, r6, lr}
 800ec42:	780b      	ldrb	r3, [r1, #0]
 800ec44:	4604      	mov	r4, r0
 800ec46:	2b5e      	cmp	r3, #94	; 0x5e
 800ec48:	bf0b      	itete	eq
 800ec4a:	784b      	ldrbeq	r3, [r1, #1]
 800ec4c:	1c48      	addne	r0, r1, #1
 800ec4e:	1c88      	addeq	r0, r1, #2
 800ec50:	2200      	movne	r2, #0
 800ec52:	bf08      	it	eq
 800ec54:	2201      	moveq	r2, #1
 800ec56:	1e61      	subs	r1, r4, #1
 800ec58:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ec5c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ec60:	42a9      	cmp	r1, r5
 800ec62:	d1fb      	bne.n	800ec5c <__sccl+0x1c>
 800ec64:	b90b      	cbnz	r3, 800ec6a <__sccl+0x2a>
 800ec66:	3801      	subs	r0, #1
 800ec68:	bd70      	pop	{r4, r5, r6, pc}
 800ec6a:	f082 0201 	eor.w	r2, r2, #1
 800ec6e:	54e2      	strb	r2, [r4, r3]
 800ec70:	4605      	mov	r5, r0
 800ec72:	4628      	mov	r0, r5
 800ec74:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ec78:	292d      	cmp	r1, #45	; 0x2d
 800ec7a:	d006      	beq.n	800ec8a <__sccl+0x4a>
 800ec7c:	295d      	cmp	r1, #93	; 0x5d
 800ec7e:	d0f3      	beq.n	800ec68 <__sccl+0x28>
 800ec80:	b909      	cbnz	r1, 800ec86 <__sccl+0x46>
 800ec82:	4628      	mov	r0, r5
 800ec84:	e7f0      	b.n	800ec68 <__sccl+0x28>
 800ec86:	460b      	mov	r3, r1
 800ec88:	e7f1      	b.n	800ec6e <__sccl+0x2e>
 800ec8a:	786e      	ldrb	r6, [r5, #1]
 800ec8c:	2e5d      	cmp	r6, #93	; 0x5d
 800ec8e:	d0fa      	beq.n	800ec86 <__sccl+0x46>
 800ec90:	42b3      	cmp	r3, r6
 800ec92:	dcf8      	bgt.n	800ec86 <__sccl+0x46>
 800ec94:	3502      	adds	r5, #2
 800ec96:	4619      	mov	r1, r3
 800ec98:	3101      	adds	r1, #1
 800ec9a:	428e      	cmp	r6, r1
 800ec9c:	5462      	strb	r2, [r4, r1]
 800ec9e:	dcfb      	bgt.n	800ec98 <__sccl+0x58>
 800eca0:	1af1      	subs	r1, r6, r3
 800eca2:	3901      	subs	r1, #1
 800eca4:	1c58      	adds	r0, r3, #1
 800eca6:	42b3      	cmp	r3, r6
 800eca8:	bfa8      	it	ge
 800ecaa:	2100      	movge	r1, #0
 800ecac:	1843      	adds	r3, r0, r1
 800ecae:	e7e0      	b.n	800ec72 <__sccl+0x32>

0800ecb0 <__submore>:
 800ecb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb4:	460c      	mov	r4, r1
 800ecb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ecb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecbc:	4299      	cmp	r1, r3
 800ecbe:	d11d      	bne.n	800ecfc <__submore+0x4c>
 800ecc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ecc4:	f7fa faaa 	bl	800921c <_malloc_r>
 800ecc8:	b918      	cbnz	r0, 800ecd2 <__submore+0x22>
 800ecca:	f04f 30ff 	mov.w	r0, #4294967295
 800ecce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecd6:	63a3      	str	r3, [r4, #56]	; 0x38
 800ecd8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ecdc:	6360      	str	r0, [r4, #52]	; 0x34
 800ecde:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ece2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ece6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ecea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ecee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ecf2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ecf6:	6020      	str	r0, [r4, #0]
 800ecf8:	2000      	movs	r0, #0
 800ecfa:	e7e8      	b.n	800ecce <__submore+0x1e>
 800ecfc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ecfe:	0077      	lsls	r7, r6, #1
 800ed00:	463a      	mov	r2, r7
 800ed02:	f000 fb27 	bl	800f354 <_realloc_r>
 800ed06:	4605      	mov	r5, r0
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	d0de      	beq.n	800ecca <__submore+0x1a>
 800ed0c:	eb00 0806 	add.w	r8, r0, r6
 800ed10:	4601      	mov	r1, r0
 800ed12:	4632      	mov	r2, r6
 800ed14:	4640      	mov	r0, r8
 800ed16:	f7f9 ff8d 	bl	8008c34 <memcpy>
 800ed1a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ed1e:	f8c4 8000 	str.w	r8, [r4]
 800ed22:	e7e9      	b.n	800ecf8 <__submore+0x48>

0800ed24 <__swbuf_r>:
 800ed24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed26:	460e      	mov	r6, r1
 800ed28:	4614      	mov	r4, r2
 800ed2a:	4605      	mov	r5, r0
 800ed2c:	b118      	cbz	r0, 800ed36 <__swbuf_r+0x12>
 800ed2e:	6983      	ldr	r3, [r0, #24]
 800ed30:	b90b      	cbnz	r3, 800ed36 <__swbuf_r+0x12>
 800ed32:	f000 f9f3 	bl	800f11c <__sinit>
 800ed36:	4b21      	ldr	r3, [pc, #132]	; (800edbc <__swbuf_r+0x98>)
 800ed38:	429c      	cmp	r4, r3
 800ed3a:	d12b      	bne.n	800ed94 <__swbuf_r+0x70>
 800ed3c:	686c      	ldr	r4, [r5, #4]
 800ed3e:	69a3      	ldr	r3, [r4, #24]
 800ed40:	60a3      	str	r3, [r4, #8]
 800ed42:	89a3      	ldrh	r3, [r4, #12]
 800ed44:	071a      	lsls	r2, r3, #28
 800ed46:	d52f      	bpl.n	800eda8 <__swbuf_r+0x84>
 800ed48:	6923      	ldr	r3, [r4, #16]
 800ed4a:	b36b      	cbz	r3, 800eda8 <__swbuf_r+0x84>
 800ed4c:	6923      	ldr	r3, [r4, #16]
 800ed4e:	6820      	ldr	r0, [r4, #0]
 800ed50:	1ac0      	subs	r0, r0, r3
 800ed52:	6963      	ldr	r3, [r4, #20]
 800ed54:	b2f6      	uxtb	r6, r6
 800ed56:	4283      	cmp	r3, r0
 800ed58:	4637      	mov	r7, r6
 800ed5a:	dc04      	bgt.n	800ed66 <__swbuf_r+0x42>
 800ed5c:	4621      	mov	r1, r4
 800ed5e:	4628      	mov	r0, r5
 800ed60:	f000 f948 	bl	800eff4 <_fflush_r>
 800ed64:	bb30      	cbnz	r0, 800edb4 <__swbuf_r+0x90>
 800ed66:	68a3      	ldr	r3, [r4, #8]
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	60a3      	str	r3, [r4, #8]
 800ed6c:	6823      	ldr	r3, [r4, #0]
 800ed6e:	1c5a      	adds	r2, r3, #1
 800ed70:	6022      	str	r2, [r4, #0]
 800ed72:	701e      	strb	r6, [r3, #0]
 800ed74:	6963      	ldr	r3, [r4, #20]
 800ed76:	3001      	adds	r0, #1
 800ed78:	4283      	cmp	r3, r0
 800ed7a:	d004      	beq.n	800ed86 <__swbuf_r+0x62>
 800ed7c:	89a3      	ldrh	r3, [r4, #12]
 800ed7e:	07db      	lsls	r3, r3, #31
 800ed80:	d506      	bpl.n	800ed90 <__swbuf_r+0x6c>
 800ed82:	2e0a      	cmp	r6, #10
 800ed84:	d104      	bne.n	800ed90 <__swbuf_r+0x6c>
 800ed86:	4621      	mov	r1, r4
 800ed88:	4628      	mov	r0, r5
 800ed8a:	f000 f933 	bl	800eff4 <_fflush_r>
 800ed8e:	b988      	cbnz	r0, 800edb4 <__swbuf_r+0x90>
 800ed90:	4638      	mov	r0, r7
 800ed92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed94:	4b0a      	ldr	r3, [pc, #40]	; (800edc0 <__swbuf_r+0x9c>)
 800ed96:	429c      	cmp	r4, r3
 800ed98:	d101      	bne.n	800ed9e <__swbuf_r+0x7a>
 800ed9a:	68ac      	ldr	r4, [r5, #8]
 800ed9c:	e7cf      	b.n	800ed3e <__swbuf_r+0x1a>
 800ed9e:	4b09      	ldr	r3, [pc, #36]	; (800edc4 <__swbuf_r+0xa0>)
 800eda0:	429c      	cmp	r4, r3
 800eda2:	bf08      	it	eq
 800eda4:	68ec      	ldreq	r4, [r5, #12]
 800eda6:	e7ca      	b.n	800ed3e <__swbuf_r+0x1a>
 800eda8:	4621      	mov	r1, r4
 800edaa:	4628      	mov	r0, r5
 800edac:	f000 f81a 	bl	800ede4 <__swsetup_r>
 800edb0:	2800      	cmp	r0, #0
 800edb2:	d0cb      	beq.n	800ed4c <__swbuf_r+0x28>
 800edb4:	f04f 37ff 	mov.w	r7, #4294967295
 800edb8:	e7ea      	b.n	800ed90 <__swbuf_r+0x6c>
 800edba:	bf00      	nop
 800edbc:	08010428 	.word	0x08010428
 800edc0:	08010448 	.word	0x08010448
 800edc4:	08010408 	.word	0x08010408

0800edc8 <__ascii_wctomb>:
 800edc8:	b149      	cbz	r1, 800edde <__ascii_wctomb+0x16>
 800edca:	2aff      	cmp	r2, #255	; 0xff
 800edcc:	bf85      	ittet	hi
 800edce:	238a      	movhi	r3, #138	; 0x8a
 800edd0:	6003      	strhi	r3, [r0, #0]
 800edd2:	700a      	strbls	r2, [r1, #0]
 800edd4:	f04f 30ff 	movhi.w	r0, #4294967295
 800edd8:	bf98      	it	ls
 800edda:	2001      	movls	r0, #1
 800eddc:	4770      	bx	lr
 800edde:	4608      	mov	r0, r1
 800ede0:	4770      	bx	lr
	...

0800ede4 <__swsetup_r>:
 800ede4:	4b32      	ldr	r3, [pc, #200]	; (800eeb0 <__swsetup_r+0xcc>)
 800ede6:	b570      	push	{r4, r5, r6, lr}
 800ede8:	681d      	ldr	r5, [r3, #0]
 800edea:	4606      	mov	r6, r0
 800edec:	460c      	mov	r4, r1
 800edee:	b125      	cbz	r5, 800edfa <__swsetup_r+0x16>
 800edf0:	69ab      	ldr	r3, [r5, #24]
 800edf2:	b913      	cbnz	r3, 800edfa <__swsetup_r+0x16>
 800edf4:	4628      	mov	r0, r5
 800edf6:	f000 f991 	bl	800f11c <__sinit>
 800edfa:	4b2e      	ldr	r3, [pc, #184]	; (800eeb4 <__swsetup_r+0xd0>)
 800edfc:	429c      	cmp	r4, r3
 800edfe:	d10f      	bne.n	800ee20 <__swsetup_r+0x3c>
 800ee00:	686c      	ldr	r4, [r5, #4]
 800ee02:	89a3      	ldrh	r3, [r4, #12]
 800ee04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee08:	0719      	lsls	r1, r3, #28
 800ee0a:	d42c      	bmi.n	800ee66 <__swsetup_r+0x82>
 800ee0c:	06dd      	lsls	r5, r3, #27
 800ee0e:	d411      	bmi.n	800ee34 <__swsetup_r+0x50>
 800ee10:	2309      	movs	r3, #9
 800ee12:	6033      	str	r3, [r6, #0]
 800ee14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee18:	81a3      	strh	r3, [r4, #12]
 800ee1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee1e:	e03e      	b.n	800ee9e <__swsetup_r+0xba>
 800ee20:	4b25      	ldr	r3, [pc, #148]	; (800eeb8 <__swsetup_r+0xd4>)
 800ee22:	429c      	cmp	r4, r3
 800ee24:	d101      	bne.n	800ee2a <__swsetup_r+0x46>
 800ee26:	68ac      	ldr	r4, [r5, #8]
 800ee28:	e7eb      	b.n	800ee02 <__swsetup_r+0x1e>
 800ee2a:	4b24      	ldr	r3, [pc, #144]	; (800eebc <__swsetup_r+0xd8>)
 800ee2c:	429c      	cmp	r4, r3
 800ee2e:	bf08      	it	eq
 800ee30:	68ec      	ldreq	r4, [r5, #12]
 800ee32:	e7e6      	b.n	800ee02 <__swsetup_r+0x1e>
 800ee34:	0758      	lsls	r0, r3, #29
 800ee36:	d512      	bpl.n	800ee5e <__swsetup_r+0x7a>
 800ee38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee3a:	b141      	cbz	r1, 800ee4e <__swsetup_r+0x6a>
 800ee3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee40:	4299      	cmp	r1, r3
 800ee42:	d002      	beq.n	800ee4a <__swsetup_r+0x66>
 800ee44:	4630      	mov	r0, r6
 800ee46:	f7fa f97d 	bl	8009144 <_free_r>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	6363      	str	r3, [r4, #52]	; 0x34
 800ee4e:	89a3      	ldrh	r3, [r4, #12]
 800ee50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee54:	81a3      	strh	r3, [r4, #12]
 800ee56:	2300      	movs	r3, #0
 800ee58:	6063      	str	r3, [r4, #4]
 800ee5a:	6923      	ldr	r3, [r4, #16]
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	f043 0308 	orr.w	r3, r3, #8
 800ee64:	81a3      	strh	r3, [r4, #12]
 800ee66:	6923      	ldr	r3, [r4, #16]
 800ee68:	b94b      	cbnz	r3, 800ee7e <__swsetup_r+0x9a>
 800ee6a:	89a3      	ldrh	r3, [r4, #12]
 800ee6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee74:	d003      	beq.n	800ee7e <__swsetup_r+0x9a>
 800ee76:	4621      	mov	r1, r4
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f000 fa11 	bl	800f2a0 <__smakebuf_r>
 800ee7e:	89a0      	ldrh	r0, [r4, #12]
 800ee80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee84:	f010 0301 	ands.w	r3, r0, #1
 800ee88:	d00a      	beq.n	800eea0 <__swsetup_r+0xbc>
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	60a3      	str	r3, [r4, #8]
 800ee8e:	6963      	ldr	r3, [r4, #20]
 800ee90:	425b      	negs	r3, r3
 800ee92:	61a3      	str	r3, [r4, #24]
 800ee94:	6923      	ldr	r3, [r4, #16]
 800ee96:	b943      	cbnz	r3, 800eeaa <__swsetup_r+0xc6>
 800ee98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee9c:	d1ba      	bne.n	800ee14 <__swsetup_r+0x30>
 800ee9e:	bd70      	pop	{r4, r5, r6, pc}
 800eea0:	0781      	lsls	r1, r0, #30
 800eea2:	bf58      	it	pl
 800eea4:	6963      	ldrpl	r3, [r4, #20]
 800eea6:	60a3      	str	r3, [r4, #8]
 800eea8:	e7f4      	b.n	800ee94 <__swsetup_r+0xb0>
 800eeaa:	2000      	movs	r0, #0
 800eeac:	e7f7      	b.n	800ee9e <__swsetup_r+0xba>
 800eeae:	bf00      	nop
 800eeb0:	2000000c 	.word	0x2000000c
 800eeb4:	08010428 	.word	0x08010428
 800eeb8:	08010448 	.word	0x08010448
 800eebc:	08010408 	.word	0x08010408

0800eec0 <abort>:
 800eec0:	b508      	push	{r3, lr}
 800eec2:	2006      	movs	r0, #6
 800eec4:	f000 fa9e 	bl	800f404 <raise>
 800eec8:	2001      	movs	r0, #1
 800eeca:	f000 fb2f 	bl	800f52c <_exit>
	...

0800eed0 <__env_lock>:
 800eed0:	4801      	ldr	r0, [pc, #4]	; (800eed8 <__env_lock+0x8>)
 800eed2:	f7fe bbbf 	b.w	800d654 <__retarget_lock_acquire_recursive>
 800eed6:	bf00      	nop
 800eed8:	20000358 	.word	0x20000358

0800eedc <__env_unlock>:
 800eedc:	4801      	ldr	r0, [pc, #4]	; (800eee4 <__env_unlock+0x8>)
 800eede:	f7fe bbbb 	b.w	800d658 <__retarget_lock_release_recursive>
 800eee2:	bf00      	nop
 800eee4:	20000358 	.word	0x20000358

0800eee8 <__sflush_r>:
 800eee8:	898a      	ldrh	r2, [r1, #12]
 800eeea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeee:	4605      	mov	r5, r0
 800eef0:	0710      	lsls	r0, r2, #28
 800eef2:	460c      	mov	r4, r1
 800eef4:	d458      	bmi.n	800efa8 <__sflush_r+0xc0>
 800eef6:	684b      	ldr	r3, [r1, #4]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	dc05      	bgt.n	800ef08 <__sflush_r+0x20>
 800eefc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	dc02      	bgt.n	800ef08 <__sflush_r+0x20>
 800ef02:	2000      	movs	r0, #0
 800ef04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef0a:	2e00      	cmp	r6, #0
 800ef0c:	d0f9      	beq.n	800ef02 <__sflush_r+0x1a>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef14:	682f      	ldr	r7, [r5, #0]
 800ef16:	602b      	str	r3, [r5, #0]
 800ef18:	d032      	beq.n	800ef80 <__sflush_r+0x98>
 800ef1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef1c:	89a3      	ldrh	r3, [r4, #12]
 800ef1e:	075a      	lsls	r2, r3, #29
 800ef20:	d505      	bpl.n	800ef2e <__sflush_r+0x46>
 800ef22:	6863      	ldr	r3, [r4, #4]
 800ef24:	1ac0      	subs	r0, r0, r3
 800ef26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef28:	b10b      	cbz	r3, 800ef2e <__sflush_r+0x46>
 800ef2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef2c:	1ac0      	subs	r0, r0, r3
 800ef2e:	2300      	movs	r3, #0
 800ef30:	4602      	mov	r2, r0
 800ef32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef34:	6a21      	ldr	r1, [r4, #32]
 800ef36:	4628      	mov	r0, r5
 800ef38:	47b0      	blx	r6
 800ef3a:	1c43      	adds	r3, r0, #1
 800ef3c:	89a3      	ldrh	r3, [r4, #12]
 800ef3e:	d106      	bne.n	800ef4e <__sflush_r+0x66>
 800ef40:	6829      	ldr	r1, [r5, #0]
 800ef42:	291d      	cmp	r1, #29
 800ef44:	d82c      	bhi.n	800efa0 <__sflush_r+0xb8>
 800ef46:	4a2a      	ldr	r2, [pc, #168]	; (800eff0 <__sflush_r+0x108>)
 800ef48:	40ca      	lsrs	r2, r1
 800ef4a:	07d6      	lsls	r6, r2, #31
 800ef4c:	d528      	bpl.n	800efa0 <__sflush_r+0xb8>
 800ef4e:	2200      	movs	r2, #0
 800ef50:	6062      	str	r2, [r4, #4]
 800ef52:	04d9      	lsls	r1, r3, #19
 800ef54:	6922      	ldr	r2, [r4, #16]
 800ef56:	6022      	str	r2, [r4, #0]
 800ef58:	d504      	bpl.n	800ef64 <__sflush_r+0x7c>
 800ef5a:	1c42      	adds	r2, r0, #1
 800ef5c:	d101      	bne.n	800ef62 <__sflush_r+0x7a>
 800ef5e:	682b      	ldr	r3, [r5, #0]
 800ef60:	b903      	cbnz	r3, 800ef64 <__sflush_r+0x7c>
 800ef62:	6560      	str	r0, [r4, #84]	; 0x54
 800ef64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef66:	602f      	str	r7, [r5, #0]
 800ef68:	2900      	cmp	r1, #0
 800ef6a:	d0ca      	beq.n	800ef02 <__sflush_r+0x1a>
 800ef6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef70:	4299      	cmp	r1, r3
 800ef72:	d002      	beq.n	800ef7a <__sflush_r+0x92>
 800ef74:	4628      	mov	r0, r5
 800ef76:	f7fa f8e5 	bl	8009144 <_free_r>
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	6360      	str	r0, [r4, #52]	; 0x34
 800ef7e:	e7c1      	b.n	800ef04 <__sflush_r+0x1c>
 800ef80:	6a21      	ldr	r1, [r4, #32]
 800ef82:	2301      	movs	r3, #1
 800ef84:	4628      	mov	r0, r5
 800ef86:	47b0      	blx	r6
 800ef88:	1c41      	adds	r1, r0, #1
 800ef8a:	d1c7      	bne.n	800ef1c <__sflush_r+0x34>
 800ef8c:	682b      	ldr	r3, [r5, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d0c4      	beq.n	800ef1c <__sflush_r+0x34>
 800ef92:	2b1d      	cmp	r3, #29
 800ef94:	d001      	beq.n	800ef9a <__sflush_r+0xb2>
 800ef96:	2b16      	cmp	r3, #22
 800ef98:	d101      	bne.n	800ef9e <__sflush_r+0xb6>
 800ef9a:	602f      	str	r7, [r5, #0]
 800ef9c:	e7b1      	b.n	800ef02 <__sflush_r+0x1a>
 800ef9e:	89a3      	ldrh	r3, [r4, #12]
 800efa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efa4:	81a3      	strh	r3, [r4, #12]
 800efa6:	e7ad      	b.n	800ef04 <__sflush_r+0x1c>
 800efa8:	690f      	ldr	r7, [r1, #16]
 800efaa:	2f00      	cmp	r7, #0
 800efac:	d0a9      	beq.n	800ef02 <__sflush_r+0x1a>
 800efae:	0793      	lsls	r3, r2, #30
 800efb0:	680e      	ldr	r6, [r1, #0]
 800efb2:	bf08      	it	eq
 800efb4:	694b      	ldreq	r3, [r1, #20]
 800efb6:	600f      	str	r7, [r1, #0]
 800efb8:	bf18      	it	ne
 800efba:	2300      	movne	r3, #0
 800efbc:	eba6 0807 	sub.w	r8, r6, r7
 800efc0:	608b      	str	r3, [r1, #8]
 800efc2:	f1b8 0f00 	cmp.w	r8, #0
 800efc6:	dd9c      	ble.n	800ef02 <__sflush_r+0x1a>
 800efc8:	6a21      	ldr	r1, [r4, #32]
 800efca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efcc:	4643      	mov	r3, r8
 800efce:	463a      	mov	r2, r7
 800efd0:	4628      	mov	r0, r5
 800efd2:	47b0      	blx	r6
 800efd4:	2800      	cmp	r0, #0
 800efd6:	dc06      	bgt.n	800efe6 <__sflush_r+0xfe>
 800efd8:	89a3      	ldrh	r3, [r4, #12]
 800efda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efde:	81a3      	strh	r3, [r4, #12]
 800efe0:	f04f 30ff 	mov.w	r0, #4294967295
 800efe4:	e78e      	b.n	800ef04 <__sflush_r+0x1c>
 800efe6:	4407      	add	r7, r0
 800efe8:	eba8 0800 	sub.w	r8, r8, r0
 800efec:	e7e9      	b.n	800efc2 <__sflush_r+0xda>
 800efee:	bf00      	nop
 800eff0:	20400001 	.word	0x20400001

0800eff4 <_fflush_r>:
 800eff4:	b538      	push	{r3, r4, r5, lr}
 800eff6:	690b      	ldr	r3, [r1, #16]
 800eff8:	4605      	mov	r5, r0
 800effa:	460c      	mov	r4, r1
 800effc:	b913      	cbnz	r3, 800f004 <_fflush_r+0x10>
 800effe:	2500      	movs	r5, #0
 800f000:	4628      	mov	r0, r5
 800f002:	bd38      	pop	{r3, r4, r5, pc}
 800f004:	b118      	cbz	r0, 800f00e <_fflush_r+0x1a>
 800f006:	6983      	ldr	r3, [r0, #24]
 800f008:	b90b      	cbnz	r3, 800f00e <_fflush_r+0x1a>
 800f00a:	f000 f887 	bl	800f11c <__sinit>
 800f00e:	4b14      	ldr	r3, [pc, #80]	; (800f060 <_fflush_r+0x6c>)
 800f010:	429c      	cmp	r4, r3
 800f012:	d11b      	bne.n	800f04c <_fflush_r+0x58>
 800f014:	686c      	ldr	r4, [r5, #4]
 800f016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d0ef      	beq.n	800effe <_fflush_r+0xa>
 800f01e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f020:	07d0      	lsls	r0, r2, #31
 800f022:	d404      	bmi.n	800f02e <_fflush_r+0x3a>
 800f024:	0599      	lsls	r1, r3, #22
 800f026:	d402      	bmi.n	800f02e <_fflush_r+0x3a>
 800f028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f02a:	f7fe fb13 	bl	800d654 <__retarget_lock_acquire_recursive>
 800f02e:	4628      	mov	r0, r5
 800f030:	4621      	mov	r1, r4
 800f032:	f7ff ff59 	bl	800eee8 <__sflush_r>
 800f036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f038:	07da      	lsls	r2, r3, #31
 800f03a:	4605      	mov	r5, r0
 800f03c:	d4e0      	bmi.n	800f000 <_fflush_r+0xc>
 800f03e:	89a3      	ldrh	r3, [r4, #12]
 800f040:	059b      	lsls	r3, r3, #22
 800f042:	d4dd      	bmi.n	800f000 <_fflush_r+0xc>
 800f044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f046:	f7fe fb07 	bl	800d658 <__retarget_lock_release_recursive>
 800f04a:	e7d9      	b.n	800f000 <_fflush_r+0xc>
 800f04c:	4b05      	ldr	r3, [pc, #20]	; (800f064 <_fflush_r+0x70>)
 800f04e:	429c      	cmp	r4, r3
 800f050:	d101      	bne.n	800f056 <_fflush_r+0x62>
 800f052:	68ac      	ldr	r4, [r5, #8]
 800f054:	e7df      	b.n	800f016 <_fflush_r+0x22>
 800f056:	4b04      	ldr	r3, [pc, #16]	; (800f068 <_fflush_r+0x74>)
 800f058:	429c      	cmp	r4, r3
 800f05a:	bf08      	it	eq
 800f05c:	68ec      	ldreq	r4, [r5, #12]
 800f05e:	e7da      	b.n	800f016 <_fflush_r+0x22>
 800f060:	08010428 	.word	0x08010428
 800f064:	08010448 	.word	0x08010448
 800f068:	08010408 	.word	0x08010408

0800f06c <std>:
 800f06c:	2300      	movs	r3, #0
 800f06e:	b510      	push	{r4, lr}
 800f070:	4604      	mov	r4, r0
 800f072:	e9c0 3300 	strd	r3, r3, [r0]
 800f076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f07a:	6083      	str	r3, [r0, #8]
 800f07c:	8181      	strh	r1, [r0, #12]
 800f07e:	6643      	str	r3, [r0, #100]	; 0x64
 800f080:	81c2      	strh	r2, [r0, #14]
 800f082:	6183      	str	r3, [r0, #24]
 800f084:	4619      	mov	r1, r3
 800f086:	2208      	movs	r2, #8
 800f088:	305c      	adds	r0, #92	; 0x5c
 800f08a:	f7f9 fde1 	bl	8008c50 <memset>
 800f08e:	4b05      	ldr	r3, [pc, #20]	; (800f0a4 <std+0x38>)
 800f090:	6263      	str	r3, [r4, #36]	; 0x24
 800f092:	4b05      	ldr	r3, [pc, #20]	; (800f0a8 <std+0x3c>)
 800f094:	62a3      	str	r3, [r4, #40]	; 0x28
 800f096:	4b05      	ldr	r3, [pc, #20]	; (800f0ac <std+0x40>)
 800f098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f09a:	4b05      	ldr	r3, [pc, #20]	; (800f0b0 <std+0x44>)
 800f09c:	6224      	str	r4, [r4, #32]
 800f09e:	6323      	str	r3, [r4, #48]	; 0x30
 800f0a0:	bd10      	pop	{r4, pc}
 800f0a2:	bf00      	nop
 800f0a4:	0800a125 	.word	0x0800a125
 800f0a8:	0800a14b 	.word	0x0800a14b
 800f0ac:	0800a183 	.word	0x0800a183
 800f0b0:	0800a1a7 	.word	0x0800a1a7

0800f0b4 <_cleanup_r>:
 800f0b4:	4901      	ldr	r1, [pc, #4]	; (800f0bc <_cleanup_r+0x8>)
 800f0b6:	f000 b8af 	b.w	800f218 <_fwalk_reent>
 800f0ba:	bf00      	nop
 800f0bc:	0800eff5 	.word	0x0800eff5

0800f0c0 <__sfmoreglue>:
 800f0c0:	b570      	push	{r4, r5, r6, lr}
 800f0c2:	2268      	movs	r2, #104	; 0x68
 800f0c4:	1e4d      	subs	r5, r1, #1
 800f0c6:	4355      	muls	r5, r2
 800f0c8:	460e      	mov	r6, r1
 800f0ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f0ce:	f7fa f8a5 	bl	800921c <_malloc_r>
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	b140      	cbz	r0, 800f0e8 <__sfmoreglue+0x28>
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	e9c0 1600 	strd	r1, r6, [r0]
 800f0dc:	300c      	adds	r0, #12
 800f0de:	60a0      	str	r0, [r4, #8]
 800f0e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0e4:	f7f9 fdb4 	bl	8008c50 <memset>
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	bd70      	pop	{r4, r5, r6, pc}

0800f0ec <__sfp_lock_acquire>:
 800f0ec:	4801      	ldr	r0, [pc, #4]	; (800f0f4 <__sfp_lock_acquire+0x8>)
 800f0ee:	f7fe bab1 	b.w	800d654 <__retarget_lock_acquire_recursive>
 800f0f2:	bf00      	nop
 800f0f4:	2000035a 	.word	0x2000035a

0800f0f8 <__sfp_lock_release>:
 800f0f8:	4801      	ldr	r0, [pc, #4]	; (800f100 <__sfp_lock_release+0x8>)
 800f0fa:	f7fe baad 	b.w	800d658 <__retarget_lock_release_recursive>
 800f0fe:	bf00      	nop
 800f100:	2000035a 	.word	0x2000035a

0800f104 <__sinit_lock_acquire>:
 800f104:	4801      	ldr	r0, [pc, #4]	; (800f10c <__sinit_lock_acquire+0x8>)
 800f106:	f7fe baa5 	b.w	800d654 <__retarget_lock_acquire_recursive>
 800f10a:	bf00      	nop
 800f10c:	2000035b 	.word	0x2000035b

0800f110 <__sinit_lock_release>:
 800f110:	4801      	ldr	r0, [pc, #4]	; (800f118 <__sinit_lock_release+0x8>)
 800f112:	f7fe baa1 	b.w	800d658 <__retarget_lock_release_recursive>
 800f116:	bf00      	nop
 800f118:	2000035b 	.word	0x2000035b

0800f11c <__sinit>:
 800f11c:	b510      	push	{r4, lr}
 800f11e:	4604      	mov	r4, r0
 800f120:	f7ff fff0 	bl	800f104 <__sinit_lock_acquire>
 800f124:	69a3      	ldr	r3, [r4, #24]
 800f126:	b11b      	cbz	r3, 800f130 <__sinit+0x14>
 800f128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f12c:	f7ff bff0 	b.w	800f110 <__sinit_lock_release>
 800f130:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f134:	6523      	str	r3, [r4, #80]	; 0x50
 800f136:	4b13      	ldr	r3, [pc, #76]	; (800f184 <__sinit+0x68>)
 800f138:	4a13      	ldr	r2, [pc, #76]	; (800f188 <__sinit+0x6c>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f13e:	42a3      	cmp	r3, r4
 800f140:	bf04      	itt	eq
 800f142:	2301      	moveq	r3, #1
 800f144:	61a3      	streq	r3, [r4, #24]
 800f146:	4620      	mov	r0, r4
 800f148:	f000 f820 	bl	800f18c <__sfp>
 800f14c:	6060      	str	r0, [r4, #4]
 800f14e:	4620      	mov	r0, r4
 800f150:	f000 f81c 	bl	800f18c <__sfp>
 800f154:	60a0      	str	r0, [r4, #8]
 800f156:	4620      	mov	r0, r4
 800f158:	f000 f818 	bl	800f18c <__sfp>
 800f15c:	2200      	movs	r2, #0
 800f15e:	60e0      	str	r0, [r4, #12]
 800f160:	2104      	movs	r1, #4
 800f162:	6860      	ldr	r0, [r4, #4]
 800f164:	f7ff ff82 	bl	800f06c <std>
 800f168:	68a0      	ldr	r0, [r4, #8]
 800f16a:	2201      	movs	r2, #1
 800f16c:	2109      	movs	r1, #9
 800f16e:	f7ff ff7d 	bl	800f06c <std>
 800f172:	68e0      	ldr	r0, [r4, #12]
 800f174:	2202      	movs	r2, #2
 800f176:	2112      	movs	r1, #18
 800f178:	f7ff ff78 	bl	800f06c <std>
 800f17c:	2301      	movs	r3, #1
 800f17e:	61a3      	str	r3, [r4, #24]
 800f180:	e7d2      	b.n	800f128 <__sinit+0xc>
 800f182:	bf00      	nop
 800f184:	0800fbd8 	.word	0x0800fbd8
 800f188:	0800f0b5 	.word	0x0800f0b5

0800f18c <__sfp>:
 800f18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18e:	4607      	mov	r7, r0
 800f190:	f7ff ffac 	bl	800f0ec <__sfp_lock_acquire>
 800f194:	4b1e      	ldr	r3, [pc, #120]	; (800f210 <__sfp+0x84>)
 800f196:	681e      	ldr	r6, [r3, #0]
 800f198:	69b3      	ldr	r3, [r6, #24]
 800f19a:	b913      	cbnz	r3, 800f1a2 <__sfp+0x16>
 800f19c:	4630      	mov	r0, r6
 800f19e:	f7ff ffbd 	bl	800f11c <__sinit>
 800f1a2:	3648      	adds	r6, #72	; 0x48
 800f1a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	d503      	bpl.n	800f1b4 <__sfp+0x28>
 800f1ac:	6833      	ldr	r3, [r6, #0]
 800f1ae:	b30b      	cbz	r3, 800f1f4 <__sfp+0x68>
 800f1b0:	6836      	ldr	r6, [r6, #0]
 800f1b2:	e7f7      	b.n	800f1a4 <__sfp+0x18>
 800f1b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f1b8:	b9d5      	cbnz	r5, 800f1f0 <__sfp+0x64>
 800f1ba:	4b16      	ldr	r3, [pc, #88]	; (800f214 <__sfp+0x88>)
 800f1bc:	60e3      	str	r3, [r4, #12]
 800f1be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f1c2:	6665      	str	r5, [r4, #100]	; 0x64
 800f1c4:	f7fe fa44 	bl	800d650 <__retarget_lock_init_recursive>
 800f1c8:	f7ff ff96 	bl	800f0f8 <__sfp_lock_release>
 800f1cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f1d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f1d4:	6025      	str	r5, [r4, #0]
 800f1d6:	61a5      	str	r5, [r4, #24]
 800f1d8:	2208      	movs	r2, #8
 800f1da:	4629      	mov	r1, r5
 800f1dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f1e0:	f7f9 fd36 	bl	8008c50 <memset>
 800f1e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f1e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1f0:	3468      	adds	r4, #104	; 0x68
 800f1f2:	e7d9      	b.n	800f1a8 <__sfp+0x1c>
 800f1f4:	2104      	movs	r1, #4
 800f1f6:	4638      	mov	r0, r7
 800f1f8:	f7ff ff62 	bl	800f0c0 <__sfmoreglue>
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	6030      	str	r0, [r6, #0]
 800f200:	2800      	cmp	r0, #0
 800f202:	d1d5      	bne.n	800f1b0 <__sfp+0x24>
 800f204:	f7ff ff78 	bl	800f0f8 <__sfp_lock_release>
 800f208:	230c      	movs	r3, #12
 800f20a:	603b      	str	r3, [r7, #0]
 800f20c:	e7ee      	b.n	800f1ec <__sfp+0x60>
 800f20e:	bf00      	nop
 800f210:	0800fbd8 	.word	0x0800fbd8
 800f214:	ffff0001 	.word	0xffff0001

0800f218 <_fwalk_reent>:
 800f218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f21c:	4606      	mov	r6, r0
 800f21e:	4688      	mov	r8, r1
 800f220:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f224:	2700      	movs	r7, #0
 800f226:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f22a:	f1b9 0901 	subs.w	r9, r9, #1
 800f22e:	d505      	bpl.n	800f23c <_fwalk_reent+0x24>
 800f230:	6824      	ldr	r4, [r4, #0]
 800f232:	2c00      	cmp	r4, #0
 800f234:	d1f7      	bne.n	800f226 <_fwalk_reent+0xe>
 800f236:	4638      	mov	r0, r7
 800f238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f23c:	89ab      	ldrh	r3, [r5, #12]
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d907      	bls.n	800f252 <_fwalk_reent+0x3a>
 800f242:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f246:	3301      	adds	r3, #1
 800f248:	d003      	beq.n	800f252 <_fwalk_reent+0x3a>
 800f24a:	4629      	mov	r1, r5
 800f24c:	4630      	mov	r0, r6
 800f24e:	47c0      	blx	r8
 800f250:	4307      	orrs	r7, r0
 800f252:	3568      	adds	r5, #104	; 0x68
 800f254:	e7e9      	b.n	800f22a <_fwalk_reent+0x12>

0800f256 <__swhatbuf_r>:
 800f256:	b570      	push	{r4, r5, r6, lr}
 800f258:	460e      	mov	r6, r1
 800f25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f25e:	2900      	cmp	r1, #0
 800f260:	b096      	sub	sp, #88	; 0x58
 800f262:	4614      	mov	r4, r2
 800f264:	461d      	mov	r5, r3
 800f266:	da08      	bge.n	800f27a <__swhatbuf_r+0x24>
 800f268:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f26c:	2200      	movs	r2, #0
 800f26e:	602a      	str	r2, [r5, #0]
 800f270:	061a      	lsls	r2, r3, #24
 800f272:	d410      	bmi.n	800f296 <__swhatbuf_r+0x40>
 800f274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f278:	e00e      	b.n	800f298 <__swhatbuf_r+0x42>
 800f27a:	466a      	mov	r2, sp
 800f27c:	f000 f8de 	bl	800f43c <_fstat_r>
 800f280:	2800      	cmp	r0, #0
 800f282:	dbf1      	blt.n	800f268 <__swhatbuf_r+0x12>
 800f284:	9a01      	ldr	r2, [sp, #4]
 800f286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f28a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f28e:	425a      	negs	r2, r3
 800f290:	415a      	adcs	r2, r3
 800f292:	602a      	str	r2, [r5, #0]
 800f294:	e7ee      	b.n	800f274 <__swhatbuf_r+0x1e>
 800f296:	2340      	movs	r3, #64	; 0x40
 800f298:	2000      	movs	r0, #0
 800f29a:	6023      	str	r3, [r4, #0]
 800f29c:	b016      	add	sp, #88	; 0x58
 800f29e:	bd70      	pop	{r4, r5, r6, pc}

0800f2a0 <__smakebuf_r>:
 800f2a0:	898b      	ldrh	r3, [r1, #12]
 800f2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2a4:	079d      	lsls	r5, r3, #30
 800f2a6:	4606      	mov	r6, r0
 800f2a8:	460c      	mov	r4, r1
 800f2aa:	d507      	bpl.n	800f2bc <__smakebuf_r+0x1c>
 800f2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2b0:	6023      	str	r3, [r4, #0]
 800f2b2:	6123      	str	r3, [r4, #16]
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	6163      	str	r3, [r4, #20]
 800f2b8:	b002      	add	sp, #8
 800f2ba:	bd70      	pop	{r4, r5, r6, pc}
 800f2bc:	ab01      	add	r3, sp, #4
 800f2be:	466a      	mov	r2, sp
 800f2c0:	f7ff ffc9 	bl	800f256 <__swhatbuf_r>
 800f2c4:	9900      	ldr	r1, [sp, #0]
 800f2c6:	4605      	mov	r5, r0
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f7f9 ffa7 	bl	800921c <_malloc_r>
 800f2ce:	b948      	cbnz	r0, 800f2e4 <__smakebuf_r+0x44>
 800f2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2d4:	059a      	lsls	r2, r3, #22
 800f2d6:	d4ef      	bmi.n	800f2b8 <__smakebuf_r+0x18>
 800f2d8:	f023 0303 	bic.w	r3, r3, #3
 800f2dc:	f043 0302 	orr.w	r3, r3, #2
 800f2e0:	81a3      	strh	r3, [r4, #12]
 800f2e2:	e7e3      	b.n	800f2ac <__smakebuf_r+0xc>
 800f2e4:	4b0d      	ldr	r3, [pc, #52]	; (800f31c <__smakebuf_r+0x7c>)
 800f2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f2e8:	89a3      	ldrh	r3, [r4, #12]
 800f2ea:	6020      	str	r0, [r4, #0]
 800f2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2f0:	81a3      	strh	r3, [r4, #12]
 800f2f2:	9b00      	ldr	r3, [sp, #0]
 800f2f4:	6163      	str	r3, [r4, #20]
 800f2f6:	9b01      	ldr	r3, [sp, #4]
 800f2f8:	6120      	str	r0, [r4, #16]
 800f2fa:	b15b      	cbz	r3, 800f314 <__smakebuf_r+0x74>
 800f2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f300:	4630      	mov	r0, r6
 800f302:	f000 f8ad 	bl	800f460 <_isatty_r>
 800f306:	b128      	cbz	r0, 800f314 <__smakebuf_r+0x74>
 800f308:	89a3      	ldrh	r3, [r4, #12]
 800f30a:	f023 0303 	bic.w	r3, r3, #3
 800f30e:	f043 0301 	orr.w	r3, r3, #1
 800f312:	81a3      	strh	r3, [r4, #12]
 800f314:	89a0      	ldrh	r0, [r4, #12]
 800f316:	4305      	orrs	r5, r0
 800f318:	81a5      	strh	r5, [r4, #12]
 800f31a:	e7cd      	b.n	800f2b8 <__smakebuf_r+0x18>
 800f31c:	0800f0b5 	.word	0x0800f0b5

0800f320 <memmove>:
 800f320:	4288      	cmp	r0, r1
 800f322:	b510      	push	{r4, lr}
 800f324:	eb01 0402 	add.w	r4, r1, r2
 800f328:	d902      	bls.n	800f330 <memmove+0x10>
 800f32a:	4284      	cmp	r4, r0
 800f32c:	4623      	mov	r3, r4
 800f32e:	d807      	bhi.n	800f340 <memmove+0x20>
 800f330:	1e43      	subs	r3, r0, #1
 800f332:	42a1      	cmp	r1, r4
 800f334:	d008      	beq.n	800f348 <memmove+0x28>
 800f336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f33a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f33e:	e7f8      	b.n	800f332 <memmove+0x12>
 800f340:	4402      	add	r2, r0
 800f342:	4601      	mov	r1, r0
 800f344:	428a      	cmp	r2, r1
 800f346:	d100      	bne.n	800f34a <memmove+0x2a>
 800f348:	bd10      	pop	{r4, pc}
 800f34a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f34e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f352:	e7f7      	b.n	800f344 <memmove+0x24>

0800f354 <_realloc_r>:
 800f354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f358:	4680      	mov	r8, r0
 800f35a:	4614      	mov	r4, r2
 800f35c:	460e      	mov	r6, r1
 800f35e:	b921      	cbnz	r1, 800f36a <_realloc_r+0x16>
 800f360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f364:	4611      	mov	r1, r2
 800f366:	f7f9 bf59 	b.w	800921c <_malloc_r>
 800f36a:	b92a      	cbnz	r2, 800f378 <_realloc_r+0x24>
 800f36c:	f7f9 feea 	bl	8009144 <_free_r>
 800f370:	4625      	mov	r5, r4
 800f372:	4628      	mov	r0, r5
 800f374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f378:	f000 f882 	bl	800f480 <_malloc_usable_size_r>
 800f37c:	4284      	cmp	r4, r0
 800f37e:	4607      	mov	r7, r0
 800f380:	d802      	bhi.n	800f388 <_realloc_r+0x34>
 800f382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f386:	d812      	bhi.n	800f3ae <_realloc_r+0x5a>
 800f388:	4621      	mov	r1, r4
 800f38a:	4640      	mov	r0, r8
 800f38c:	f7f9 ff46 	bl	800921c <_malloc_r>
 800f390:	4605      	mov	r5, r0
 800f392:	2800      	cmp	r0, #0
 800f394:	d0ed      	beq.n	800f372 <_realloc_r+0x1e>
 800f396:	42bc      	cmp	r4, r7
 800f398:	4622      	mov	r2, r4
 800f39a:	4631      	mov	r1, r6
 800f39c:	bf28      	it	cs
 800f39e:	463a      	movcs	r2, r7
 800f3a0:	f7f9 fc48 	bl	8008c34 <memcpy>
 800f3a4:	4631      	mov	r1, r6
 800f3a6:	4640      	mov	r0, r8
 800f3a8:	f7f9 fecc 	bl	8009144 <_free_r>
 800f3ac:	e7e1      	b.n	800f372 <_realloc_r+0x1e>
 800f3ae:	4635      	mov	r5, r6
 800f3b0:	e7df      	b.n	800f372 <_realloc_r+0x1e>

0800f3b2 <_raise_r>:
 800f3b2:	291f      	cmp	r1, #31
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	460d      	mov	r5, r1
 800f3ba:	d904      	bls.n	800f3c6 <_raise_r+0x14>
 800f3bc:	2316      	movs	r3, #22
 800f3be:	6003      	str	r3, [r0, #0]
 800f3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c4:	bd38      	pop	{r3, r4, r5, pc}
 800f3c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f3c8:	b112      	cbz	r2, 800f3d0 <_raise_r+0x1e>
 800f3ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f3ce:	b94b      	cbnz	r3, 800f3e4 <_raise_r+0x32>
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f000 f831 	bl	800f438 <_getpid_r>
 800f3d6:	462a      	mov	r2, r5
 800f3d8:	4601      	mov	r1, r0
 800f3da:	4620      	mov	r0, r4
 800f3dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3e0:	f000 b818 	b.w	800f414 <_kill_r>
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	d00a      	beq.n	800f3fe <_raise_r+0x4c>
 800f3e8:	1c59      	adds	r1, r3, #1
 800f3ea:	d103      	bne.n	800f3f4 <_raise_r+0x42>
 800f3ec:	2316      	movs	r3, #22
 800f3ee:	6003      	str	r3, [r0, #0]
 800f3f0:	2001      	movs	r0, #1
 800f3f2:	e7e7      	b.n	800f3c4 <_raise_r+0x12>
 800f3f4:	2400      	movs	r4, #0
 800f3f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	4798      	blx	r3
 800f3fe:	2000      	movs	r0, #0
 800f400:	e7e0      	b.n	800f3c4 <_raise_r+0x12>
	...

0800f404 <raise>:
 800f404:	4b02      	ldr	r3, [pc, #8]	; (800f410 <raise+0xc>)
 800f406:	4601      	mov	r1, r0
 800f408:	6818      	ldr	r0, [r3, #0]
 800f40a:	f7ff bfd2 	b.w	800f3b2 <_raise_r>
 800f40e:	bf00      	nop
 800f410:	2000000c 	.word	0x2000000c

0800f414 <_kill_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4d07      	ldr	r5, [pc, #28]	; (800f434 <_kill_r+0x20>)
 800f418:	2300      	movs	r3, #0
 800f41a:	4604      	mov	r4, r0
 800f41c:	4608      	mov	r0, r1
 800f41e:	4611      	mov	r1, r2
 800f420:	602b      	str	r3, [r5, #0]
 800f422:	f000 f855 	bl	800f4d0 <_kill>
 800f426:	1c43      	adds	r3, r0, #1
 800f428:	d102      	bne.n	800f430 <_kill_r+0x1c>
 800f42a:	682b      	ldr	r3, [r5, #0]
 800f42c:	b103      	cbz	r3, 800f430 <_kill_r+0x1c>
 800f42e:	6023      	str	r3, [r4, #0]
 800f430:	bd38      	pop	{r3, r4, r5, pc}
 800f432:	bf00      	nop
 800f434:	20000360 	.word	0x20000360

0800f438 <_getpid_r>:
 800f438:	f000 b83a 	b.w	800f4b0 <_getpid>

0800f43c <_fstat_r>:
 800f43c:	b538      	push	{r3, r4, r5, lr}
 800f43e:	4d07      	ldr	r5, [pc, #28]	; (800f45c <_fstat_r+0x20>)
 800f440:	2300      	movs	r3, #0
 800f442:	4604      	mov	r4, r0
 800f444:	4608      	mov	r0, r1
 800f446:	4611      	mov	r1, r2
 800f448:	602b      	str	r3, [r5, #0]
 800f44a:	f000 f829 	bl	800f4a0 <_fstat>
 800f44e:	1c43      	adds	r3, r0, #1
 800f450:	d102      	bne.n	800f458 <_fstat_r+0x1c>
 800f452:	682b      	ldr	r3, [r5, #0]
 800f454:	b103      	cbz	r3, 800f458 <_fstat_r+0x1c>
 800f456:	6023      	str	r3, [r4, #0]
 800f458:	bd38      	pop	{r3, r4, r5, pc}
 800f45a:	bf00      	nop
 800f45c:	20000360 	.word	0x20000360

0800f460 <_isatty_r>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	4d06      	ldr	r5, [pc, #24]	; (800f47c <_isatty_r+0x1c>)
 800f464:	2300      	movs	r3, #0
 800f466:	4604      	mov	r4, r0
 800f468:	4608      	mov	r0, r1
 800f46a:	602b      	str	r3, [r5, #0]
 800f46c:	f000 f828 	bl	800f4c0 <_isatty>
 800f470:	1c43      	adds	r3, r0, #1
 800f472:	d102      	bne.n	800f47a <_isatty_r+0x1a>
 800f474:	682b      	ldr	r3, [r5, #0]
 800f476:	b103      	cbz	r3, 800f47a <_isatty_r+0x1a>
 800f478:	6023      	str	r3, [r4, #0]
 800f47a:	bd38      	pop	{r3, r4, r5, pc}
 800f47c:	20000360 	.word	0x20000360

0800f480 <_malloc_usable_size_r>:
 800f480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f484:	1f18      	subs	r0, r3, #4
 800f486:	2b00      	cmp	r3, #0
 800f488:	bfbc      	itt	lt
 800f48a:	580b      	ldrlt	r3, [r1, r0]
 800f48c:	18c0      	addlt	r0, r0, r3
 800f48e:	4770      	bx	lr

0800f490 <_close>:
 800f490:	4b02      	ldr	r3, [pc, #8]	; (800f49c <_close+0xc>)
 800f492:	2258      	movs	r2, #88	; 0x58
 800f494:	601a      	str	r2, [r3, #0]
 800f496:	f04f 30ff 	mov.w	r0, #4294967295
 800f49a:	4770      	bx	lr
 800f49c:	20000360 	.word	0x20000360

0800f4a0 <_fstat>:
 800f4a0:	4b02      	ldr	r3, [pc, #8]	; (800f4ac <_fstat+0xc>)
 800f4a2:	2258      	movs	r2, #88	; 0x58
 800f4a4:	601a      	str	r2, [r3, #0]
 800f4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4aa:	4770      	bx	lr
 800f4ac:	20000360 	.word	0x20000360

0800f4b0 <_getpid>:
 800f4b0:	4b02      	ldr	r3, [pc, #8]	; (800f4bc <_getpid+0xc>)
 800f4b2:	2258      	movs	r2, #88	; 0x58
 800f4b4:	601a      	str	r2, [r3, #0]
 800f4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ba:	4770      	bx	lr
 800f4bc:	20000360 	.word	0x20000360

0800f4c0 <_isatty>:
 800f4c0:	4b02      	ldr	r3, [pc, #8]	; (800f4cc <_isatty+0xc>)
 800f4c2:	2258      	movs	r2, #88	; 0x58
 800f4c4:	601a      	str	r2, [r3, #0]
 800f4c6:	2000      	movs	r0, #0
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	20000360 	.word	0x20000360

0800f4d0 <_kill>:
 800f4d0:	4b02      	ldr	r3, [pc, #8]	; (800f4dc <_kill+0xc>)
 800f4d2:	2258      	movs	r2, #88	; 0x58
 800f4d4:	601a      	str	r2, [r3, #0]
 800f4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4da:	4770      	bx	lr
 800f4dc:	20000360 	.word	0x20000360

0800f4e0 <_lseek>:
 800f4e0:	4b02      	ldr	r3, [pc, #8]	; (800f4ec <_lseek+0xc>)
 800f4e2:	2258      	movs	r2, #88	; 0x58
 800f4e4:	601a      	str	r2, [r3, #0]
 800f4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ea:	4770      	bx	lr
 800f4ec:	20000360 	.word	0x20000360

0800f4f0 <_read>:
 800f4f0:	4b02      	ldr	r3, [pc, #8]	; (800f4fc <_read+0xc>)
 800f4f2:	2258      	movs	r2, #88	; 0x58
 800f4f4:	601a      	str	r2, [r3, #0]
 800f4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4fa:	4770      	bx	lr
 800f4fc:	20000360 	.word	0x20000360

0800f500 <_sbrk>:
 800f500:	4a04      	ldr	r2, [pc, #16]	; (800f514 <_sbrk+0x14>)
 800f502:	6811      	ldr	r1, [r2, #0]
 800f504:	4603      	mov	r3, r0
 800f506:	b909      	cbnz	r1, 800f50c <_sbrk+0xc>
 800f508:	4903      	ldr	r1, [pc, #12]	; (800f518 <_sbrk+0x18>)
 800f50a:	6011      	str	r1, [r2, #0]
 800f50c:	6810      	ldr	r0, [r2, #0]
 800f50e:	4403      	add	r3, r0
 800f510:	6013      	str	r3, [r2, #0]
 800f512:	4770      	bx	lr
 800f514:	20000368 	.word	0x20000368
 800f518:	20000370 	.word	0x20000370

0800f51c <_write>:
 800f51c:	4b02      	ldr	r3, [pc, #8]	; (800f528 <_write+0xc>)
 800f51e:	2258      	movs	r2, #88	; 0x58
 800f520:	601a      	str	r2, [r3, #0]
 800f522:	f04f 30ff 	mov.w	r0, #4294967295
 800f526:	4770      	bx	lr
 800f528:	20000360 	.word	0x20000360

0800f52c <_exit>:
 800f52c:	e7fe      	b.n	800f52c <_exit>
	...

0800f530 <_init>:
 800f530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f532:	bf00      	nop
 800f534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f536:	bc08      	pop	{r3}
 800f538:	469e      	mov	lr, r3
 800f53a:	4770      	bx	lr

0800f53c <_fini>:
 800f53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f53e:	bf00      	nop
 800f540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f542:	bc08      	pop	{r3}
 800f544:	469e      	mov	lr, r3
 800f546:	4770      	bx	lr
